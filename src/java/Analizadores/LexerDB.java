// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/Analizadores/LexerDB.flex

package Analizadores;
import java_cup.runtime.Symbol;

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class LexerDB implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  2,  3,  3,  2,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     4,  5,  6,  7,  8,  7,  7,  9, 10, 11,  0,  0, 12, 13, 14, 15, 
    16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 17,  0, 18, 19, 20,  0, 
     7, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 
    36, 37, 38, 39, 40, 41, 42, 43, 44, 30, 30, 45,  0, 46,  0, 47, 
     0, 48, 49, 50, 51, 52, 53, 30, 54, 55, 30, 56, 57, 58, 59, 60, 
    61, 30, 62, 63, 64, 65, 30, 66, 30, 30, 30, 67, 68, 69,  0,  0, 
     0,  0,  0,  0,  0,  3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\0\1\2\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\3\1\0\1\11\1\12\1\13\1\14"+
    "\1\15\22\3\1\16\1\17\7\3\1\20\1\21\1\22"+
    "\1\23\1\0\1\24\1\1\1\0\1\11\1\25\1\26"+
    "\1\27\1\0\20\3\1\30\4\3\1\31\2\3\1\32"+
    "\4\3\1\31\2\3\1\33\11\3\1\34\2\11\1\0"+
    "\27\3\1\35\12\3\1\36\11\3\1\11\1\0\3\3"+
    "\1\37\15\3\1\40\13\3\1\41\10\3\1\0\3\3"+
    "\1\42\2\3\1\43\1\3\1\44\6\3\1\45\17\3"+
    "\1\46\4\3\1\0\15\3\1\47\1\50\2\3\1\51"+
    "\5\3\1\52\1\3\1\53\2\3\1\0\2\3\1\0"+
    "\14\3\1\54\13\3\1\55\1\3\1\0\1\3\1\56"+
    "\1\57\4\3\1\60\14\3\1\61\1\3\1\62\4\3"+
    "\1\0\7\3\1\63\14\3\1\64\5\3\1\0\2\3"+
    "\1\65\1\66\1\3\1\67\10\3\1\70\15\3\1\54"+
    "\43\3\1\71\14\3\1\72\6\3\1\73\7\3\1\74"+
    "\2\3\1\75\1\76\1\77\6\3\1\100\5\3\1\101"+
    "\7\3\1\102\13\3\1\103\1\3\1\104\1\105\4\3"+
    "\1\106\4\3\1\107\2\3\1\110\7\3\1\111\2\3"+
    "\1\112\3\3\1\113\5\3\1\114\1\115\4\3\1\116"+
    "\1\117\1\120\2\3\1\121\1\122";

  private static int [] zzUnpackAction() {
    int [] result = new int[519];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\106\0\214\0\322\0\u0118\0\u015e\0\u01a4\0\322"+
    "\0\322\0\322\0\u01ea\0\u0230\0\u0276\0\322\0\u02bc\0\322"+
    "\0\u0302\0\u0348\0\u038e\0\u03d4\0\u041a\0\u0460\0\u04a6\0\u04ec"+
    "\0\u0532\0\u0578\0\u05be\0\u0604\0\u064a\0\u0690\0\u06d6\0\u071c"+
    "\0\u0762\0\u07a8\0\u07ee\0\322\0\322\0\u0834\0\u087a\0\u08c0"+
    "\0\u0906\0\u094c\0\u0992\0\u09d8\0\322\0\106\0\322\0\322"+
    "\0\u0a1e\0\322\0\u0a64\0\u0aaa\0\u0af0\0\322\0\322\0\322"+
    "\0\u0b36\0\u0b7c\0\u0bc2\0\u0c08\0\u0c4e\0\u0c94\0\u0cda\0\u0d20"+
    "\0\u0d66\0\u0dac\0\u0df2\0\u0e38\0\u0e7e\0\u0ec4\0\u0f0a\0\u0f50"+
    "\0\u0f96\0\u04ec\0\u0fdc\0\u1022\0\u1068\0\u10ae\0\u10f4\0\u113a"+
    "\0\u1180\0\u04ec\0\u11c6\0\u120c\0\u1252\0\u1298\0\u04ec\0\u12de"+
    "\0\u1324\0\u04ec\0\u136a\0\u13b0\0\u13f6\0\u143c\0\u1482\0\u14c8"+
    "\0\u150e\0\u1554\0\u159a\0\322\0\u0aaa\0\u15e0\0\u1626\0\u166c"+
    "\0\u16b2\0\u16f8\0\u173e\0\u1784\0\u17ca\0\u1810\0\u1856\0\u189c"+
    "\0\u18e2\0\u1928\0\u196e\0\u19b4\0\u19fa\0\u1a40\0\u1a86\0\u1acc"+
    "\0\u1b12\0\u1b58\0\u1b9e\0\u1be4\0\u1c2a\0\u1c70\0\u04ec\0\u1cb6"+
    "\0\u1cfc\0\u1d42\0\u1d88\0\u1dce\0\u1e14\0\u1e5a\0\u1ea0\0\u1ee6"+
    "\0\u1f2c\0\u04ec\0\u1f72\0\u1fb8\0\u1ffe\0\u2044\0\u208a\0\u20d0"+
    "\0\u2116\0\u215c\0\u21a2\0\u21e8\0\u222e\0\u2274\0\u22ba\0\u2300"+
    "\0\u04ec\0\u2346\0\u238c\0\u23d2\0\u2418\0\u245e\0\u24a4\0\u24ea"+
    "\0\u2530\0\u2576\0\u25bc\0\u2602\0\u2648\0\u268e\0\u26d4\0\u271a"+
    "\0\u2760\0\u27a6\0\u27ec\0\u2832\0\u2878\0\u28be\0\u2904\0\u294a"+
    "\0\u2990\0\u29d6\0\u04ec\0\u2a1c\0\u2a62\0\u2aa8\0\u2aee\0\u2b34"+
    "\0\u2b7a\0\u2bc0\0\u2c06\0\u2c4c\0\u2c92\0\u2cd8\0\u2d1e\0\u04ec"+
    "\0\u2d64\0\u2daa\0\u04ec\0\u2df0\0\u04ec\0\u2e36\0\u2e7c\0\u2ec2"+
    "\0\u2f08\0\u2f4e\0\u2f94\0\u04ec\0\u2fda\0\u3020\0\u3066\0\u30ac"+
    "\0\u30f2\0\u3138\0\u317e\0\u31c4\0\u320a\0\u3250\0\u3296\0\u32dc"+
    "\0\u3322\0\u3368\0\u33ae\0\u04ec\0\u33f4\0\u343a\0\u3480\0\u34c6"+
    "\0\u350c\0\u3552\0\u3598\0\u35de\0\u3624\0\u366a\0\u36b0\0\u36f6"+
    "\0\u373c\0\u3782\0\u37c8\0\u380e\0\u3854\0\u389a\0\u04ec\0\u04ec"+
    "\0\u38e0\0\u3926\0\u396c\0\u39b2\0\u39f8\0\u3a3e\0\u3a84\0\u3aca"+
    "\0\u04ec\0\u3b10\0\u04ec\0\u3b56\0\u3b9c\0\u3be2\0\u3c28\0\u3c6e"+
    "\0\u3cb4\0\u3cfa\0\u3d40\0\u3d86\0\u3dcc\0\u3e12\0\u3e58\0\u3e9e"+
    "\0\u3ee4\0\u3f2a\0\u3f70\0\u3fb6\0\u3ffc\0\u04ec\0\u4042\0\u4088"+
    "\0\u40ce\0\u4114\0\u415a\0\u41a0\0\u41e6\0\u422c\0\u4272\0\u42b8"+
    "\0\u42fe\0\u4344\0\u438a\0\u43d0\0\u4416\0\u3c6e\0\u445c\0\u44a2"+
    "\0\u44e8\0\u452e\0\u4574\0\u04ec\0\u45ba\0\u4600\0\u4646\0\u468c"+
    "\0\u46d2\0\u4718\0\u475e\0\u47a4\0\u47ea\0\u4830\0\u4876\0\u48bc"+
    "\0\u04ec\0\u4902\0\u04ec\0\u4948\0\u498e\0\u49d4\0\u4a1a\0\u4a60"+
    "\0\u4aa6\0\u4aec\0\u4b32\0\u4b78\0\u4bbe\0\u4c04\0\u4c4a\0\u04ec"+
    "\0\u4c90\0\u4cd6\0\u4d1c\0\u4d62\0\u4da8\0\u4dee\0\u4e34\0\u4e7a"+
    "\0\u4ec0\0\u4f06\0\u4f4c\0\u4f92\0\u04ec\0\u4fd8\0\u501e\0\u5064"+
    "\0\u50aa\0\u50f0\0\u5136\0\u517c\0\u51c2\0\u04ec\0\u0118\0\u5208"+
    "\0\u4c04\0\u524e\0\u5294\0\u52da\0\u5320\0\u5366\0\u53ac\0\u53f2"+
    "\0\u5438\0\u04ec\0\u547e\0\u54c4\0\u550a\0\u5550\0\u5596\0\u55dc"+
    "\0\u5622\0\u5668\0\u56ae\0\u56f4\0\u573a\0\u5780\0\u57c6\0\u0118"+
    "\0\u580c\0\u5852\0\u5898\0\u58de\0\u5924\0\u596a\0\u59b0\0\u59f6"+
    "\0\u5a3c\0\u5a82\0\u5ac8\0\u5b0e\0\u5b54\0\u5b9a\0\u5be0\0\u5c26"+
    "\0\u5c6c\0\u5cb2\0\u5cf8\0\u5d3e\0\u5d84\0\u5dca\0\u5e10\0\u5e56"+
    "\0\u5e9c\0\u5ee2\0\u5f28\0\u5f6e\0\u5fb4\0\u5ffa\0\u6040\0\u6086"+
    "\0\u60cc\0\u6112\0\u6158\0\u0118\0\u619e\0\u61e4\0\u622a\0\u6270"+
    "\0\u62b6\0\u62fc\0\u6342\0\u6388\0\u63ce\0\u6414\0\u645a\0\u64a0"+
    "\0\u0118\0\u64e6\0\u652c\0\u6572\0\u65b8\0\u65fe\0\u6644\0\u0118"+
    "\0\u668a\0\u66d0\0\u6716\0\u675c\0\u67a2\0\u67e8\0\u682e\0\u0118"+
    "\0\u6874\0\u68ba\0\u0118\0\u6900\0\u6946\0\u698c\0\u69d2\0\u6a18"+
    "\0\u6a5e\0\u6aa4\0\u6aea\0\u0118\0\u6b30\0\u6b76\0\u6bbc\0\u6c02"+
    "\0\u6c48\0\u0118\0\u6c8e\0\u6cd4\0\u6d1a\0\u6d60\0\u6da6\0\u6dec"+
    "\0\u6e32\0\u0118\0\u6e78\0\u6ebe\0\u6f04\0\u6f4a\0\u6f90\0\u6fd6"+
    "\0\u701c\0\u7062\0\u70a8\0\u70ee\0\u7134\0\u0118\0\u717a\0\u0118"+
    "\0\u0118\0\u71c0\0\u7206\0\u724c\0\u7292\0\u0118\0\u72d8\0\u731e"+
    "\0\u7364\0\u73aa\0\u0118\0\u73f0\0\u7436\0\u0118\0\u747c\0\u74c2"+
    "\0\u7508\0\u754e\0\u7594\0\u75da\0\u7620\0\u0118\0\u7666\0\u76ac"+
    "\0\u0118\0\u76f2\0\u7738\0\u777e\0\u0118\0\u77c4\0\u780a\0\u7850"+
    "\0\u7896\0\u78dc\0\u0118\0\u0118\0\u7922\0\u7968\0\u79ae\0\u79f4"+
    "\0\u0118\0\u0118\0\u0118\0\u7a3a\0\u7a80\0\u0118\0\u0118";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[519];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\2\2\1\0\1\2\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\0\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\2\30\1\31\2\30\1\32\1\33\1\34"+
    "\1\35\1\36\1\30\1\37\1\40\1\41\1\42\1\30"+
    "\1\43\1\30\1\44\1\45\1\46\1\30\1\47\1\30"+
    "\1\50\1\30\1\51\1\52\1\53\12\30\1\54\1\55"+
    "\1\56\1\57\1\0\2\2\1\0\1\2\77\0\1\2"+
    "\25\0\1\60\176\0\1\5\5\0\1\5\2\0\1\5"+
    "\4\0\30\5\2\0\24\5\13\0\1\6\4\0\1\6"+
    "\2\0\1\6\4\0\30\6\2\0\24\6\23\0\1\61"+
    "\4\0\30\61\3\0\23\61\12\0\1\5\1\6\4\0"+
    "\1\46\2\0\1\46\3\0\1\62\30\46\2\0\24\46"+
    "\22\0\1\63\75\0\1\5\5\0\1\5\1\64\1\0"+
    "\1\65\4\0\30\5\2\0\24\5\10\0\1\66\15\0"+
    "\1\67\105\0\1\70\71\0\1\5\5\0\1\5\1\71"+
    "\1\0\1\5\4\0\6\30\1\72\4\30\1\73\1\30"+
    "\1\74\3\30\1\75\6\30\2\0\1\5\23\30\12\0"+
    "\1\5\5\0\1\5\1\71\1\0\1\5\4\0\13\30"+
    "\1\76\2\30\1\77\11\30\2\0\1\5\23\30\12\0"+
    "\1\5\5\0\1\5\1\71\1\0\1\5\4\0\1\100"+
    "\6\30\1\101\3\30\1\102\2\30\1\103\2\30\1\104"+
    "\6\30\2\0\1\5\23\30\12\0\1\5\5\0\1\5"+
    "\1\71\1\0\1\5\4\0\1\105\27\30\2\0\1\5"+
    "\23\30\12\0\1\5\5\0\1\5\1\71\1\0\1\5"+
    "\4\0\13\30\1\106\14\30\2\0\1\5\23\30\12\0"+
    "\1\5\5\0\1\5\1\71\1\0\1\5\4\0\4\30"+
    "\1\107\3\30\1\110\5\30\1\111\11\30\2\0\1\5"+
    "\23\30\12\0\1\5\5\0\1\5\1\71\1\0\1\5"+
    "\4\0\30\30\2\0\1\5\23\30\12\0\1\5\5\0"+
    "\1\5\1\71\1\0\1\5\4\0\3\30\1\112\10\30"+
    "\1\113\1\114\12\30\2\0\1\5\23\30\12\0\1\5"+
    "\5\0\1\5\1\71\1\0\1\5\4\0\16\30\1\115"+
    "\11\30\2\0\1\5\23\30\12\0\1\5\5\0\1\5"+
    "\1\71\1\0\1\5\4\0\16\30\1\116\11\30\2\0"+
    "\1\5\23\30\12\0\1\5\5\0\1\5\1\71\1\0"+
    "\1\5\4\0\16\30\1\117\5\30\1\120\3\30\2\0"+
    "\1\5\23\30\12\0\1\5\5\0\1\5\1\71\1\0"+
    "\1\5\4\0\17\30\1\121\1\30\1\122\6\30\2\0"+
    "\1\5\23\30\12\0\1\5\5\0\1\5\1\71\1\0"+
    "\1\5\4\0\1\123\27\30\2\0\1\5\23\30\12\0"+
    "\1\5\5\0\1\5\1\71\1\0\1\5\4\0\1\124"+
    "\3\30\1\125\23\30\2\0\1\5\23\30\12\0\1\5"+
    "\5\0\1\5\1\71\1\0\1\5\4\0\4\30\1\126"+
    "\3\30\1\127\17\30\2\0\1\5\23\30\12\0\1\5"+
    "\5\0\1\5\1\71\1\0\1\5\4\0\4\30\1\130"+
    "\3\30\1\131\5\30\1\132\11\30\2\0\1\5\23\30"+
    "\12\0\1\5\5\0\1\5\1\71\1\0\1\5\4\0"+
    "\21\30\1\133\1\134\5\30\2\0\1\5\23\30\12\0"+
    "\1\5\5\0\1\5\1\71\1\0\1\5\4\0\7\30"+
    "\1\135\20\30\2\0\1\5\23\30\12\0\1\5\1\6"+
    "\4\0\1\46\2\0\1\46\4\0\30\46\2\0\24\46"+
    "\12\0\1\5\5\0\1\5\1\71\1\0\1\5\4\0"+
    "\30\30\2\0\1\5\11\30\1\136\11\30\12\0\1\5"+
    "\5\0\1\5\1\71\1\0\1\5\4\0\30\30\2\0"+
    "\1\5\1\137\22\30\12\0\1\5\5\0\1\5\1\71"+
    "\1\0\1\5\4\0\30\30\2\0\1\5\7\30\1\140"+
    "\13\30\12\0\1\5\5\0\1\5\1\71\1\0\1\5"+
    "\4\0\30\30\2\0\1\5\20\30\1\141\2\30\12\0"+
    "\1\5\5\0\1\5\1\71\1\0\1\5\4\0\30\30"+
    "\2\0\1\5\13\30\1\142\7\30\12\0\1\5\5\0"+
    "\1\5\1\71\1\0\1\5\4\0\30\30\2\0\1\5"+
    "\6\30\1\143\14\30\7\0\1\61\2\0\1\61\1\0"+
    "\1\144\3\0\1\61\2\0\1\61\4\0\30\61\2\0"+
    "\24\61\3\0\2\63\2\0\102\63\20\0\1\145\74\0"+
    "\1\5\5\0\1\5\1\64\1\0\1\146\4\0\30\5"+
    "\2\0\24\5\30\0\30\147\3\0\23\147\12\0\1\5"+
    "\5\0\1\5\1\71\1\0\1\5\4\0\21\30\1\150"+
    "\6\30\2\0\1\5\23\30\12\0\1\5\5\0\1\5"+
    "\1\71\1\0\1\5\4\0\10\30\1\151\17\30\2\0"+
    "\1\5\23\30\12\0\1\5\5\0\1\5\1\71\1\0"+
    "\1\5\4\0\3\30\1\122\24\30\2\0\1\5\23\30"+
    "\12\0\1\5\5\0\1\5\1\71\1\0\1\5\4\0"+
    "\4\30\1\152\23\30\2\0\1\5\23\30\12\0\1\5"+
    "\5\0\1\5\1\71\1\0\1\5\4\0\24\30\1\153"+
    "\3\30\2\0\1\5\23\30\12\0\1\5\5\0\1\5"+
    "\1\71\1\0\1\5\4\0\23\30\1\154\4\30\2\0"+
    "\1\5\23\30\12\0\1\5\5\0\1\5\1\71\1\0"+
    "\1\5\4\0\14\30\1\155\13\30\2\0\1\5\23\30"+
    "\12\0\1\5\5\0\1\5\1\71\1\0\1\5\4\0"+
    "\4\30\1\156\23\30\2\0\1\5\23\30\12\0\1\5"+
    "\5\0\1\5\1\71\1\0\1\5\4\0\1\157\27\30"+
    "\2\0\1\5\23\30\12\0\1\5\5\0\1\5\1\71"+
    "\1\0\1\5\4\0\13\30\1\160\1\161\1\162\12\30"+
    "\2\0\1\5\23\30\12\0\1\5\5\0\1\5\1\71"+
    "\1\0\1\5\4\0\4\30\1\163\23\30\2\0\1\5"+
    "\23\30\12\0\1\5\5\0\1\5\1\71\1\0\1\5"+
    "\4\0\21\30\1\164\6\30\2\0\1\5\23\30\12\0"+
    "\1\5\5\0\1\5\1\71\1\0\1\5\4\0\10\30"+
    "\1\165\17\30\2\0\1\5\23\30\12\0\1\5\5\0"+
    "\1\5\1\71\1\0\1\5\4\0\2\30\1\166\25\30"+
    "\2\0\1\5\23\30\12\0\1\5\5\0\1\5\1\71"+
    "\1\0\1\5\4\0\2\30\1\167\10\30\1\170\14\30"+
    "\2\0\1\5\23\30\12\0\1\5\5\0\1\5\1\71"+
    "\1\0\1\5\4\0\21\30\1\171\6\30\2\0\1\5"+
    "\23\30\12\0\1\5\5\0\1\5\1\71\1\0\1\5"+
    "\4\0\1\172\27\30\2\0\1\5\23\30\12\0\1\5"+
    "\5\0\1\5\1\71\1\0\1\5\4\0\3\30\1\173"+
    "\24\30\2\0\1\5\23\30\12\0\1\5\5\0\1\5"+
    "\1\71\1\0\1\5\4\0\6\30\1\174\21\30\2\0"+
    "\1\5\23\30\12\0\1\5\5\0\1\5\1\71\1\0"+
    "\1\5\4\0\3\30\1\175\24\30\2\0\1\5\23\30"+
    "\12\0\1\5\5\0\1\5\1\71\1\0\1\5\4\0"+
    "\14\30\1\176\6\30\1\177\4\30\2\0\1\5\23\30"+
    "\12\0\1\5\5\0\1\5\1\71\1\0\1\5\4\0"+
    "\4\30\1\200\23\30\2\0\1\5\23\30\12\0\1\5"+
    "\5\0\1\5\1\71\1\0\1\5\4\0\2\30\1\201"+
    "\25\30\2\0\1\5\23\30\12\0\1\5\5\0\1\5"+
    "\1\71\1\0\1\5\4\0\21\30\1\202\1\203\5\30"+
    "\2\0\1\5\23\30\12\0\1\5\5\0\1\5\1\71"+
    "\1\0\1\5\4\0\3\30\1\204\24\30\2\0\1\5"+
    "\23\30\12\0\1\5\5\0\1\5\1\71\1\0\1\5"+
    "\4\0\20\30\1\205\7\30\2\0\1\5\23\30\12\0"+
    "\1\5\5\0\1\5\1\71\1\0\1\5\4\0\13\30"+
    "\1\206\14\30\2\0\1\5\23\30\12\0\1\5\5\0"+
    "\1\5\1\71\1\0\1\5\4\0\14\30\1\207\12\30"+
    "\1\210\2\0\1\5\23\30\12\0\1\5\5\0\1\5"+
    "\1\71\1\0\1\5\4\0\23\30\1\211\4\30\2\0"+
    "\1\5\23\30\12\0\1\5\5\0\1\5\1\71\1\0"+
    "\1\5\4\0\13\30\1\212\14\30\2\0\1\5\23\30"+
    "\12\0\1\5\5\0\1\5\1\71\1\0\1\5\4\0"+
    "\24\30\1\213\3\30\2\0\1\5\23\30\12\0\1\5"+
    "\5\0\1\5\1\71\1\0\1\5\4\0\4\30\1\214"+
    "\3\30\1\215\17\30\2\0\1\5\23\30\12\0\1\5"+
    "\5\0\1\5\1\71\1\0\1\5\4\0\30\30\2\0"+
    "\1\5\21\30\1\216\1\30\12\0\1\5\5\0\1\5"+
    "\1\71\1\0\1\5\4\0\30\30\2\0\1\5\16\30"+
    "\1\217\4\30\12\0\1\5\5\0\1\5\1\71\1\0"+
    "\1\5\4\0\30\30\2\0\1\5\13\30\1\220\7\30"+
    "\12\0\1\5\5\0\1\5\1\71\1\0\1\5\4\0"+
    "\30\30\2\0\1\5\20\30\1\221\2\30\12\0\1\5"+
    "\5\0\1\5\1\71\1\0\1\5\4\0\30\30\2\0"+
    "\1\5\7\30\1\222\13\30\12\0\1\5\5\0\1\5"+
    "\1\71\1\0\1\5\4\0\30\30\2\0\1\5\7\30"+
    "\1\223\13\30\12\0\1\5\5\0\1\5\1\64\1\0"+
    "\1\224\4\0\30\5\2\0\24\5\21\0\1\225\6\0"+
    "\30\147\3\0\23\147\12\0\1\5\5\0\1\5\1\71"+
    "\1\0\1\5\4\0\4\30\1\226\23\30\2\0\1\5"+
    "\23\30\12\0\1\5\5\0\1\5\1\71\1\0\1\5"+
    "\4\0\15\30\1\227\12\30\2\0\1\5\23\30\12\0"+
    "\1\5\5\0\1\5\1\71\1\0\1\5\4\0\1\230"+
    "\27\30\2\0\1\5\23\30\12\0\1\5\5\0\1\5"+
    "\1\71\1\0\1\5\4\0\4\30\1\231\23\30\2\0"+
    "\1\5\23\30\12\0\1\5\5\0\1\5\1\71\1\0"+
    "\1\5\4\0\16\30\1\232\11\30\2\0\1\5\23\30"+
    "\12\0\1\5\5\0\1\5\1\71\1\0\1\5\4\0"+
    "\17\30\1\233\10\30\2\0\1\5\23\30\12\0\1\5"+
    "\5\0\1\5\1\71\1\0\1\5\4\0\2\30\1\234"+
    "\25\30\2\0\1\5\23\30\12\0\1\5\5\0\1\5"+
    "\1\71\1\0\1\5\4\0\22\30\1\235\5\30\2\0"+
    "\1\5\23\30\12\0\1\5\5\0\1\5\1\71\1\0"+
    "\1\5\4\0\24\30\1\236\3\30\2\0\1\5\23\30"+
    "\12\0\1\5\5\0\1\5\1\71\1\0\1\5\4\0"+
    "\1\30\1\237\26\30\2\0\1\5\23\30\12\0\1\5"+
    "\5\0\1\5\1\71\1\0\1\5\4\0\22\30\1\240"+
    "\5\30\2\0\1\5\23\30\12\0\1\5\5\0\1\5"+
    "\1\71\1\0\1\5\4\0\1\241\2\30\1\242\24\30"+
    "\2\0\1\5\23\30\12\0\1\5\5\0\1\5\1\71"+
    "\1\0\1\5\4\0\12\30\1\231\15\30\2\0\1\5"+
    "\23\30\12\0\1\5\5\0\1\5\1\71\1\0\1\5"+
    "\4\0\14\30\1\243\13\30\2\0\1\5\23\30\12\0"+
    "\1\5\5\0\1\5\1\71\1\0\1\5\4\0\7\30"+
    "\1\244\20\30\2\0\1\5\23\30\12\0\1\5\5\0"+
    "\1\5\1\71\1\0\1\5\4\0\7\30\1\245\20\30"+
    "\2\0\1\5\23\30\12\0\1\5\5\0\1\5\1\71"+
    "\1\0\1\5\4\0\1\246\27\30\2\0\1\5\23\30"+
    "\12\0\1\5\5\0\1\5\1\71\1\0\1\5\4\0"+
    "\14\30\1\247\13\30\2\0\1\5\23\30\12\0\1\5"+
    "\5\0\1\5\1\71\1\0\1\5\4\0\6\30\1\250"+
    "\21\30\2\0\1\5\23\30\12\0\1\5\5\0\1\5"+
    "\1\71\1\0\1\5\4\0\10\30\1\251\17\30\2\0"+
    "\1\5\23\30\12\0\1\5\5\0\1\5\1\71\1\0"+
    "\1\5\4\0\10\30\1\252\17\30\2\0\1\5\23\30"+
    "\12\0\1\5\5\0\1\5\1\71\1\0\1\5\4\0"+
    "\10\30\1\253\17\30\2\0\1\5\23\30\12\0\1\5"+
    "\5\0\1\5\1\71\1\0\1\5\4\0\1\30\1\254"+
    "\26\30\2\0\1\5\23\30\12\0\1\5\5\0\1\5"+
    "\1\71\1\0\1\5\4\0\25\30\1\255\2\30\2\0"+
    "\1\5\23\30\12\0\1\5\5\0\1\5\1\71\1\0"+
    "\1\5\4\0\10\30\1\256\17\30\2\0\1\5\23\30"+
    "\12\0\1\5\5\0\1\5\1\71\1\0\1\5\4\0"+
    "\1\257\27\30\2\0\1\5\23\30\12\0\1\5\5\0"+
    "\1\5\1\71\1\0\1\5\4\0\22\30\1\260\5\30"+
    "\2\0\1\5\23\30\12\0\1\5\5\0\1\5\1\71"+
    "\1\0\1\5\4\0\10\30\1\237\17\30\2\0\1\5"+
    "\23\30\12\0\1\5\5\0\1\5\1\71\1\0\1\5"+
    "\4\0\24\30\1\261\3\30\2\0\1\5\23\30\12\0"+
    "\1\5\5\0\1\5\1\71\1\0\1\5\4\0\4\30"+
    "\1\262\23\30\2\0\1\5\23\30\12\0\1\5\5\0"+
    "\1\5\1\71\1\0\1\5\4\0\1\263\27\30\2\0"+
    "\1\5\23\30\12\0\1\5\5\0\1\5\1\71\1\0"+
    "\1\5\4\0\23\30\1\264\4\30\2\0\1\5\23\30"+
    "\12\0\1\5\5\0\1\5\1\71\1\0\1\5\4\0"+
    "\24\30\1\265\3\30\2\0\1\5\23\30\12\0\1\5"+
    "\5\0\1\5\1\71\1\0\1\5\4\0\1\266\27\30"+
    "\2\0\1\5\23\30\12\0\1\5\5\0\1\5\1\71"+
    "\1\0\1\5\4\0\21\30\1\267\6\30\2\0\1\5"+
    "\23\30\12\0\1\5\5\0\1\5\1\71\1\0\1\5"+
    "\4\0\23\30\1\153\4\30\2\0\1\5\23\30\12\0"+
    "\1\5\5\0\1\5\1\71\1\0\1\5\4\0\30\30"+
    "\2\0\1\5\4\30\1\231\16\30\12\0\1\5\5\0"+
    "\1\5\1\71\1\0\1\5\4\0\30\30\2\0\1\5"+
    "\10\30\1\231\12\30\12\0\1\5\5\0\1\5\1\71"+
    "\1\0\1\5\4\0\30\30\2\0\1\270\23\30\12\0"+
    "\1\5\5\0\1\5\1\71\1\0\1\5\4\0\30\30"+
    "\2\0\1\5\15\30\1\271\5\30\12\0\1\5\5\0"+
    "\1\5\1\71\1\0\1\5\4\0\30\30\2\0\1\272"+
    "\23\30\12\0\1\5\5\0\1\5\1\71\1\0\1\5"+
    "\4\0\30\30\2\0\1\5\20\30\1\216\2\30\12\0"+
    "\1\5\5\0\1\273\1\64\1\0\1\224\4\0\30\5"+
    "\2\0\24\5\65\0\1\274\32\0\1\5\5\0\1\5"+
    "\1\71\1\0\1\5\4\0\6\30\1\275\21\30\2\0"+
    "\1\5\23\30\12\0\1\5\5\0\1\5\1\71\1\0"+
    "\1\5\4\0\4\30\1\276\23\30\2\0\1\5\23\30"+
    "\12\0\1\5\5\0\1\5\1\71\1\0\1\5\4\0"+
    "\30\30\2\0\1\277\23\30\12\0\1\5\5\0\1\5"+
    "\1\71\1\0\1\5\4\0\15\30\1\300\12\30\2\0"+
    "\1\5\23\30\12\0\1\5\5\0\1\5\1\71\1\0"+
    "\1\5\4\0\16\30\1\301\11\30\2\0\1\5\23\30"+
    "\12\0\1\5\5\0\1\5\1\71\1\0\1\5\4\0"+
    "\12\30\1\302\15\30\2\0\1\5\23\30\12\0\1\5"+
    "\5\0\1\5\1\71\1\0\1\5\4\0\4\30\1\303"+
    "\23\30\2\0\1\5\23\30\12\0\1\5\5\0\1\5"+
    "\1\71\1\0\1\5\4\0\14\30\1\304\13\30\2\0"+
    "\1\5\23\30\12\0\1\5\5\0\1\5\1\71\1\0"+
    "\1\5\4\0\16\30\1\305\11\30\2\0\1\5\23\30"+
    "\12\0\1\5\5\0\1\5\1\71\1\0\1\5\4\0"+
    "\24\30\1\306\3\30\2\0\1\5\23\30\12\0\1\5"+
    "\5\0\1\5\1\71\1\0\1\5\4\0\21\30\1\307"+
    "\6\30\2\0\1\5\23\30\12\0\1\5\5\0\1\5"+
    "\1\71\1\0\1\5\4\0\4\30\1\310\23\30\2\0"+
    "\1\5\23\30\12\0\1\5\5\0\1\5\1\71\1\0"+
    "\1\5\4\0\10\30\1\311\17\30\2\0\1\5\23\30"+
    "\12\0\1\5\5\0\1\5\1\71\1\0\1\5\4\0"+
    "\1\312\27\30\2\0\1\5\23\30\12\0\1\5\5\0"+
    "\1\5\1\71\1\0\1\5\4\0\4\30\1\313\23\30"+
    "\2\0\1\5\23\30\12\0\1\5\5\0\1\5\1\71"+
    "\1\0\1\5\4\0\22\30\1\314\5\30\2\0\1\5"+
    "\23\30\12\0\1\5\5\0\1\5\1\71\1\0\1\5"+
    "\4\0\24\30\1\315\3\30\2\0\1\5\23\30\12\0"+
    "\1\5\5\0\1\5\1\71\1\0\1\5\4\0\4\30"+
    "\1\316\23\30\2\0\1\5\23\30\12\0\1\5\5\0"+
    "\1\5\1\71\1\0\1\5\4\0\2\30\1\317\25\30"+
    "\2\0\1\5\23\30\12\0\1\5\5\0\1\5\1\71"+
    "\1\0\1\5\4\0\15\30\1\320\12\30\2\0\1\5"+
    "\23\30\12\0\1\5\5\0\1\5\1\71\1\0\1\5"+
    "\4\0\5\30\1\321\22\30\2\0\1\5\23\30\12\0"+
    "\1\5\5\0\1\5\1\71\1\0\1\5\4\0\21\30"+
    "\1\322\6\30\2\0\1\5\23\30\12\0\1\5\5\0"+
    "\1\5\1\71\1\0\1\5\4\0\16\30\1\323\11\30"+
    "\2\0\1\5\23\30\12\0\1\5\5\0\1\5\1\71"+
    "\1\0\1\5\4\0\16\30\1\324\11\30\2\0\1\5"+
    "\23\30\12\0\1\5\5\0\1\5\1\71\1\0\1\5"+
    "\4\0\14\30\1\325\13\30\2\0\1\5\23\30\12\0"+
    "\1\5\5\0\1\5\1\71\1\0\1\5\4\0\26\30"+
    "\1\326\1\30\2\0\1\5\23\30\12\0\1\5\5\0"+
    "\1\5\1\71\1\0\1\5\4\0\4\30\1\327\23\30"+
    "\2\0\1\5\23\30\12\0\1\5\5\0\1\5\1\71"+
    "\1\0\1\5\4\0\2\30\1\330\25\30\2\0\1\5"+
    "\23\30\12\0\1\5\5\0\1\5\1\71\1\0\1\5"+
    "\4\0\16\30\1\331\11\30\2\0\1\5\23\30\12\0"+
    "\1\5\5\0\1\5\1\71\1\0\1\5\4\0\13\30"+
    "\1\332\14\30\2\0\1\5\23\30\12\0\1\5\5\0"+
    "\1\5\1\71\1\0\1\5\4\0\21\30\1\333\6\30"+
    "\2\0\1\5\23\30\12\0\1\5\5\0\1\5\1\71"+
    "\1\0\1\5\4\0\4\30\1\334\23\30\2\0\1\5"+
    "\23\30\12\0\1\5\5\0\1\5\2\0\1\5\4\0"+
    "\30\5\2\0\20\5\1\335\3\5\12\0\1\5\5\0"+
    "\1\5\1\71\1\0\1\5\4\0\30\30\2\0\1\5"+
    "\17\30\1\336\3\30\12\0\1\5\5\0\1\5\2\0"+
    "\1\5\4\0\30\5\2\0\20\5\1\337\3\5\12\0"+
    "\1\5\5\0\1\5\2\0\1\340\4\0\30\5\2\0"+
    "\24\5\77\0\1\341\20\0\1\5\5\0\1\5\1\71"+
    "\1\0\1\5\4\0\1\342\27\30\2\0\1\5\23\30"+
    "\12\0\1\5\5\0\1\5\1\71\1\0\1\5\4\0"+
    "\1\343\27\30\2\0\1\5\23\30\12\0\1\5\5\0"+
    "\1\5\2\0\1\5\4\0\23\5\1\344\4\5\2\0"+
    "\24\5\12\0\1\5\5\0\1\5\1\71\1\0\1\5"+
    "\4\0\30\30\2\0\1\345\23\30\12\0\1\5\5\0"+
    "\1\5\1\71\1\0\1\5\4\0\1\30\1\346\26\30"+
    "\2\0\1\5\23\30\12\0\1\5\5\0\1\5\1\71"+
    "\1\0\1\5\4\0\15\30\1\347\12\30\2\0\1\5"+
    "\23\30\12\0\1\5\5\0\1\5\1\71\1\0\1\5"+
    "\4\0\13\30\1\350\14\30\2\0\1\5\23\30\12\0"+
    "\1\5\5\0\1\5\1\71\1\0\1\5\4\0\30\30"+
    "\2\0\1\351\23\30\12\0\1\5\5\0\1\5\1\71"+
    "\1\0\1\5\4\0\15\30\1\352\12\30\2\0\1\5"+
    "\23\30\12\0\1\5\5\0\1\5\1\71\1\0\1\5"+
    "\4\0\15\30\1\353\12\30\2\0\1\5\23\30\12\0"+
    "\1\5\5\0\1\5\1\71\1\0\1\5\4\0\30\30"+
    "\2\0\1\354\23\30\12\0\1\5\5\0\1\5\1\71"+
    "\1\0\1\5\4\0\21\30\1\355\6\30\2\0\1\5"+
    "\23\30\12\0\1\5\5\0\1\5\1\71\1\0\1\5"+
    "\4\0\13\30\1\356\14\30\2\0\1\5\23\30\12\0"+
    "\1\5\5\0\1\5\1\71\1\0\1\5\4\0\15\30"+
    "\1\357\12\30\2\0\1\5\23\30\12\0\1\5\5\0"+
    "\1\5\1\71\1\0\1\5\4\0\4\30\1\360\23\30"+
    "\2\0\1\5\23\30\12\0\1\5\5\0\1\5\1\71"+
    "\1\0\1\5\4\0\30\30\2\0\1\361\23\30\12\0"+
    "\1\5\5\0\1\5\1\71\1\0\1\5\4\0\10\30"+
    "\1\362\17\30\2\0\1\5\23\30\12\0\1\5\5\0"+
    "\1\5\1\71\1\0\1\5\4\0\4\30\1\363\23\30"+
    "\2\0\1\5\23\30\12\0\1\5\5\0\1\5\1\71"+
    "\1\0\1\5\4\0\30\30\2\0\1\364\23\30\12\0"+
    "\1\5\5\0\1\5\1\71\1\0\1\5\4\0\15\30"+
    "\1\365\12\30\2\0\1\5\23\30\12\0\1\5\5\0"+
    "\1\5\1\71\1\0\1\5\4\0\4\30\1\366\23\30"+
    "\2\0\1\5\23\30\12\0\1\5\5\0\1\5\1\71"+
    "\1\0\1\5\4\0\16\30\1\367\11\30\2\0\1\5"+
    "\23\30\12\0\1\5\5\0\1\5\1\71\1\0\1\5"+
    "\4\0\21\30\1\370\6\30\2\0\1\5\23\30\12\0"+
    "\1\5\5\0\1\5\1\71\1\0\1\5\4\0\23\30"+
    "\1\371\4\30\2\0\1\5\23\30\12\0\1\5\5\0"+
    "\1\5\1\71\1\0\1\5\4\0\30\30\2\0\1\372"+
    "\23\30\12\0\1\5\5\0\1\5\1\71\1\0\1\5"+
    "\4\0\16\30\1\373\11\30\2\0\1\5\23\30\12\0"+
    "\1\5\5\0\1\5\1\71\1\0\1\5\4\0\10\30"+
    "\1\374\17\30\2\0\1\5\23\30\12\0\1\5\5\0"+
    "\1\5\2\0\1\5\4\0\30\5\2\0\15\5\1\375"+
    "\6\5\12\0\1\5\5\0\1\5\1\71\1\0\1\5"+
    "\1\376\3\0\30\30\2\0\1\5\23\30\12\0\1\5"+
    "\5\0\1\5\2\0\1\5\4\0\30\5\2\0\15\5"+
    "\1\377\6\5\12\0\1\5\5\0\1\u0100\2\0\1\340"+
    "\4\0\30\5\2\0\24\5\75\0\1\u0101\22\0\1\5"+
    "\5\0\1\5\1\71\1\0\1\5\4\0\21\30\1\u0102"+
    "\6\30\2\0\1\5\23\30\12\0\1\5\5\0\1\5"+
    "\1\71\1\0\1\5\4\0\2\30\1\u0103\25\30\2\0"+
    "\1\5\23\30\12\0\1\5\5\0\1\5\2\0\1\5"+
    "\4\0\4\5\1\u0104\23\5\2\0\24\5\12\0\1\5"+
    "\5\0\1\5\2\0\1\5\4\0\23\5\1\u0105\4\5"+
    "\2\0\24\5\12\0\1\5\5\0\1\5\1\71\1\0"+
    "\1\5\4\0\16\30\1\u0106\11\30\2\0\1\5\23\30"+
    "\12\0\1\5\5\0\1\5\1\71\1\0\1\5\4\0"+
    "\1\u0107\27\30\2\0\1\5\23\30\12\0\1\5\5\0"+
    "\1\5\1\71\1\0\1\5\4\0\23\30\1\u0108\4\30"+
    "\2\0\1\5\23\30\12\0\1\5\5\0\1\5\2\0"+
    "\1\5\4\0\24\5\1\u0109\3\5\2\0\24\5\12\0"+
    "\1\5\5\0\1\5\1\71\1\0\1\5\4\0\2\30"+
    "\1\u010a\25\30\2\0\1\5\23\30\12\0\1\5\5\0"+
    "\1\5\1\71\1\0\1\5\4\0\1\u010b\27\30\2\0"+
    "\1\5\23\30\12\0\1\5\5\0\1\5\2\0\1\5"+
    "\4\0\2\5\1\u010c\11\5\1\u010d\13\5\2\0\24\5"+
    "\12\0\1\5\5\0\1\5\1\71\1\0\1\5\4\0"+
    "\16\30\1\u010e\11\30\2\0\1\5\23\30\12\0\1\5"+
    "\5\0\1\5\1\71\1\0\1\5\4\0\1\u010f\27\30"+
    "\2\0\1\5\23\30\12\0\1\5\5\0\1\5\2\0"+
    "\1\5\4\0\24\5\1\u0110\3\5\2\0\24\5\12\0"+
    "\1\5\5\0\1\5\1\71\1\0\1\5\4\0\2\30"+
    "\1\u0111\25\30\2\0\1\5\23\30\12\0\1\5\5\0"+
    "\1\5\1\71\1\0\1\5\4\0\30\30\2\0\1\u0112"+
    "\23\30\12\0\1\5\5\0\1\5\2\0\1\5\4\0"+
    "\5\5\1\u0113\11\5\1\u0114\10\5\2\0\24\5\12\0"+
    "\1\5\5\0\1\5\1\71\1\0\1\5\4\0\4\30"+
    "\1\u0115\23\30\2\0\1\5\23\30\12\0\1\5\5\0"+
    "\1\5\1\71\1\0\1\5\4\0\23\30\1\u0116\4\30"+
    "\2\0\1\5\23\30\12\0\1\5\5\0\1\5\1\71"+
    "\1\0\1\5\4\0\21\30\1\u0117\6\30\2\0\1\5"+
    "\23\30\12\0\1\5\5\0\1\5\1\71\1\0\1\5"+
    "\4\0\10\30\1\u0118\17\30\2\0\1\5\23\30\12\0"+
    "\1\5\5\0\1\5\2\0\1\5\4\0\25\5\1\u0119"+
    "\2\5\2\0\24\5\12\0\1\5\5\0\1\5\1\71"+
    "\1\0\1\5\4\0\16\30\1\u011a\11\30\2\0\1\5"+
    "\23\30\12\0\1\5\5\0\1\5\2\0\1\5\4\0"+
    "\30\5\2\0\12\5\1\u011b\11\5\22\0\1\u011c\75\0"+
    "\1\5\5\0\1\5\2\0\1\5\4\0\30\5\2\0"+
    "\12\5\1\u011d\11\5\12\0\1\5\5\0\1\5\2\0"+
    "\1\u011e\4\0\30\5\2\0\24\5\22\0\1\u011f\75\0"+
    "\1\5\5\0\1\5\1\71\1\0\1\5\4\0\30\30"+
    "\2\0\1\u0120\23\30\12\0\1\5\5\0\1\5\1\71"+
    "\1\0\1\5\4\0\10\30\1\u0121\17\30\2\0\1\5"+
    "\23\30\12\0\1\5\5\0\1\5\2\0\1\5\4\0"+
    "\27\5\1\u0122\2\0\24\5\12\0\1\5\5\0\1\5"+
    "\2\0\1\5\4\0\4\5\1\u0123\23\5\2\0\24\5"+
    "\12\0\1\5\5\0\1\5\1\71\1\0\1\5\4\0"+
    "\27\30\1\305\2\0\1\5\23\30\12\0\1\5\5\0"+
    "\1\5\1\71\1\0\1\5\4\0\22\30\1\u0124\5\30"+
    "\2\0\1\5\23\30\12\0\1\5\5\0\1\5\1\71"+
    "\1\0\1\5\4\0\1\u0125\27\30\2\0\1\5\23\30"+
    "\12\0\1\5\5\0\1\5\2\0\1\5\4\0\22\5"+
    "\1\u0126\5\5\2\0\24\5\12\0\1\5\5\0\1\5"+
    "\1\71\1\0\1\5\4\0\10\30\1\u0127\17\30\2\0"+
    "\1\5\23\30\12\0\1\5\5\0\1\5\1\71\1\0"+
    "\1\5\4\0\21\30\1\u0128\6\30\2\0\1\5\23\30"+
    "\12\0\1\5\5\0\1\5\2\0\1\5\4\0\21\5"+
    "\1\u0129\6\5\2\0\24\5\12\0\1\5\5\0\1\5"+
    "\2\0\1\5\4\0\16\5\1\u012a\11\5\2\0\24\5"+
    "\12\0\1\5\5\0\1\5\1\71\1\0\1\5\4\0"+
    "\21\30\1\u012b\6\30\2\0\1\5\23\30\12\0\1\5"+
    "\5\0\1\5\2\0\1\5\4\0\22\5\1\u012c\5\5"+
    "\2\0\24\5\12\0\1\5\5\0\1\5\1\71\1\0"+
    "\1\5\4\0\1\u012d\27\30\2\0\1\5\23\30\12\0"+
    "\1\5\5\0\1\5\2\0\1\5\4\0\2\5\1\u012e"+
    "\25\5\2\0\24\5\12\0\1\5\5\0\1\5\2\0"+
    "\1\5\4\0\16\5\1\u012f\11\5\2\0\24\5\12\0"+
    "\1\5\5\0\1\5\2\0\1\5\4\0\1\u0130\27\5"+
    "\2\0\24\5\12\0\1\5\5\0\1\5\1\71\1\0"+
    "\1\5\4\0\22\30\1\u0131\5\30\2\0\1\5\23\30"+
    "\12\0\1\5\5\0\1\5\1\71\1\0\1\5\4\0"+
    "\21\30\1\u0132\6\30\2\0\1\5\23\30\12\0\1\5"+
    "\5\0\1\5\1\71\1\0\1\5\4\0\3\30\1\u0133"+
    "\24\30\2\0\1\5\23\30\12\0\1\5\5\0\1\5"+
    "\1\71\1\0\1\5\4\0\3\30\1\u0134\24\30\2\0"+
    "\1\5\23\30\12\0\1\5\5\0\1\5\2\0\1\5"+
    "\4\0\10\5\1\u0135\17\5\2\0\24\5\12\0\1\5"+
    "\5\0\1\5\1\71\1\0\1\5\4\0\30\30\2\0"+
    "\1\u0136\23\30\12\0\1\5\5\0\1\5\2\0\1\5"+
    "\4\0\30\5\2\0\10\5\1\u0137\13\5\22\0\1\u0138"+
    "\75\0\1\5\5\0\1\5\2\0\1\5\4\0\30\5"+
    "\2\0\10\5\1\u0139\13\5\12\0\1\u011f\5\0\1\u011f"+
    "\1\0\2\u011f\4\0\30\u011f\2\0\24\u011f\12\0\1\5"+
    "\5\0\1\5\2\0\1\5\4\0\2\5\1\u013a\25\5"+
    "\2\0\24\5\12\0\1\5\5\0\1\5\1\71\1\0"+
    "\1\5\4\0\16\30\1\u013b\11\30\2\0\1\5\23\30"+
    "\12\0\1\5\5\0\1\5\2\0\1\5\4\0\23\5"+
    "\1\u013c\4\5\2\0\24\5\12\0\1\5\5\0\1\5"+
    "\2\0\1\5\4\0\27\5\1\u013d\2\0\24\5\12\0"+
    "\1\5\5\0\1\u013e\1\71\1\0\1\5\4\0\21\30"+
    "\1\u013f\1\u0140\5\30\2\0\1\5\23\30\12\0\1\5"+
    "\5\0\1\5\2\0\1\5\4\0\24\5\1\u0141\3\5"+
    "\2\0\24\5\12\0\1\5\5\0\1\5\1\71\1\0"+
    "\1\5\4\0\1\u0142\27\30\2\0\1\5\23\30\12\0"+
    "\1\5\5\0\1\5\1\71\1\0\1\5\4\0\30\30"+
    "\2\0\1\u0143\23\30\12\0\1\5\5\0\1\5\2\0"+
    "\1\5\4\0\4\5\1\u0144\23\5\2\0\24\5\12\0"+
    "\1\5\5\0\1\5\2\0\1\5\4\0\3\5\1\u0145"+
    "\24\5\2\0\24\5\12\0\1\5\5\0\1\5\1\71"+
    "\1\0\1\5\4\0\10\30\1\u0146\17\30\2\0\1\5"+
    "\23\30\12\0\1\5\5\0\1\5\2\0\1\5\4\0"+
    "\24\5\1\u0147\3\5\2\0\24\5\12\0\1\5\5\0"+
    "\1\5\1\71\1\0\1\5\4\0\21\30\1\u0148\6\30"+
    "\2\0\1\5\23\30\12\0\1\5\5\0\1\5\2\0"+
    "\1\5\4\0\1\u0149\27\5\2\0\24\5\12\0\1\5"+
    "\5\0\1\5\2\0\1\5\4\0\21\5\1\u014a\6\5"+
    "\2\0\24\5\12\0\1\5\5\0\1\5\2\0\1\5"+
    "\4\0\22\5\1\u014b\5\5\2\0\24\5\12\0\1\5"+
    "\5\0\1\5\1\71\1\0\1\5\4\0\16\30\1\u014c"+
    "\11\30\2\0\1\5\23\30\12\0\1\5\5\0\1\5"+
    "\1\71\1\0\1\5\4\0\16\30\1\u014d\11\30\2\0"+
    "\1\5\23\30\12\0\1\5\5\0\1\5\2\0\1\5"+
    "\4\0\22\5\1\u014e\5\5\2\0\24\5\12\0\1\5"+
    "\5\0\1\5\2\0\1\5\4\0\1\u014f\1\5\1\u0150"+
    "\12\5\1\u0151\12\5\2\0\24\5\12\0\1\5\5\0"+
    "\1\5\2\0\1\5\4\0\30\5\2\0\3\5\1\u0152"+
    "\20\5\30\0\30\u0153\3\0\23\u0153\12\0\1\5\5\0"+
    "\1\5\2\0\1\5\4\0\30\5\2\0\3\5\1\u0154"+
    "\20\5\12\0\1\5\5\0\1\5\2\0\1\5\4\0"+
    "\16\5\1\u0155\11\5\2\0\24\5\12\0\1\5\5\0"+
    "\1\5\1\71\1\0\1\5\4\0\15\30\1\u0156\12\30"+
    "\2\0\1\5\23\30\12\0\1\5\5\0\1\5\2\0"+
    "\1\5\4\0\16\5\1\u0157\11\5\2\0\24\5\12\0"+
    "\1\5\5\0\1\5\2\0\1\5\4\0\23\5\1\u0158"+
    "\4\5\2\0\24\5\12\0\1\5\5\0\1\5\2\0"+
    "\1\u0159\4\0\30\5\2\0\24\5\12\0\1\5\5\0"+
    "\1\5\1\71\1\0\1\5\4\0\30\30\2\0\1\u015a"+
    "\23\30\12\0\1\5\5\0\1\5\2\0\1\5\4\0"+
    "\1\u015b\27\5\2\0\24\5\12\0\1\5\5\0\1\5"+
    "\1\71\1\0\1\5\4\0\13\30\1\u015c\14\30\2\0"+
    "\1\5\23\30\12\0\1\5\5\0\1\5\2\0\1\5"+
    "\4\0\2\5\1\u015d\2\5\1\u015e\16\5\1\u015f\3\5"+
    "\2\0\24\5\12\0\1\5\5\0\1\5\2\0\1\5"+
    "\4\0\1\u0160\27\5\2\0\24\5\12\0\1\5\5\0"+
    "\1\5\2\0\1\5\4\0\10\5\1\u0161\17\5\2\0"+
    "\24\5\12\0\1\5\5\0\1\5\1\71\1\0\1\5"+
    "\4\0\16\30\1\u0162\11\30\2\0\1\5\23\30\12\0"+
    "\1\5\5\0\1\5\2\0\1\5\4\0\1\u0163\27\5"+
    "\2\0\24\5\12\0\1\5\5\0\1\5\1\71\1\0"+
    "\1\5\4\0\30\30\2\0\1\u0164\23\30\12\0\1\5"+
    "\5\0\1\5\2\0\1\5\4\0\14\5\1\u0165\13\5"+
    "\2\0\24\5\12\0\1\5\5\0\1\5\2\0\1\5"+
    "\4\0\14\5\1\u0166\13\5\2\0\24\5\12\0\1\5"+
    "\5\0\1\5\2\0\1\5\4\0\22\5\1\u0167\5\5"+
    "\2\0\24\5\12\0\1\5\5\0\1\5\1\71\1\0"+
    "\1\5\4\0\22\30\1\u0168\5\30\2\0\1\5\23\30"+
    "\12\0\1\5\5\0\1\5\2\0\1\5\4\0\10\5"+
    "\1\u0169\17\5\2\0\24\5\12\0\1\5\5\0\1\5"+
    "\2\0\1\5\4\0\15\5\1\u016a\12\5\2\0\24\5"+
    "\12\0\1\5\5\0\1\5\2\0\1\5\4\0\21\5"+
    "\1\u016b\6\5\2\0\24\5\12\0\1\5\5\0\1\5"+
    "\2\0\1\5\4\0\24\5\1\u016c\3\5\2\0\24\5"+
    "\12\0\1\5\5\0\1\5\2\0\1\5\4\0\30\5"+
    "\2\0\10\5\1\u016d\13\5\21\0\1\71\6\0\30\u0153"+
    "\3\0\23\u0153\12\0\1\5\5\0\1\5\2\0\1\5"+
    "\4\0\30\5\2\0\10\5\1\u016e\13\5\12\0\1\5"+
    "\5\0\1\5\2\0\1\5\4\0\14\5\1\u016f\13\5"+
    "\2\0\24\5\12\0\1\5\5\0\1\5\2\0\1\5"+
    "\4\0\16\5\1\u0170\11\5\2\0\24\5\12\0\1\5"+
    "\5\0\1\5\2\0\1\5\4\0\3\5\1\u0171\24\5"+
    "\2\0\24\5\12\0\1\5\5\0\1\5\2\0\1\5"+
    "\4\0\21\5\1\u0172\6\5\2\0\24\5\12\0\1\5"+
    "\5\0\1\5\1\71\1\0\1\5\4\0\4\30\1\u0173"+
    "\23\30\2\0\1\5\23\30\12\0\1\5\5\0\1\5"+
    "\2\0\1\5\4\0\16\5\1\u0174\11\5\2\0\24\5"+
    "\12\0\1\5\5\0\1\5\2\0\1\5\4\0\16\5"+
    "\1\u0175\11\5\2\0\24\5\12\0\1\5\5\0\1\5"+
    "\2\0\1\5\4\0\22\5\1\u0176\5\5\2\0\24\5"+
    "\12\0\1\5\5\0\1\5\2\0\1\5\4\0\2\5"+
    "\1\u0177\25\5\2\0\24\5\12\0\1\5\5\0\1\5"+
    "\2\0\1\5\4\0\5\5\1\u0178\22\5\2\0\24\5"+
    "\12\0\1\5\5\0\1\5\2\0\1\5\4\0\21\5"+
    "\1\u0179\6\5\2\0\24\5\12\0\1\5\5\0\1\5"+
    "\2\0\1\5\4\0\2\5\1\u017a\2\5\1\u017b\16\5"+
    "\1\u017c\3\5\2\0\24\5\12\0\1\5\5\0\1\5"+
    "\2\0\1\5\4\0\17\5\1\u017d\10\5\2\0\24\5"+
    "\12\0\1\5\5\0\1\5\2\0\1\5\4\0\24\5"+
    "\1\u017e\3\5\2\0\24\5\12\0\1\5\5\0\1\5"+
    "\2\0\1\5\4\0\26\5\1\u017f\1\5\2\0\24\5"+
    "\12\0\1\5\5\0\1\5\1\71\1\0\1\5\4\0"+
    "\30\30\2\0\1\u0180\23\30\12\0\1\5\5\0\1\5"+
    "\2\0\1\5\4\0\1\5\1\u0181\26\5\2\0\24\5"+
    "\12\0\1\5\5\0\1\5\2\0\1\5\4\0\23\5"+
    "\1\u0182\4\5\2\0\24\5\12\0\1\5\5\0\1\5"+
    "\2\0\1\5\4\0\4\5\1\u0183\23\5\2\0\24\5"+
    "\12\0\1\5\5\0\1\5\2\0\1\5\4\0\4\5"+
    "\1\u0184\23\5\2\0\24\5\12\0\1\5\5\0\1\5"+
    "\2\0\1\5\4\0\30\5\2\0\21\5\1\u0185\2\5"+
    "\12\0\1\5\5\0\1\5\2\0\1\5\4\0\30\5"+
    "\2\0\21\5\1\u0186\2\5\12\0\1\5\5\0\1\5"+
    "\2\0\1\5\4\0\17\5\1\u0187\10\5\2\0\24\5"+
    "\12\0\1\5\5\0\1\5\2\0\1\5\4\0\1\u0188"+
    "\27\5\2\0\24\5\12\0\1\5\5\0\1\5\2\0"+
    "\1\5\4\0\10\5\1\u0189\17\5\2\0\24\5\12\0"+
    "\1\5\5\0\1\5\1\71\1\0\1\5\4\0\22\30"+
    "\1\u018a\5\30\2\0\1\5\23\30\12\0\1\5\5\0"+
    "\1\5\2\0\1\5\4\0\14\5\1\u018b\13\5\2\0"+
    "\24\5\12\0\1\5\5\0\1\5\2\0\1\5\4\0"+
    "\21\5\1\u018c\6\5\2\0\24\5\12\0\1\5\5\0"+
    "\1\5\2\0\1\5\4\0\24\5\1\u018d\3\5\2\0"+
    "\24\5\12\0\1\5\5\0\1\5\2\0\1\5\4\0"+
    "\10\5\1\u018e\17\5\2\0\24\5\12\0\1\5\5\0"+
    "\1\5\2\0\1\5\4\0\10\5\1\u018f\17\5\2\0"+
    "\24\5\12\0\1\5\5\0\1\5\2\0\1\5\4\0"+
    "\10\5\1\u0190\17\5\2\0\24\5\12\0\1\5\5\0"+
    "\1\5\2\0\1\5\4\0\16\5\1\u0191\11\5\2\0"+
    "\24\5\12\0\1\5\5\0\1\5\2\0\1\5\4\0"+
    "\16\5\1\u0192\11\5\2\0\24\5\12\0\1\5\5\0"+
    "\1\5\2\0\1\5\4\0\22\5\1\u0193\5\5\2\0"+
    "\24\5\12\0\1\5\5\0\1\5\2\0\1\5\4\0"+
    "\16\5\1\u0194\11\5\2\0\24\5\12\0\1\5\5\0"+
    "\1\5\2\0\1\5\4\0\13\5\1\u0195\14\5\2\0"+
    "\24\5\12\0\1\5\5\0\1\5\2\0\1\5\4\0"+
    "\16\5\1\u0196\11\5\2\0\24\5\12\0\1\5\5\0"+
    "\1\5\2\0\1\5\4\0\2\5\1\u0197\2\5\1\u0198"+
    "\22\5\2\0\24\5\12\0\1\5\5\0\1\5\2\0"+
    "\1\5\4\0\13\5\1\u0199\14\5\2\0\24\5\12\0"+
    "\1\5\5\0\1\5\2\0\1\5\4\0\10\5\1\u019a"+
    "\17\5\2\0\24\5\12\0\1\5\5\0\1\5\2\0"+
    "\1\5\4\0\1\u019b\27\5\2\0\24\5\12\0\1\5"+
    "\5\0\1\5\2\0\1\5\4\0\25\5\1\u019c\2\5"+
    "\2\0\24\5\12\0\1\5\5\0\1\5\2\0\1\5"+
    "\4\0\30\5\2\0\22\5\1\u019d\1\5\12\0\1\5"+
    "\5\0\1\5\2\0\1\5\4\0\30\5\2\0\22\5"+
    "\1\u019e\1\5\12\0\1\5\5\0\1\5\2\0\1\5"+
    "\4\0\16\5\1\u019f\11\5\2\0\24\5\12\0\1\5"+
    "\5\0\1\5\2\0\1\5\4\0\23\5\1\u01a0\4\5"+
    "\2\0\24\5\12\0\1\5\5\0\1\5\2\0\1\5"+
    "\4\0\16\5\1\u01a1\11\5\2\0\24\5\12\0\1\5"+
    "\5\0\1\5\1\71\1\0\1\5\4\0\30\30\2\0"+
    "\1\u01a2\23\30\12\0\1\5\5\0\1\5\2\0\1\5"+
    "\4\0\17\5\1\u01a3\10\5\2\0\24\5\12\0\1\5"+
    "\5\0\1\5\2\0\1\5\4\0\14\5\1\u01a4\13\5"+
    "\2\0\24\5\12\0\1\5\5\0\1\5\2\0\1\5"+
    "\4\0\1\u01a5\27\5\2\0\24\5\12\0\1\5\5\0"+
    "\1\5\2\0\1\5\4\0\16\5\1\u01a6\11\5\2\0"+
    "\24\5\12\0\1\5\5\0\1\5\2\0\1\5\4\0"+
    "\2\5\1\u01a7\25\5\2\0\24\5\12\0\1\5\5\0"+
    "\1\5\2\0\1\5\4\0\16\5\1\u01a8\11\5\2\0"+
    "\24\5\12\0\1\5\5\0\1\5\2\0\1\5\4\0"+
    "\14\5\1\u01a9\13\5\2\0\24\5\12\0\1\5\5\0"+
    "\1\5\2\0\1\5\4\0\21\5\1\u01aa\6\5\2\0"+
    "\24\5\12\0\1\5\5\0\1\5\2\0\1\5\4\0"+
    "\24\5\1\u01ab\3\5\2\0\24\5\12\0\1\5\5\0"+
    "\1\5\2\0\1\5\4\0\1\u01ac\27\5\2\0\24\5"+
    "\12\0\1\5\5\0\1\5\2\0\1\5\4\0\21\5"+
    "\1\u01ad\6\5\2\0\24\5\12\0\1\5\5\0\1\5"+
    "\2\0\1\5\4\0\16\5\1\u01ae\11\5\2\0\24\5"+
    "\12\0\1\5\5\0\1\5\2\0\1\5\4\0\16\5"+
    "\1\u01af\11\5\2\0\24\5\12\0\1\5\5\0\1\5"+
    "\2\0\1\5\4\0\4\5\1\u01b0\23\5\2\0\24\5"+
    "\12\0\1\5\5\0\1\5\2\0\1\5\4\0\6\5"+
    "\1\u01b1\21\5\2\0\24\5\12\0\1\5\5\0\1\5"+
    "\2\0\1\5\4\0\2\5\1\u01b2\25\5\2\0\24\5"+
    "\12\0\1\5\5\0\1\5\2\0\1\5\4\0\16\5"+
    "\1\u01b3\11\5\2\0\24\5\12\0\1\5\5\0\1\5"+
    "\2\0\1\5\4\0\30\5\2\0\4\5\1\u01b4\17\5"+
    "\12\0\1\5\5\0\1\5\2\0\1\5\4\0\30\5"+
    "\2\0\4\5\1\u01b5\17\5\12\0\1\5\5\0\1\5"+
    "\2\0\1\5\4\0\15\5\1\u01b6\12\5\2\0\24\5"+
    "\12\0\1\5\5\0\1\5\2\0\1\5\4\0\16\5"+
    "\1\u01b7\11\5\2\0\24\5\12\0\1\5\5\0\1\5"+
    "\2\0\1\5\4\0\24\5\1\u01b8\3\5\2\0\24\5"+
    "\12\0\1\5\5\0\1\5\2\0\1\5\4\0\16\5"+
    "\1\u01b9\11\5\2\0\24\5\12\0\1\5\5\0\1\5"+
    "\2\0\1\5\4\0\24\5\1\u01ba\3\5\2\0\24\5"+
    "\12\0\1\5\5\0\1\5\2\0\1\5\4\0\21\5"+
    "\1\u01bb\6\5\2\0\24\5\12\0\1\5\5\0\1\5"+
    "\2\0\1\5\4\0\15\5\1\u01bc\12\5\2\0\24\5"+
    "\12\0\1\5\5\0\1\5\2\0\1\5\4\0\1\u01bd"+
    "\27\5\2\0\24\5\12\0\1\5\5\0\1\5\2\0"+
    "\1\5\4\0\17\5\1\u01be\10\5\2\0\24\5\12\0"+
    "\1\5\5\0\1\5\2\0\1\5\4\0\14\5\1\u01bf"+
    "\13\5\2\0\24\5\12\0\1\5\5\0\1\5\2\0"+
    "\1\5\4\0\1\u01c0\27\5\2\0\24\5\12\0\1\5"+
    "\5\0\1\5\2\0\1\5\4\0\21\5\1\u01c1\6\5"+
    "\2\0\24\5\12\0\1\5\5\0\1\5\2\0\1\5"+
    "\4\0\3\5\1\u01c2\24\5\2\0\24\5\12\0\1\5"+
    "\5\0\1\5\2\0\1\5\4\0\14\5\1\u01c3\13\5"+
    "\2\0\24\5\12\0\1\5\5\0\1\5\2\0\1\5"+
    "\4\0\21\5\1\u01c4\6\5\2\0\24\5\12\0\1\5"+
    "\5\0\1\5\2\0\1\5\4\0\24\5\1\u01c5\3\5"+
    "\2\0\24\5\12\0\1\5\5\0\1\5\2\0\1\5"+
    "\4\0\10\5\1\u01c6\17\5\2\0\24\5\12\0\1\5"+
    "\5\0\1\5\2\0\1\5\4\0\30\5\2\0\5\5"+
    "\1\u01c7\16\5\12\0\1\5\5\0\1\5\2\0\1\5"+
    "\4\0\30\5\2\0\5\5\1\u01c8\16\5\12\0\1\5"+
    "\5\0\1\5\2\0\1\5\4\0\4\5\1\u01c9\23\5"+
    "\2\0\24\5\12\0\1\5\5\0\1\5\2\0\1\5"+
    "\4\0\22\5\1\u01ca\5\5\2\0\24\5\12\0\1\5"+
    "\5\0\1\5\2\0\1\5\4\0\22\5\1\u01cb\5\5"+
    "\2\0\24\5\12\0\1\5\5\0\1\5\2\0\1\5"+
    "\4\0\15\5\1\u01cc\12\5\2\0\24\5\12\0\1\5"+
    "\5\0\1\5\2\0\1\5\4\0\13\5\1\u01cd\14\5"+
    "\2\0\24\5\12\0\1\5\5\0\1\5\2\0\1\5"+
    "\4\0\10\5\1\u01ce\17\5\2\0\24\5\12\0\1\5"+
    "\5\0\1\5\2\0\1\5\4\0\2\5\1\u01cf\25\5"+
    "\2\0\24\5\12\0\1\5\5\0\1\5\2\0\1\5"+
    "\4\0\16\5\1\u01d0\11\5\2\0\24\5\12\0\1\5"+
    "\5\0\1\5\2\0\1\5\4\0\24\5\1\u01d1\3\5"+
    "\2\0\24\5\12\0\1\5\5\0\1\5\2\0\1\5"+
    "\4\0\21\5\1\u01d2\6\5\2\0\24\5\12\0\1\5"+
    "\5\0\1\5\2\0\1\5\4\0\10\5\1\u01d3\17\5"+
    "\2\0\24\5\12\0\1\5\5\0\1\5\2\0\1\5"+
    "\4\0\17\5\1\u01d4\10\5\2\0\24\5\12\0\1\5"+
    "\5\0\1\5\2\0\1\5\4\0\14\5\1\u01d5\13\5"+
    "\2\0\24\5\12\0\1\5\5\0\1\5\2\0\1\5"+
    "\4\0\16\5\1\u01d6\11\5\2\0\24\5\12\0\1\5"+
    "\5\0\1\5\2\0\1\5\4\0\16\5\1\u01d7\11\5"+
    "\2\0\24\5\12\0\1\5\5\0\1\5\2\0\1\5"+
    "\4\0\30\5\2\0\20\5\1\u01d8\3\5\12\0\1\5"+
    "\5\0\1\5\2\0\1\5\4\0\30\5\2\0\20\5"+
    "\1\u01d9\3\5\12\0\1\5\5\0\1\5\2\0\1\5"+
    "\4\0\15\5\1\u01da\12\5\2\0\24\5\12\0\1\5"+
    "\5\0\1\5\2\0\1\5\4\0\24\5\1\u01db\3\5"+
    "\2\0\24\5\12\0\1\5\5\0\1\5\2\0\1\5"+
    "\4\0\4\5\1\u01dc\23\5\2\0\24\5\12\0\1\5"+
    "\5\0\1\5\2\0\1\5\4\0\1\u01dd\27\5\2\0"+
    "\24\5\12\0\1\5\5\0\1\5\2\0\1\5\4\0"+
    "\16\5\1\u01de\11\5\2\0\24\5\12\0\1\5\5\0"+
    "\1\5\2\0\1\5\4\0\10\5\1\u01df\17\5\2\0"+
    "\24\5\12\0\1\5\5\0\1\5\2\0\1\5\4\0"+
    "\15\5\1\u01e0\12\5\2\0\24\5\12\0\1\5\5\0"+
    "\1\5\2\0\1\5\4\0\13\5\1\u01e1\14\5\2\0"+
    "\24\5\12\0\1\5\5\0\1\5\2\0\1\5\4\0"+
    "\10\5\1\u01e2\17\5\2\0\24\5\12\0\1\5\5\0"+
    "\1\5\2\0\1\5\4\0\16\5\1\u01e3\11\5\2\0"+
    "\24\5\12\0\1\5\5\0\1\5\2\0\1\5\4\0"+
    "\16\5\1\u01e4\11\5\2\0\24\5\12\0\1\5\5\0"+
    "\1\5\2\0\1\5\4\0\24\5\1\u01e5\3\5\2\0"+
    "\24\5\12\0\1\5\5\0\1\5\2\0\1\5\4\0"+
    "\15\5\1\u01e6\12\5\2\0\24\5\12\0\1\5\5\0"+
    "\1\5\2\0\1\5\4\0\23\5\1\u01e7\4\5\2\0"+
    "\24\5\12\0\1\5\5\0\1\5\2\0\1\5\4\0"+
    "\1\u01e8\27\5\2\0\24\5\12\0\1\5\5\0\1\5"+
    "\2\0\1\5\4\0\15\5\1\u01e9\12\5\2\0\24\5"+
    "\12\0\1\5\5\0\1\5\2\0\1\5\4\0\21\5"+
    "\1\u01ea\6\5\2\0\24\5\12\0\1\5\5\0\1\5"+
    "\2\0\1\5\4\0\16\5\1\u01eb\11\5\2\0\24\5"+
    "\12\0\1\5\5\0\1\5\2\0\1\5\4\0\4\5"+
    "\1\u01ec\23\5\2\0\24\5\12\0\1\5\5\0\1\5"+
    "\2\0\1\5\4\0\1\u01ed\27\5\2\0\24\5\12\0"+
    "\1\5\5\0\1\5\2\0\1\5\4\0\16\5\1\u01ee"+
    "\11\5\2\0\24\5\12\0\1\5\5\0\1\5\2\0"+
    "\1\5\4\0\15\5\1\u01ef\12\5\2\0\24\5\12\0"+
    "\1\5\5\0\1\5\2\0\1\5\4\0\13\5\1\u01f0"+
    "\14\5\2\0\24\5\12\0\1\5\5\0\1\5\2\0"+
    "\1\5\4\0\4\5\1\u01f1\23\5\2\0\24\5\12\0"+
    "\1\5\5\0\1\5\2\0\1\5\4\0\21\5\1\u01f2"+
    "\6\5\2\0\24\5\12\0\1\5\5\0\1\5\2\0"+
    "\1\5\4\0\23\5\1\u01f3\4\5\2\0\24\5\12\0"+
    "\1\5\5\0\1\5\2\0\1\5\4\0\10\5\1\u01f4"+
    "\17\5\2\0\24\5\12\0\1\5\5\0\1\5\2\0"+
    "\1\5\4\0\15\5\1\u01f5\12\5\2\0\24\5\12\0"+
    "\1\5\5\0\1\5\2\0\1\5\4\0\15\5\1\u01f6"+
    "\12\5\2\0\24\5\12\0\1\5\5\0\1\5\2\0"+
    "\1\5\4\0\21\5\1\u01f7\6\5\2\0\24\5\12\0"+
    "\1\5\5\0\1\5\2\0\1\5\4\0\4\5\1\u01f8"+
    "\23\5\2\0\24\5\12\0\1\5\5\0\1\5\2\0"+
    "\1\5\4\0\1\u01f9\27\5\2\0\24\5\12\0\1\5"+
    "\5\0\1\5\2\0\1\5\4\0\10\5\1\u01fa\17\5"+
    "\2\0\24\5\12\0\1\5\5\0\1\5\2\0\1\5"+
    "\4\0\4\5\1\u01fb\23\5\2\0\24\5\12\0\1\5"+
    "\5\0\1\5\2\0\1\5\4\0\16\5\1\u01fc\11\5"+
    "\2\0\24\5\12\0\1\5\5\0\1\5\2\0\1\5"+
    "\4\0\23\5\1\u01fd\4\5\2\0\24\5\12\0\1\5"+
    "\5\0\1\5\2\0\1\5\4\0\10\5\1\u01fe\17\5"+
    "\2\0\24\5\12\0\1\5\5\0\1\5\2\0\1\5"+
    "\4\0\15\5\1\u01ff\12\5\2\0\24\5\12\0\1\5"+
    "\5\0\1\5\2\0\1\5\4\0\21\5\1\u0200\6\5"+
    "\2\0\24\5\12\0\1\5\5\0\1\5\2\0\1\5"+
    "\4\0\16\5\1\u0201\11\5\2\0\24\5\12\0\1\5"+
    "\5\0\1\5\2\0\1\5\4\0\4\5\1\u0202\23\5"+
    "\2\0\24\5\12\0\1\5\5\0\1\5\2\0\1\5"+
    "\4\0\16\5\1\u0203\11\5\2\0\24\5\12\0\1\5"+
    "\5\0\1\5\2\0\1\5\4\0\23\5\1\u0204\4\5"+
    "\2\0\24\5\12\0\1\5\5\0\1\5\2\0\1\5"+
    "\4\0\10\5\1\u0205\17\5\2\0\24\5\12\0\1\5"+
    "\5\0\1\5\2\0\1\5\4\0\4\5\1\u0206\23\5"+
    "\2\0\24\5\12\0\1\5\5\0\1\5\2\0\1\5"+
    "\4\0\16\5\1\u0207\11\5\2\0\24\5\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[31430];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\1\1\0\1\11\3\1\3\11\1\1\1\0"+
    "\1\1\1\11\1\1\1\11\23\1\2\11\7\1\1\11"+
    "\1\1\2\11\1\0\1\11\1\1\1\0\1\1\3\11"+
    "\1\0\52\1\1\11\2\1\1\0\55\1\1\0\46\1"+
    "\1\0\44\1\1\0\34\1\1\0\2\1\1\0\32\1"+
    "\1\0\33\1\1\0\32\1\1\0\264\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[519];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    private Symbol symbol(int type, Object value){
        return new Symbol(type, yyline, yycolumn, value);
    }
    private Symbol symbol(int type){
        return new Symbol(type, yyline, yycolumn);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexerDB(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    return ZZ_CMAP[input];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { /*Ignore*/
            }
            // fall through
          case 83: break;
          case 2:
            { return new Symbol(sym2.COMILLAS, yycolumn, yyline, yytext());
            }
            // fall through
          case 84: break;
          case 3:
            { return new Symbol(sym2.USUARIO,yycolumn,yyline,yytext());
            }
            // fall through
          case 85: break;
          case 4:
            { return new Symbol(sym2.ID,yycolumn,yyline,yytext());
            }
            // fall through
          case 86: break;
          case 5:
            { return new Symbol(sym2.APOSTROFE, yycolumn, yyline, yytext());
            }
            // fall through
          case 87: break;
          case 6:
            { return new Symbol(sym2.PARENTESISA, yycolumn, yyline, yytext());
            }
            // fall through
          case 88: break;
          case 7:
            { return new Symbol(sym2.PARENTESISC, yycolumn, yyline, yytext());
            }
            // fall through
          case 89: break;
          case 8:
            { return new Symbol(sym2.COMA, yycolumn, yyline, yytext());
            }
            // fall through
          case 90: break;
          case 9:
            { return new Symbol(sym2.NUMERO, yycolumn, yyline, yytext());
            }
            // fall through
          case 91: break;
          case 10:
            { return new Symbol(sym2.DOSP, yycolumn, yyline, yytext());
            }
            // fall through
          case 92: break;
          case 11:
            { return new Symbol(sym2.MENORQ,yycolumn,yyline,yytext());
            }
            // fall through
          case 93: break;
          case 12:
            { return new Symbol(sym2.IGUAL,yycolumn,yyline,yytext());
            }
            // fall through
          case 94: break;
          case 13:
            { return new Symbol(sym2.MAYORQ,yycolumn,yyline,yytext());
            }
            // fall through
          case 95: break;
          case 14:
            { return new Symbol(sym2.CORCHETEA, yycolumn, yyline, yytext());
            }
            // fall through
          case 96: break;
          case 15:
            { return new Symbol(sym2.CORCHETEC, yycolumn, yyline, yytext());
            }
            // fall through
          case 97: break;
          case 16:
            { return new Symbol(sym2.LLAVEA, yycolumn, yyline, yytext());
            }
            // fall through
          case 98: break;
          case 17:
            { return new Symbol(sym2.OR,yycolumn,yyline,yytext());
            }
            // fall through
          case 99: break;
          case 18:
            { return new Symbol(sym2.LLAVEC, yycolumn, yyline, yytext());
            }
            // fall through
          case 100: break;
          case 19:
            { return new Symbol(sym2.FINE,yycolumn,yyline,yytext());
            }
            // fall through
          case 101: break;
          case 20:
            { return new Symbol(sym2.DE,yycolumn,yyline,yytext());
            }
            // fall through
          case 102: break;
          case 21:
            { return new Symbol(sym2.INICIOE,yycolumn,yyline,yytext());
            }
            // fall through
          case 103: break;
          case 22:
            { return new Symbol(sym2.MENORIGUAL,yycolumn,yyline,yytext());
            }
            // fall through
          case 104: break;
          case 23:
            { return new Symbol(sym2.MAYORIGUAL,yycolumn,yyline,yytext());
            }
            // fall through
          case 105: break;
          case 24:
            { return new Symbol(sym2.IDP,yycolumn,yyline,yytext());
            }
            // fall through
          case 106: break;
          case 25:
            { return new Symbol(sym2.BOOL,yycolumn,yyline,yytext());
            }
            // fall through
          case 107: break;
          case 26:
            { return new Symbol(sym2.OPERADORLOGICO,yycolumn,yyline,yytext());
            }
            // fall through
          case 108: break;
          case 27:
            { return new Symbol(sym2.TO,yycolumn,yyline,yytext());
            }
            // fall through
          case 109: break;
          case 28:
            { return new Symbol(sym2.TITULO, yycolumn, yyline, yytext());
            }
            // fall through
          case 110: break;
          case 29:
            { return new Symbol(sym2.OPERADORNOT,yycolumn,yyline,yytext());
            }
            // fall through
          case 111: break;
          case 30:
            { return new Symbol(sym2.URLC,yycolumn,yyline,yytext());
            }
            // fall through
          case 112: break;
          case 31:
            { return new Symbol(sym2.TEMA,yycolumn,yyline,yytext());
            }
            // fall through
          case 113: break;
          case 32:
            { return new Symbol(sym2.FORM,yycolumn,yyline,yytext());
            }
            // fall through
          case 114: break;
          case 33:
            { return new Symbol(sym2.TEMAP,yycolumn,yyline,yytext());
            }
            // fall through
          case 115: break;
          case 34:
            { return new Symbol(sym2.CLASEBOTON,yycolumn,yyline,yytext());
            }
            // fall through
          case 116: break;
          case 35:
            { return new Symbol(sym2.CLASE,yycolumn,yyline,yytext());
            }
            // fall through
          case 117: break;
          case 36:
            { return new Symbol(sym2.CLASEOPCIONES,yycolumn,yyline,yytext());
            }
            // fall through
          case 118: break;
          case 37:
            { return new Symbol(sym2.FILAS,yycolumn,yyline,yytext());
            }
            // fall through
          case 119: break;
          case 38:
            { return new Symbol(sym2.WHERE,yycolumn,yyline,yytext());
            }
            // fall through
          case 120: break;
          case 39:
            { return new Symbol(sym2.CLASEIMAGEN,yycolumn,yyline,yytext());
            }
            // fall through
          case 121: break;
          case 40:
            { return new Symbol(sym2.INDICEC,yycolumn,yyline,yytext());
            }
            // fall through
          case 122: break;
          case 41:
            { return new Symbol(sym2.NOMBREP,yycolumn,yyline,yytext());
            }
            // fall through
          case 123: break;
          case 42:
            { return new Symbol(sym2.SELECT,yycolumn,yyline,yytext());
            }
            // fall through
          case 124: break;
          case 43:
            { return new Symbol(sym2.TITULOP,yycolumn,yyline,yytext());
            }
            // fall through
          case 125: break;
          case 44:
            { return new Symbol(sym2.CLASENORMAL,yycolumn,yyline,yytext());
            }
            // fall through
          case 126: break;
          case 45:
            { return new Symbol(sym2.USUARIOP,yycolumn,yyline,yytext());
            }
            // fall through
          case 127: break;
          case 46:
            { return new Symbol(sym2.FECHA,yycolumn,yyline,yytext());
            }
            // fall through
          case 128: break;
          case 47:
            { return new Symbol(sym2.URL, yycolumn,yyline,yytext());
            }
            // fall through
          case 129: break;
          case 48:
            { return new Symbol(sym2.COLUMNAS,yycolumn,yyline,yytext());
            }
            // fall through
          case 130: break;
          case 49:
            { return new Symbol(sym2.OPCIONES,yycolumn,yyline,yytext());
            }
            // fall through
          case 131: break;
          case 50:
            { return new Symbol(sym2.CONTRAP,yycolumn,yyline,yytext());
            }
            // fall through
          case 132: break;
          case 51:
            { return new Symbol(sym2.CONSULTAS,yycolumn,yyline,yytext());
            }
            // fall through
          case 133: break;
          case 52:
            { return new Symbol(sym2.REQUERIDO,yycolumn,yyline,yytext());
            }
            // fall through
          case 134: break;
          case 53:
            { return new Symbol(sym2.ALINEAC,yycolumn,yyline,yytext());
            }
            // fall through
          case 135: break;
          case 54:
            { return new Symbol(sym2.CLASEAREA,yycolumn,yyline,yytext());
            }
            // fall through
          case 136: break;
          case 55:
            { return new Symbol(sym2.NOCONSULTA,yycolumn,yyline,yytext());
            }
            // fall through
          case 137: break;
          case 56:
            { return new Symbol(sym2.FORMULARIOC,yycolumn,yyline,yytext());
            }
            // fall through
          case 138: break;
          case 57:
            { return new Symbol(sym2.NOMBREC,yycolumn,yyline,yytext());
            }
            // fall through
          case 139: break;
          case 58:
            { return new Symbol(sym2.CREARU,yycolumn,yyline,yytext());
            }
            // fall through
          case 140: break;
          case 59:
            { return new Symbol(sym2.LOGINU,yycolumn,yyline,yytext());
            }
            // fall through
          case 141: break;
          case 60:
            { return new Symbol(sym2.TEXTOVC,yycolumn,yyline,yytext());
            }
            // fall through
          case 142: break;
          case 61:
            { return new Symbol(sym2.USUARIONP,yycolumn,yyline,yytext());
            }
            // fall through
          case 143: break;
          case 62:
            { return new Symbol(sym2.FINS,yycolumn,yyline,yytext());
            }
            // fall through
          case 144: break;
          case 63:
            { return new Symbol(sym2.INICIOS, yycolumn, yyline, yytext());
            }
            // fall through
          case 145: break;
          case 64:
            { return new Symbol(sym2.FECHACP,yycolumn,yyline,yytext());
            }
            // fall through
          case 146: break;
          case 65:
            { return new Symbol(sym2.NUEVOP,yycolumn,yyline,yytext());
            }
            // fall through
          case 147: break;
          case 66:
            { return new Symbol(sym2.CONSULTADATOS,yycolumn,yyline,yytext());
            }
            // fall through
          case 148: break;
          case 67:
            { return new Symbol(sym2.USUARIOAP,yycolumn,yyline,yytext());
            }
            // fall through
          case 149: break;
          case 68:
            { return new Symbol(sym2.FINSOLICITUDES, yycolumn, yyline, yytext());
            }
            // fall through
          case 150: break;
          case 69:
            { return new Symbol(sym2.SOLICITUDESP, yycolumn, yyline, yytext());
            }
            // fall through
          case 151: break;
          case 70:
            { return new Symbol(sym2.ELIMINARU,yycolumn,yyline,yytext());
            }
            // fall through
          case 152: break;
          case 71:
            { return new Symbol(sym2.NUEVOFP,yycolumn,yyline,yytext());
            }
            // fall through
          case 153: break;
          case 72:
            { return new Symbol(sym2.USUARIOCP,yycolumn,yyline,yytext());
            }
            // fall through
          case 154: break;
          case 73:
            { return new Symbol(sym2.MODIFICARU,yycolumn,yyline,yytext());
            }
            // fall through
          case 155: break;
          case 74:
            { return new Symbol(sym2.AGREGARC,yycolumn,yyline,yytext());
            }
            // fall through
          case 156: break;
          case 75:
            { return new Symbol(sym2.FECHAMP,yycolumn,yyline,yytext());
            }
            // fall through
          case 157: break;
          case 76:
            { return new Symbol(sym2.ELIMINARC,yycolumn,yyline,yytext());
            }
            // fall through
          case 158: break;
          case 77:
            { return new Symbol(sym2.ELIMINARF,yycolumn,yyline,yytext());
            }
            // fall through
          case 159: break;
          case 78:
            { return new Symbol(sym2.CREDENCIALES,yycolumn,yyline,yytext());
            }
            // fall through
          case 160: break;
          case 79:
            { return new Symbol(sym2.MODIFICARC,yycolumn,yyline,yytext());
            }
            // fall through
          case 161: break;
          case 80:
            { return new Symbol(sym2.MODIFICARF,yycolumn,yyline,yytext());
            }
            // fall through
          case 162: break;
          case 81:
            { return new Symbol(sym2.PARAMC,yycolumn,yyline,yytext());
            }
            // fall through
          case 163: break;
          case 82:
            { return new Symbol(sym2.PARAMF,yycolumn,yyline,yytext());
            }
            // fall through
          case 164: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
