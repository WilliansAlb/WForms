
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.Symbol;
import POJOS.Solicitud;
import POJOS.Usuario;
import POJOS.Consulta;
import POJOS.Errores;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\274\000\002\002\004\000\002\002\004\000\002\002" +
    "\004\000\002\100\002\000\002\100\003\000\002\100\004" +
    "\000\002\077\010\000\002\077\010\000\002\077\003\000" +
    "\002\005\004\000\002\005\003\000\002\005\004\000\002" +
    "\003\011\000\002\006\007\000\002\006\007\000\002\006" +
    "\007\000\002\006\011\000\002\006\007\000\002\006\007" +
    "\000\002\006\007\000\002\006\007\000\002\006\007\000" +
    "\002\006\007\000\002\006\007\000\002\006\003\000\002" +
    "\055\006\000\002\055\004\000\002\101\002\000\002\101" +
    "\004\000\002\056\006\000\002\056\004\000\002\103\002" +
    "\000\002\103\004\000\002\057\006\000\002\057\004\000" +
    "\002\104\002\000\002\104\004\000\002\060\006\000\002" +
    "\060\004\000\002\105\002\000\002\105\004\000\002\061" +
    "\006\000\002\061\004\000\002\106\002\000\002\106\004" +
    "\000\002\062\006\000\002\062\004\000\002\107\002\000" +
    "\002\107\004\000\002\063\006\000\002\063\004\000\002" +
    "\110\002\000\002\110\004\000\002\064\006\000\002\064" +
    "\004\000\002\111\002\000\002\111\004\000\002\007\012" +
    "\000\002\007\003\000\002\023\012\000\002\035\012\000" +
    "\002\054\005\000\002\054\005\000\002\036\004\000\002" +
    "\036\004\000\002\112\002\000\002\112\004\000\002\037" +
    "\003\000\002\037\003\000\002\037\003\000\002\037\003" +
    "\000\002\037\003\000\002\037\003\000\002\037\003\000" +
    "\002\037\003\000\002\037\003\000\002\037\003\000\002" +
    "\037\003\000\002\037\003\000\002\004\004\000\002\004" +
    "\004\000\002\102\002\000\002\102\004\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\015\004\000" +
    "\002\015\004\000\002\113\002\000\002\113\004\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\024\004\000\002\024\004\000\002\114\002" +
    "\000\002\114\004\000\002\025\003\000\002\025\003\000" +
    "\002\025\003\000\002\025\003\000\002\025\003\000\002" +
    "\025\003\000\002\033\004\000\002\033\004\000\002\115" +
    "\002\000\002\115\004\000\002\034\003\000\002\034\003" +
    "\000\002\034\003\000\002\034\003\000\002\032\011\000" +
    "\002\014\005\000\002\014\005\000\002\010\011\000\002" +
    "\031\011\000\002\017\011\000\002\020\011\000\002\012" +
    "\011\000\002\021\011\000\002\013\011\000\002\022\011" +
    "\000\002\026\011\000\002\027\011\000\002\030\011\000" +
    "\002\040\011\000\002\041\011\000\002\121\003\000\002" +
    "\121\003\000\002\121\003\000\002\121\003\000\002\121" +
    "\003\000\002\042\011\000\002\043\011\000\002\044\011" +
    "\000\002\045\011\000\002\046\011\000\002\047\011\000" +
    "\002\050\005\000\002\050\003\000\002\117\003\000\002" +
    "\117\003\000\002\117\003\000\002\117\003\000\002\116" +
    "\003\000\002\116\003\000\002\116\003\000\002\051\011" +
    "\000\002\052\011\000\002\053\011\000\002\065\012\000" +
    "\002\066\006\000\002\066\004\000\002\067\002\000\002" +
    "\067\004\000\002\070\004\000\002\070\004\000\002\071" +
    "\002\000\002\071\004\000\002\072\017\000\002\122\003" +
    "\000\002\122\003\000\002\073\002\000\002\073\003\000" +
    "\002\074\004\000\002\074\004\000\002\075\002\000\002" +
    "\075\004\000\002\076\002\000\002\076\006\000\002\127" +
    "\005\000\002\127\005\000\002\127\004\000\002\127\005" +
    "\000\002\127\003\000\002\124\004\000\002\123\004\000" +
    "\002\123\004\000\002\120\003\000\002\120\003\000\002" +
    "\120\003\000\002\120\003\000\002\125\003\000\002\125" +
    "\003\000\002\126\003\000\002\126\005\000\002\126\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01eb\000\006\003\004\005\005\001\002\000\014\002" +
    "\ufffe\003\010\005\u01ec\051\011\060\012\001\002\000\010" +
    "\003\010\051\011\060\012\001\002\000\004\002\007\001" +
    "\002\000\004\002\001\001\002\000\004\002\ufff9\001\002" +
    "\000\004\010\u01da\001\002\000\004\004\014\001\002\000" +
    "\004\002\000\001\002\000\032\003\027\012\017\014\026" +
    "\023\025\024\015\025\022\044\016\053\023\055\020\077" +
    "\021\101\024\111\031\001\002\000\006\003\160\004\162" +
    "\001\002\000\004\004\u0136\001\002\000\006\003\160\004" +
    "\162\001\002\000\004\004\277\001\002\000\004\004\277" +
    "\001\002\000\004\004\u0136\001\002\000\004\004\u0136\001" +
    "\002\000\004\004\277\001\002\000\006\003\160\004\162" +
    "\001\002\000\006\003\160\004\162\001\002\000\004\011" +
    "\uffe9\001\002\000\004\011\155\001\002\000\004\004\033" +
    "\001\002\000\006\003\044\045\043\001\002\000\004\010" +
    "\034\001\002\000\004\045\035\001\002\000\004\004\036" +
    "\001\002\000\004\112\037\001\002\000\004\004\040\001" +
    "\002\000\004\006\041\001\002\000\004\047\042\001\002" +
    "\000\006\003\uff6a\045\uff6a\001\002\000\006\003\054\004" +
    "\056\001\002\000\006\050\uff67\062\050\001\002\000\004" +
    "\050\046\001\002\000\004\046\047\001\002\000\004\011" +
    "\uffea\001\002\000\006\003\044\045\043\001\002\000\004" +
    "\050\uff68\001\002\000\004\050\uff66\001\002\000\006\046" +
    "\uff63\062\151\001\002\000\006\046\uff63\062\151\001\002" +
    "\000\004\046\147\001\002\000\004\113\057\001\002\000" +
    "\004\004\060\001\002\000\004\006\061\001\002\000\004" +
    "\004\062\001\002\000\004\114\063\001\002\000\004\116" +
    "\064\001\002\000\006\034\067\063\065\001\002\000\022" +
    "\010\uff60\011\uff60\047\uff60\050\uff60\062\uff60\122\uff60\123" +
    "\uff60\124\uff60\001\002\000\004\047\070\001\002\000\022" +
    "\010\uff5f\011\uff5f\047\uff5f\050\uff5f\062\uff5f\122\uff5f\123" +
    "\uff5f\124\uff5f\001\002\000\012\003\073\034\067\050\uff5e" +
    "\063\065\001\002\000\006\050\uff5a\062\075\001\002\000" +
    "\004\050\100\001\002\000\006\050\uff5a\062\075\001\002" +
    "\000\004\050\uff5d\001\002\000\010\003\073\034\067\063" +
    "\065\001\002\000\004\050\uff5b\001\002\000\004\050\uff59" +
    "\001\002\000\006\004\uff58\115\101\001\002\000\004\047" +
    "\104\001\002\000\004\004\103\001\002\000\006\046\uff61" +
    "\062\uff61\001\002\000\012\032\107\034\067\063\065\117" +
    "\106\001\002\000\014\010\124\011\125\122\127\123\122" +
    "\124\123\001\002\000\012\032\107\034\067\063\065\117" +
    "\106\001\002\000\012\032\107\034\067\063\065\117\106" +
    "\001\002\000\010\050\113\120\112\121\114\001\002\000" +
    "\012\033\uff52\050\uff52\120\uff52\121\uff52\001\002\000\012" +
    "\032\107\034\067\063\065\117\106\001\002\000\004\004" +
    "\uff57\001\002\000\012\032\107\034\067\063\065\117\106" +
    "\001\002\000\012\033\uff55\050\uff55\120\112\121\uff55\001" +
    "\002\000\012\033\uff56\050\uff56\120\uff56\121\uff56\001\002" +
    "\000\010\033\120\120\112\121\114\001\002\000\012\033" +
    "\uff53\050\uff53\120\uff53\121\uff53\001\002\000\012\033\uff54" +
    "\050\uff54\120\uff54\121\uff54\001\002\000\006\031\uff4e\057" +
    "\uff4e\001\002\000\006\031\uff4d\057\uff4d\001\002\000\006" +
    "\031\uff4c\057\uff4c\001\002\000\006\031\uff4b\057\uff4b\001" +
    "\002\000\006\031\145\057\143\001\002\000\010\031\134" +
    "\057\131\125\132\001\002\000\012\033\uff51\050\uff51\120" +
    "\uff51\121\uff51\001\002\000\012\033\uff48\050\uff48\120\uff48" +
    "\121\uff48\001\002\000\012\026\137\034\140\057\136\063" +
    "\135\001\002\000\012\033\uff4f\050\uff4f\120\uff4f\121\uff4f" +
    "\001\002\000\012\033\uff46\050\uff46\120\uff46\121\uff46\001" +
    "\002\000\010\004\uff72\103\uff72\125\uff72\001\002\000\010" +
    "\004\uff71\103\uff71\125\uff71\001\002\000\010\004\uff74\103" +
    "\uff74\125\uff74\001\002\000\010\004\uff73\103\uff73\125\uff73" +
    "\001\002\000\004\125\142\001\002\000\012\033\uff47\050" +
    "\uff47\120\uff47\121\uff47\001\002\000\012\033\uff4a\050\uff4a" +
    "\120\uff4a\121\uff4a\001\002\000\012\033\uff50\050\uff50\120" +
    "\uff50\121\uff50\001\002\000\012\033\uff49\050\uff49\120\uff49" +
    "\121\uff49\001\002\000\004\050\uff5c\001\002\000\006\050" +
    "\uff67\062\050\001\002\000\004\050\uff69\001\002\000\006" +
    "\003\054\004\056\001\002\000\004\046\uff64\001\002\000" +
    "\004\046\uff62\001\002\000\004\046\uff65\001\002\000\004" +
    "\061\156\001\002\000\004\007\157\001\002\000\004\002" +
    "\ufffa\001\002\000\006\003\uffc7\045\uffc7\001\002\000\006" +
    "\003\173\045\172\001\002\000\004\010\163\001\002\000" +
    "\004\045\164\001\002\000\004\004\165\001\002\000\004" +
    "\102\166\001\002\000\004\004\167\001\002\000\004\006" +
    "\170\001\002\000\004\047\171\001\002\000\006\003\uffc8" +
    "\045\uffc8\001\002\000\006\003\204\004\210\001\002\000" +
    "\006\050\uffe2\062\177\001\002\000\004\050\175\001\002" +
    "\000\004\046\176\001\002\000\004\011\ufff3\001\002\000" +
    "\006\003\173\045\172\001\002\000\004\050\uffe3\001\002" +
    "\000\004\050\uffe1\001\002\000\006\046\uffa7\062\uffa7\001" +
    "\002\000\006\046\uffa4\062\uffa4\001\002\000\006\046\uffa9" +
    "\062\212\001\002\000\006\046\uffa6\062\uffa6\001\002\000" +
    "\004\046\250\001\002\000\006\046\uffa5\062\uffa5\001\002" +
    "\000\012\015\215\016\220\017\216\022\217\001\002\000" +
    "\006\046\uffa9\062\212\001\002\000\006\003\204\004\210" +
    "\001\002\000\004\046\uffab\001\002\000\004\046\uffa8\001" +
    "\002\000\004\004\243\001\002\000\004\004\233\001\002" +
    "\000\004\004\226\001\002\000\004\004\221\001\002\000" +
    "\004\006\222\001\002\000\004\004\223\001\002\000\004" +
    "\034\224\001\002\000\004\004\225\001\002\000\006\046" +
    "\uff8b\062\uff8b\001\002\000\004\006\227\001\002\000\004" +
    "\004\230\001\002\000\004\035\231\001\002\000\004\004" +
    "\232\001\002\000\006\046\uff87\062\uff87\001\002\000\004" +
    "\006\234\001\002\000\004\004\235\001\002\000\010\034" +
    "\241\057\237\063\236\001\002\000\004\004\uff6f\001\002" +
    "\000\004\004\uff6e\001\002\000\004\004\242\001\002\000" +
    "\004\004\uff70\001\002\000\006\046\uff89\062\uff89\001\002" +
    "\000\004\006\244\001\002\000\004\004\245\001\002\000" +
    "\004\034\246\001\002\000\004\004\247\001\002\000\006" +
    "\046\uff8c\062\uff8c\001\002\000\006\050\uffe2\062\177\001" +
    "\002\000\004\050\uffe4\001\002\000\004\046\uffaa\001\002" +
    "\000\006\003\255\045\254\001\002\000\004\004\265\001" +
    "\002\000\006\050\uffde\062\261\001\002\000\004\050\257" +
    "\001\002\000\004\046\260\001\002\000\004\011\ufff2\001" +
    "\002\000\006\003\255\045\254\001\002\000\004\050\uffdf" +
    "\001\002\000\004\050\uffdd\001\002\000\004\046\274\001" +
    "\002\000\004\013\266\001\002\000\004\004\267\001\002" +
    "\000\004\006\270\001\002\000\004\004\271\001\002\000" +
    "\004\034\272\001\002\000\004\004\273\001\002\000\006" +
    "\046\uff8e\062\uff8e\001\002\000\006\050\uffde\062\261\001" +
    "\002\000\004\050\uffe0\001\002\000\006\003\307\045\310" +
    "\001\002\000\004\010\300\001\002\000\004\045\301\001" +
    "\002\000\004\004\302\001\002\000\004\100\303\001\002" +
    "\000\004\004\304\001\002\000\004\006\305\001\002\000" +
    "\004\047\306\001\002\000\006\003\uffc5\045\uffc5\001\002" +
    "\000\006\050\uffce\062\340\001\002\000\006\003\323\004" +
    "\322\001\002\000\004\050\312\001\002\000\004\046\313" +
    "\001\002\000\004\011\uffeb\001\002\000\006\046\uffbc\062" +
    "\uffbc\001\002\000\006\046\uffbb\062\uffbb\001\002\000\006" +
    "\046\uffbe\062\uffbe\001\002\000\006\046\uffbd\062\uffbd\001" +
    "\002\000\006\046\uffba\062\uffba\001\002\000\006\046\uffb7" +
    "\062\uffb7\001\002\000\032\036\357\056\355\065\354\066" +
    "\356\067\347\070\351\071\346\072\352\073\345\074\344" +
    "\075\353\076\350\001\002\000\006\046\uffc0\062\334\001" +
    "\002\000\004\046\337\001\002\000\006\046\uffb5\062\uffb5" +
    "\001\002\000\006\046\uffb9\062\uffb9\001\002\000\006\046" +
    "\uffb8\062\uffb8\001\002\000\006\046\uffb6\062\uffb6\001\002" +
    "\000\006\046\uffb3\062\uffb3\001\002\000\006\046\uffb4\062" +
    "\uffb4\001\002\000\006\046\uffc0\062\334\001\002\000\006" +
    "\003\323\004\322\001\002\000\004\046\uffc2\001\002\000" +
    "\004\046\uffbf\001\002\000\006\050\uffce\062\340\001\002" +
    "\000\006\003\307\045\310\001\002\000\004\050\uffd0\001" +
    "\002\000\004\050\uffcd\001\002\000\004\046\uffc1\001\002" +
    "\000\004\004\u012f\001\002\000\004\004\u0127\001\002\000" +
    "\004\004\u0122\001\002\000\004\004\u011d\001\002\000\004" +
    "\004\u0118\001\002\000\004\004\u0113\001\002\000\004\004" +
    "\u010e\001\002\000\004\004\u0109\001\002\000\004\004\u0104" +
    "\001\002\000\004\004\377\001\002\000\004\004\365\001" +
    "\002\000\004\004\360\001\002\000\004\006\361\001\002" +
    "\000\004\004\362\001\002\000\004\063\363\001\002\000" +
    "\004\004\364\001\002\000\006\046\uff86\062\uff86\001\002" +
    "\000\004\006\366\001\002\000\004\004\367\001\002\000" +
    "\014\104\373\105\372\106\374\107\370\110\371\001\002" +
    "\000\004\004\uff7e\001\002\000\004\004\uff7d\001\002\000" +
    "\004\004\uff80\001\002\000\004\004\uff81\001\002\000\004" +
    "\004\uff7f\001\002\000\004\004\376\001\002\000\006\046" +
    "\uff7c\062\uff7c\001\002\000\004\006\u0100\001\002\000\004" +
    "\004\u0101\001\002\000\004\034\u0102\001\002\000\004\004" +
    "\u0103\001\002\000\006\046\uff83\062\uff83\001\002\000\004" +
    "\006\u0105\001\002\000\004\004\u0106\001\002\000\004\063" +
    "\u0107\001\002\000\004\004\u0108\001\002\000\006\046\uff82" +
    "\062\uff82\001\002\000\004\006\u010a\001\002\000\004\004" +
    "\u010b\001\002\000\004\057\u010c\001\002\000\004\004\u010d" +
    "\001\002\000\006\046\uff6c\062\uff6c\001\002\000\004\006" +
    "\u010f\001\002\000\004\004\u0110\001\002\000\004\030\u0111" +
    "\001\002\000\004\004\u0112\001\002\000\006\046\uff78\062" +
    "\uff78\001\002\000\004\006\u0114\001\002\000\004\004\u0115" +
    "\001\002\000\012\026\137\034\140\057\136\063\135\001" +
    "\002\000\004\004\u0117\001\002\000\006\046\uff7a\062\uff7a" +
    "\001\002\000\004\006\u0119\001\002\000\004\004\u011a\001" +
    "\002\000\004\064\u011b\001\002\000\004\004\u011c\001\002" +
    "\000\006\046\uff6b\062\uff6b\001\002\000\004\006\u011e\001" +
    "\002\000\004\004\u011f\001\002\000\004\057\u0120\001\002" +
    "\000\004\004\u0121\001\002\000\006\046\uff7b\062\uff7b\001" +
    "\002\000\004\006\u0123\001\002\000\004\004\u0124\001\002" +
    "\000\004\027\u0125\001\002\000\004\004\u0126\001\002\000" +
    "\006\046\uff79\062\uff79\001\002\000\004\006\u0128\001\002" +
    "\000\004\004\u0129\001\002\000\012\026\137\034\140\057" +
    "\136\063\135\001\002\000\006\004\u012d\103\u012c\001\002" +
    "\000\006\004\uff75\103\uff75\001\002\000\012\026\137\034" +
    "\140\057\136\063\135\001\002\000\006\046\uff77\062\uff77" +
    "\001\002\000\006\004\uff76\103\uff76\001\002\000\004\006" +
    "\u0130\001\002\000\004\004\u0131\001\002\000\004\057\u0132" +
    "\001\002\000\004\004\u0133\001\002\000\006\046\uff6d\062" +
    "\uff6d\001\002\000\004\050\uffcf\001\002\000\006\003\u0140" +
    "\045\u013f\001\002\000\004\010\u0137\001\002\000\004\045" +
    "\u0138\001\002\000\004\004\u0139\001\002\000\004\054\u013a" +
    "\001\002\000\004\004\u013b\001\002\000\004\006\u013c\001" +
    "\002\000\004\047\u013d\001\002\000\006\003\uffc6\045\uffc6" +
    "\001\002\000\004\050\u0164\001\002\000\006\003\u0146\004" +
    "\u014a\001\002\000\006\050\uffd2\062\u0141\001\002\000\006" +
    "\003\u0140\045\u013f\001\002\000\004\050\uffd3\001\002\000" +
    "\004\050\uffd1\001\002\000\006\046\uff93\062\uff93\001\002" +
    "\000\006\046\uff92\062\uff92\001\002\000\006\046\uff97\062" +
    "\u0160\001\002\000\006\046\uff97\062\u0160\001\002\000\006" +
    "\046\uff94\062\uff94\001\002\000\004\046\u015e\001\002\000" +
    "\012\036\357\037\u014c\040\u014d\041\u014e\001\002\000\006" +
    "\046\uff95\062\uff95\001\002\000\004\004\u0159\001\002\000" +
    "\004\004\u0154\001\002\000\004\004\u014f\001\002\000\004" +
    "\006\u0150\001\002\000\004\004\u0151\001\002\000\004\043" +
    "\u0152\001\002\000\004\004\u0153\001\002\000\006\046\uff91" +
    "\062\uff91\001\002\000\004\006\u0155\001\002\000\004\004" +
    "\u0156\001\002\000\004\034\u0157\001\002\000\004\004\u0158" +
    "\001\002\000\006\046\uff84\062\uff84\001\002\000\004\006" +
    "\u015a\001\002\000\004\004\u015b\001\002\000\012\026\137" +
    "\034\140\057\136\063\135\001\002\000\004\004\u015d\001" +
    "\002\000\006\046\uff85\062\uff85\001\002\000\006\050\uffd2" +
    "\062\u0141\001\002\000\004\050\uffd4\001\002\000\006\003" +
    "\u0146\004\u014a\001\002\000\004\046\uff99\001\002\000\004" +
    "\046\uff96\001\002\000\004\046\uff98\001\002\000\004\046" +
    "\u0165\001\002\000\004\011\uffee\001\002\000\006\003\u0169" +
    "\045\u0168\001\002\000\004\050\u0189\001\002\000\006\003" +
    "\u0174\004\u0173\001\002\000\006\050\uffda\062\u016a\001\002" +
    "\000\006\003\u0169\045\u0168\001\002\000\004\050\uffdb\001" +
    "\002\000\004\050\uffd9\001\002\000\006\046\uff9b\062\uff9b" +
    "\001\002\000\006\046\uff9a\062\uff9a\001\002\000\006\046" +
    "\uff9e\062\uff9e\001\002\000\006\046\uff9f\062\uff9f\001\002" +
    "\000\006\046\uffa1\062\u0177\001\002\000\004\046\u0186\001" +
    "\002\000\016\021\u017b\036\357\037\u014c\040\u014d\041\u014e" +
    "\042\u017a\001\002\000\006\046\uffa1\062\u0177\001\002\000" +
    "\006\046\uff9d\062\uff9d\001\002\000\006\046\uff9c\062\uff9c" +
    "\001\002\000\006\003\u0174\004\u0173\001\002\000\004\046" +
    "\uffa2\001\002\000\004\046\uffa0\001\002\000\004\004\u0181" +
    "\001\002\000\004\004\u017c\001\002\000\004\006\u017d\001" +
    "\002\000\004\004\u017e\001\002\000\004\035\u017f\001\002" +
    "\000\004\004\u0180\001\002\000\006\046\uff88\062\uff88\001" +
    "\002\000\004\006\u0182\001\002\000\004\004\u0183\001\002" +
    "\000\004\034\u0184\001\002\000\004\004\u0185\001\002\000" +
    "\006\046\uff8d\062\uff8d\001\002\000\006\050\uffda\062\u016a" +
    "\001\002\000\004\050\uffdc\001\002\000\004\046\uffa3\001" +
    "\002\000\004\046\u018a\001\002\000\004\011\ufff0\001\002" +
    "\000\006\003\u018d\045\u018c\001\002\000\004\004\u0196\001" +
    "\002\000\006\050\uffca\062\u0191\001\002\000\004\050\u018f" +
    "\001\002\000\004\046\u0190\001\002\000\004\011\uffec\001" +
    "\002\000\006\003\u018d\045\u018c\001\002\000\004\050\uffcb" +
    "\001\002\000\004\050\uffc9\001\002\000\004\046\u019e\001" +
    "\002\000\004\062\u019b\001\002\000\006\036\357\065\354" +
    "\001\002\000\004\062\u0198\001\002\000\004\004\u019a\001" +
    "\002\000\004\046\uffc4\001\002\000\004\065\354\001\002" +
    "\000\004\004\u019c\001\002\000\004\036\357\001\002\000" +
    "\004\046\uffc3\001\002\000\006\050\uffca\062\u0191\001\002" +
    "\000\004\050\uffcc\001\002\000\006\003\307\045\310\001" +
    "\002\000\004\050\u01a2\001\002\000\004\046\u01a3\001\002" +
    "\000\004\011\uffed\001\002\000\006\003\u01a6\045\u01a5\001" +
    "\002\000\006\003\u01ae\004\u01b2\001\002\000\006\050\uffe6" +
    "\062\u01aa\001\002\000\004\050\u01a8\001\002\000\004\046" +
    "\u01a9\001\002\000\004\011\ufff4\001\002\000\006\003\u01a6" +
    "\045\u01a5\001\002\000\004\050\uffe7\001\002\000\004\050" +
    "\uffe5\001\002\000\006\046\uffb0\062\u01bc\001\002\000\006" +
    "\046\uffb0\062\u01bc\001\002\000\006\046\uffae\062\uffae\001" +
    "\002\000\006\046\uffad\062\uffad\001\002\000\006\046\uffac" +
    "\062\uffac\001\002\000\010\013\266\020\u01b6\021\u017b\001" +
    "\002\000\004\046\u01b4\001\002\000\006\050\uffe6\062\u01aa" +
    "\001\002\000\004\050\uffe8\001\002\000\004\004\u01b7\001" +
    "\002\000\004\006\u01b8\001\002\000\004\004\u01b9\001\002" +
    "\000\010\034\241\057\237\063\236\001\002\000\004\004" +
    "\u01bb\001\002\000\006\046\uff8a\062\uff8a\001\002\000\006" +
    "\003\u01ae\004\u01b2\001\002\000\004\046\uffb1\001\002\000" +
    "\004\046\uffaf\001\002\000\004\046\uffb2\001\002\000\006" +
    "\003\u01c2\045\u01c3\001\002\000\004\050\u01ca\001\002\000" +
    "\006\050\uffd6\062\u01c6\001\002\000\004\004\u019c\001\002" +
    "\000\004\046\u01c5\001\002\000\006\050\uffd6\062\u01c6\001" +
    "\002\000\006\003\u01c2\045\u01c3\001\002\000\004\050\uffd8" +
    "\001\002\000\004\050\uffd5\001\002\000\004\050\uffd7\001" +
    "\002\000\004\046\u01cb\001\002\000\004\011\uffef\001\002" +
    "\000\004\045\u01cd\001\002\000\004\004\u01d1\001\002\000" +
    "\004\062\u01d7\001\002\000\004\062\u01d5\001\002\000\004" +
    "\046\u01d2\001\002\000\006\013\266\020\u01b6\001\002\000" +
    "\004\050\u01d3\001\002\000\004\046\u01d4\001\002\000\004" +
    "\011\ufff1\001\002\000\004\004\265\001\002\000\004\046" +
    "\uff8f\001\002\000\004\004\u01d9\001\002\000\004\046\uff90" +
    "\001\002\000\004\020\u01b6\001\002\000\006\003\u01db\005" +
    "\u01de\001\002\000\004\005\u01de\001\002\000\004\005\u01e6" +
    "\001\002\000\004\005\ufff7\001\002\000\004\060\u01df\001" +
    "\002\000\004\004\u01e0\001\002\000\032\003\027\012\017" +
    "\014\026\023\025\024\015\025\022\044\016\053\023\055" +
    "\020\077\021\101\024\111\031\001\002\000\004\011\u01e2" +
    "\001\002\000\004\061\u01e3\001\002\000\004\007\u01e4\001" +
    "\002\000\004\005\ufff5\001\002\000\004\005\ufff8\001\002" +
    "\000\006\052\u01e7\060\u01df\001\002\000\004\010\u01e8\001" +
    "\002\000\004\002\ufffb\001\002\000\004\005\ufff6\001\002" +
    "\000\004\002\uffff\001\002\000\004\002\ufffd\001\002\000" +
    "\010\003\010\051\011\060\012\001\002\000\004\002\ufffc" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01eb\000\004\002\005\001\001\000\006\077\u01ea\100" +
    "\u01e9\001\001\000\004\077\012\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\027\001\001" +
    "\000\004\007\u01cb\001\001\000\004\023\u01bf\001\001\000" +
    "\004\007\u01a3\001\001\000\004\035\u019f\001\001\000\004" +
    "\035\u018a\001\001\000\004\023\u0165\001\001\000\004\023" +
    "\u0134\001\001\000\004\035\275\001\001\000\004\007\252" +
    "\001\001\000\004\007\160\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\065\031\001\001\000\004\066\044" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\070\054\072" +
    "\052\001\001\000\004\067\050\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\066\051\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\071\153" +
    "\001\001\000\004\071\151\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\122" +
    "\065\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\073\071\074\073\122\070\001\001\000" +
    "\004\075\145\001\001\000\002\001\001\000\004\075\075" +
    "\001\001\000\002\001\001\000\006\074\076\122\070\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\076\101" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\122\104\124\110\127\107\001\001\000\006" +
    "\120\125\123\127\001\001\000\010\122\104\124\110\127" +
    "\120\001\001\000\010\122\104\124\110\127\116\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\122\104\124" +
    "\110\127\115\001\001\000\002\001\001\000\010\122\104" +
    "\124\110\127\114\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\125\143\001\001\000\004\126\132" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\117" +
    "\140\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\067\147\001\001\000\002\001\001\000\006\070\152" +
    "\072\052\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\056\173\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\015\205\016\210\017\201" +
    "\020\204\021\206\022\202\001\001\000\004\103\177\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\056\200\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\113\251" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\113\212\001\001\000\016" +
    "\015\213\016\210\017\201\020\204\021\206\022\202\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\116\237\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\103\250\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\057\255\001\001\000\004\010\263" +
    "\001\001\000\004\104\261\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\057\262\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\104\274\001\001\000\002\001\001\000\004" +
    "\063\310\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\110" +
    "\u0133\001\001\000\036\026\315\036\323\037\332\040\313" +
    "\041\316\042\314\043\317\044\325\045\326\046\327\047" +
    "\320\051\324\052\331\053\330\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\112" +
    "\342\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\112\334\001\001\000\036" +
    "\026\315\036\335\037\332\040\313\041\316\042\314\043" +
    "\317\044\325\045\326\046\327\047\320\051\324\052\331" +
    "\053\330\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\110\340\001\001\000\004\063\341\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\121\374\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\117\u0115\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\050\u0129\117\u012a\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\117\u012d\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\062\u013d\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\026\u014a" +
    "\027\u0147\030\u0143\032\u0144\033\u0148\034\u0146\001\001\000" +
    "\004\107\u0141\001\001\000\004\062\u0142\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\115\u0162\001\001\000\004\115\u0160\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\117\u015b\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\107\u015e\001\001\000\002\001\001\000\016\026\u014a" +
    "\027\u0147\030\u0143\032\u0144\033\u0161\034\u0146\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\060\u0166\001\001\000" +
    "\002\001\001\000\022\013\u016d\024\u0171\025\u0170\026\u016f" +
    "\027\u016e\030\u0174\031\u016c\032\u0175\001\001\000\004\105" +
    "\u016a\001\001\000\004\060\u016b\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\114\u0187\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\114\u0177\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\013\u016d" +
    "\024\u0178\025\u0170\026\u016f\027\u016e\030\u0174\031\u016c\032" +
    "\u0175\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\105\u0186\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\064\u018d\001\001\000\010\026\u0196" +
    "\041\u0194\054\u0193\001\001\000\004\111\u0191\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\064\u0192\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\041\u0198\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\026\u019c\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\111\u019e\001\001\000\002\001" +
    "\001\000\004\063\u01a0\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\055\u01a6\001\001\000" +
    "\014\004\u01b2\010\u01ae\011\u01ac\012\u01af\013\u01b0\001\001" +
    "\000\004\101\u01aa\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\055\u01ab\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\102\u01be\001\001\000" +
    "\004\102\u01bc\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\101\u01b4\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\116\u01b9\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\004\u01bd" +
    "\010\u01ae\011\u01ac\012\u01af\013\u01b0\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\061\u01c0" +
    "\001\001\000\002\001\001\000\004\106\u01c8\001\001\000" +
    "\004\026\u01c3\001\001\000\002\001\001\000\004\106\u01c6" +
    "\001\001\000\004\061\u01c7\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\010\u01cd\012\u01ce\014" +
    "\u01cf\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\u01d5\001\001\000\002" +
    "\001\001\000\004\012\u01d7\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\003\u01dc\005\u01db\001\001\000\004" +
    "\003\u01e8\001\001\000\004\003\u01e4\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\u01e0" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\077\u01ec\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol sym;
    
    public Solicitud temporal = new Solicitud();
    public Map<String,String> lista_temporal = new HashMap<>();
    public Map<String,String> res_temp = new HashMap<>();
    public ArrayList<Consulta> lista_consultas = new ArrayList<>();
    public ArrayList<Solicitud> lista_solicitudes = new ArrayList<>();
    public ArrayList<Errores> errores = new ArrayList<>();
    public Usuario logeado = new Usuario();
    public Usuario retorno = new Usuario();
    public Consulta cons_temp = new Consulta();
    public String armando = "";
    public boolean error = false;

    public Symbol getS(){
        return this.sym;
    }

    public void agregarParametroAMap(String key, String valor){
        if (lista_temporal.containsKey(key)){
            temporal.setTieneErrores(true);
            temporal.setDescripcion_error(temporal.getDescripcion_error()+"Existe ya un parametro para "+key+" y se está intentando enviar otro: "+valor+"\n");
            lista_temporal.put("ERROR","PARAMETROS REPETIDOS");
            String tem = lista_temporal.get(key);
            if (lista_temporal.get(key).equals("OPCIONES")){
                tem += "\t"+valor;
            } else {
                tem += "\n"+valor;
            }
            lista_temporal.put(key,tem);
        } else {
            lista_temporal.put(key,valor);
        }
    }

    public void imp(String texto){
        System.out.println(texto);
    }

    public void report_fatal_error(String message, Object info) {
        System.out.println("reportfatal "+message+info);
    }
    public void report_fatal_error(Symbol cur) {
        System.out.println("unrecovered_syntax_error");
    }

    public void syntax_error(Symbol cur_token) {
        error = true;
        ArrayList<String> esperados = new ArrayList<>();
        for (int i = 0; i < expected_token_ids().size(); i++){
            if (!symbl_name_from_id(expected_token_ids().get(i)).equals("error")){
                esperados.add(symbl_name_from_id(expected_token_ids().get(i)));
            }
        }
        String nom = symbl_name_from_id(cur_token.sym);
        String tip = "Lexico";
        if (!nom.equals("ERRORLEX")){
            tip = "Sintactico";
        }
        errores.add(new Errores(esperados,cur_token,nom,tip));
    }

    protected int error_sync_size() {
        return 1;
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= INICIOE partida 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= error posibilidad 
            {
              Object RESULT =null;
		 imp("hasta encontrar"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // posibilidad ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("posibilidad",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // posibilidad ::= partida 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("posibilidad",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // posibilidad ::= INICIOE partida 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("posibilidad",62, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // partida ::= SOLICITUDESP MAYORQ bloque_solicitudes INICIOE FINSOLICITUDES MAYORQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("partida",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // partida ::= INICIOS COMILLAS tipo_solicitud MENORQ FINS FINE 
            {
              Object RESULT =null;
		lista_solicitudes.add(temporal); temporal = new Solicitud();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("partida",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // partida ::= error 
            {
              Object RESULT =null;
		 imp("partida");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("partida",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // bloque_solicitudes ::= bloque_solicitudes solicitud 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_solicitudes",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // bloque_solicitudes ::= solicitud 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_solicitudes",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // bloque_solicitudes ::= error solicitud 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_solicitudes",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // solicitud ::= INICIOE INICIOS COMILLAS tipo_solicitud MENORQ FINS FINE 
            {
              Object RESULT =null;
		lista_solicitudes.add(temporal); temporal = new Solicitud();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("solicitud",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // tipo_solicitud ::= CREARU inicio_param_usuario bloque1 CORCHETEC LLAVEC 
            {
              Object RESULT =null;
		temporal.setTipo("CREAR_USUARIO");  logeado = new Usuario();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_solicitud",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // tipo_solicitud ::= MODIFICARU inicio_param_usuario bloque2 CORCHETEC LLAVEC 
            {
              Object RESULT =null;
		temporal.setTipo("MODIFICAR_USUARIO");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_solicitud",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // tipo_solicitud ::= ELIMINARU inicio_param_usuario bloque3 CORCHETEC LLAVEC 
            {
              Object RESULT =null;
		temporal.setTipo("ELIMINAR_USUARIO");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_solicitud",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // tipo_solicitud ::= LOGINU inicio_param_usuario LLAVEA parametro_login LLAVEC CORCHETEC LLAVEC 
            {
              Object RESULT =null;
		retorno = logeado; logeado = new Usuario(); temporal.setTipo("LOGIN");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_solicitud",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // tipo_solicitud ::= NUEVOFP inicio_param_formulario bloque4 CORCHETEC LLAVEC 
            {
              Object RESULT =null;
		temporal.setTipo("NUEVO_FORMULARIO");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_solicitud",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // tipo_solicitud ::= ELIMINARF inicio_param_formulario bloque5 CORCHETEC LLAVEC 
            {
              Object RESULT =null;
		temporal.setTipo("ELIMINAR_FORMULARIO");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_solicitud",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // tipo_solicitud ::= MODIFICARF inicio_param_formulario bloque6 CORCHETEC LLAVEC 
            {
              Object RESULT =null;
		temporal.setTipo("MODIFICAR_FORMULARIO");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_solicitud",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // tipo_solicitud ::= AGREGARC inicio_param_componente bloque7 CORCHETEC LLAVEC 
            {
              Object RESULT =null;
		temporal.setTipo("AGREGAR_COMPONENTE");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_solicitud",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // tipo_solicitud ::= ELIMINARC inicio_param_componente bloque8 CORCHETEC LLAVEC 
            {
              Object RESULT =null;
		temporal.setTipo("ELIMINAR_COMPONENTE");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_solicitud",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // tipo_solicitud ::= MODIFICARC inicio_param_componente bloque7 CORCHETEC LLAVEC 
            {
              Object RESULT =null;
		temporal.setTipo("MODIFICAR_COMPONENTE");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_solicitud",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // tipo_solicitud ::= CONSULTARD inicio_param_datos bloque9 CORCHETEC LLAVEC 
            {
              Object RESULT =null;
		temporal.setTipo("CONSULTAR_DATOS");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_solicitud",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // tipo_solicitud ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_solicitud",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // bloque1 ::= LLAVEA bloque_usuario1 LLAVEC bloque1P 
            {
              Object RESULT =null;
		temporal.getCuantas().add(lista_temporal); lista_temporal = new HashMap<>(); temporal.setTieneErrores(false);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque1",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // bloque1 ::= error bloque1P 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque1",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // bloque1P ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque1P",63, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // bloque1P ::= COMA bloque1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque1P",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // bloque2 ::= LLAVEA bloque_usuario2 LLAVEC bloque2P 
            {
              Object RESULT =null;
		temporal.getCuantas().add(lista_temporal); lista_temporal = new HashMap<>(); temporal.setTieneErrores(false);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque2",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // bloque2 ::= error bloque2P 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque2",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // bloque2P ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque2P",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // bloque2P ::= COMA bloque2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque2P",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // bloque3 ::= LLAVEA parametro_usuario LLAVEC bloque3P 
            {
              Object RESULT =null;
		temporal.getCuantas().add(lista_temporal); lista_temporal = new HashMap<>(); temporal.setTieneErrores(false);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque3",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // bloque3 ::= error bloque3P 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque3",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // bloque3P ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque3P",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // bloque3P ::= COMA bloque3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque3P",66, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // bloque4 ::= LLAVEA bloque_formulario1 LLAVEC bloque4P 
            {
              Object RESULT =null;
		temporal.getCuantas().add(lista_temporal); lista_temporal = new HashMap<>(); temporal.setTieneErrores(false);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque4",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // bloque4 ::= error bloque4P 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque4",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // bloque4P ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque4P",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // bloque4P ::= COMA bloque4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque4P",67, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // bloque5 ::= LLAVEA parametro_id LLAVEC bloque5P 
            {
              Object RESULT =null;
		temporal.getCuantas().add(lista_temporal); lista_temporal = new HashMap<>(); temporal.setTieneErrores(false);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque5",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // bloque5 ::= error bloque5P 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque5",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // bloque5P ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque5P",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // bloque5P ::= COMA bloque5 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque5P",68, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // bloque6 ::= LLAVEA bloque_formulario2 LLAVEC bloque6P 
            {
              Object RESULT =null;
		temporal.getCuantas().add(lista_temporal); lista_temporal = new HashMap<>(); temporal.setTieneErrores(false);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque6",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // bloque6 ::= error bloque6P 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque6",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // bloque6P ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque6P",69, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // bloque6P ::= COMA bloque6 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque6P",69, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // bloque7 ::= LLAVEA bloque_componente1 LLAVEC bloque7P 
            {
              Object RESULT =null;
		temporal.getCuantas().add(lista_temporal); lista_temporal = new HashMap<>(); temporal.setTieneErrores(false);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque7",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // bloque7 ::= error bloque7P 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque7",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // bloque7P ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque7P",70, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // bloque7P ::= COMA bloque7 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque7P",70, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // bloque8 ::= LLAVEA bloque_eliminar LLAVEC bloque8P 
            {
              Object RESULT =null;
		temporal.getCuantas().add(lista_temporal); lista_temporal = new HashMap<>(); temporal.setTieneErrores(false);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque8",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // bloque8 ::= error bloque8P 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque8",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // bloque8P ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque8P",71, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // bloque8P ::= COMA bloque8 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque8P",71, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // inicio_param_usuario ::= COMILLAS MAYORQ LLAVEA COMILLAS CREDENCIALES COMILLAS DOSP CORCHETEA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio_param_usuario",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // inicio_param_usuario ::= error 
            {
              Object RESULT =null;
		 imp("parametro usuario"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio_param_usuario",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // inicio_param_formulario ::= COMILLAS MAYORQ LLAVEA COMILLAS PARAMF COMILLAS DOSP CORCHETEA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio_param_formulario",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // inicio_param_componente ::= COMILLAS MAYORQ LLAVEA COMILLAS PARAMC COMILLAS DOSP CORCHETEA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio_param_componente",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // bloque_eliminar ::= parametro_id COMA parametro_formulario 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_eliminar",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // bloque_eliminar ::= parametro_formulario COMA parametro_id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_eliminar",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // bloque_componente1 ::= parametros_agregar bloque_componente1P 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_componente1",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // bloque_componente1 ::= error bloque_componente1P 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_componente1",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // bloque_componente1P ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_componente1P",72, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // bloque_componente1P ::= COMA bloque_componente1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_componente1P",72, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // parametros_agregar ::= parametro_id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_agregar",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // parametros_agregar ::= parametro_formulario 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_agregar",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // parametros_agregar ::= parametro_nombre_campo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_agregar",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // parametros_agregar ::= parametro_clase 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_agregar",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // parametros_agregar ::= parametro_indice 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_agregar",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // parametros_agregar ::= parametro_texto 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_agregar",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // parametros_agregar ::= parametro_alineacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_agregar",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // parametros_agregar ::= parametro_opciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_agregar",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // parametros_agregar ::= parametro_requerido 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_agregar",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // parametros_agregar ::= parametro_filas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_agregar",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // parametros_agregar ::= parametro_columnas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_agregar",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // parametros_agregar ::= parametro_url 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_agregar",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // bloque_usuario1 ::= parametros_crear bloque_usuario1P 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_usuario1",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // bloque_usuario1 ::= error bloque_usuario1P 
            {
              Object RESULT =null;
		 imp("falla acá");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_usuario1",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // bloque_usuario1P ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_usuario1P",64, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // bloque_usuario1P ::= COMA bloque_usuario1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_usuario1P",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // parametros_crear ::= parametro_usuario 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_crear",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // parametros_crear ::= parametro_contra 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_crear",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // parametros_crear ::= parametro_fecha 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_crear",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // bloque_usuario2 ::= parametros_modificarU bloque_usuario2P 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_usuario2",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // bloque_usuario2 ::= error bloque_usuario2P 
            {
              Object RESULT =null;
		 imp("falla acá");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_usuario2",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // bloque_usuario2P ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_usuario2P",73, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // bloque_usuario2P ::= COMA bloque_usuario2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_usuario2P",73, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // parametros_modificarU ::= parametro_usuario_antiguo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_modificarU",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // parametros_modificarU ::= parametro_usuario_nuevo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_modificarU",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // parametros_modificarU ::= parametro_contra_nueva 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_modificarU",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // parametros_modificarU ::= parametro_fecha_modificacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_modificarU",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // bloque_formulario1 ::= parametros_formulario bloque_formulario1P 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_formulario1",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // bloque_formulario1 ::= error bloque_formulario1P 
            {
              Object RESULT =null;
		 imp("falla acá");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_formulario1",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // bloque_formulario1P ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_formulario1P",74, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // bloque_formulario1P ::= COMA bloque_formulario1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_formulario1P",74, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // parametros_formulario ::= parametro_id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_formulario",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // parametros_formulario ::= parametro_titulo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_formulario",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // parametros_formulario ::= parametro_nombre 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_formulario",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // parametros_formulario ::= parametro_tema 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_formulario",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // parametros_formulario ::= parametro_usuario_creacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_formulario",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // parametros_formulario ::= parametro_fecha 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_formulario",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // bloque_formulario2 ::= parametros_formulario2 bloque_formulario2P 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_formulario2",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // bloque_formulario2 ::= error bloque_formulario2P 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_formulario2",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // bloque_formulario2P ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_formulario2P",75, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // bloque_formulario2P ::= COMA bloque_formulario2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_formulario2P",75, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // parametros_formulario2 ::= parametro_id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_formulario2",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // parametros_formulario2 ::= parametro_titulo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_formulario2",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // parametros_formulario2 ::= parametro_nombre 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_formulario2",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // parametros_formulario2 ::= parametro_tema 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_formulario2",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // parametro_tema ::= COMILLAS TEMAP COMILLAS DOSP COMILLAS TEMA COMILLAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		agregarParametroAMap("TEMA",e1.toString());System.out.println("ingresado tema"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_tema",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // parametro_login ::= parametro_usuario COMA parametro_contra 
            {
              Object RESULT =null;
		temporal.getCuantas().add(lista_temporal); lista_temporal = new HashMap<>(); temporal.setTieneErrores(false);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_login",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // parametro_login ::= parametro_contra COMA parametro_usuario 
            {
              Object RESULT =null;
		temporal.getCuantas().add(lista_temporal); lista_temporal = new HashMap<>(); temporal.setTieneErrores(false);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_login",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // parametro_usuario ::= COMILLAS USUARIOP COMILLAS DOSP COMILLAS USUARIO COMILLAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		agregarParametroAMap("USUARIO",e1.toString()); logeado.setUsuario(e1.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_usuario",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // parametro_usuario_creacion ::= COMILLAS USUARIOCP COMILLAS DOSP COMILLAS USUARIO COMILLAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		agregarParametroAMap("USUARIO_CREACION",e1.toString()); System.out.println("ingresado usuario creacion");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_usuario_creacion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // parametro_usuario_antiguo ::= COMILLAS USUARIOAP COMILLAS DOSP COMILLAS USUARIO COMILLAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		agregarParametroAMap("USUARIO_ANTIGUO",e1.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_usuario_antiguo",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // parametro_usuario_nuevo ::= COMILLAS USUARIONP COMILLAS DOSP COMILLAS USUARIO COMILLAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		agregarParametroAMap("USUARIO_NUEVO",e1.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_usuario_nuevo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // parametro_contra ::= COMILLAS CONTRAP COMILLAS DOSP COMILLAS tipo_palabra COMILLAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		agregarParametroAMap("CONTRA",e1.toString()); logeado.setPassword(e1.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_contra",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // parametro_contra_nueva ::= COMILLAS NUEVOP COMILLAS DOSP COMILLAS tipo_palabra COMILLAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		agregarParametroAMap("CONTRA_NUEVA",e1.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_contra_nueva",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // parametro_fecha ::= COMILLAS FECHACP COMILLAS DOSP COMILLAS FECHA COMILLAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		agregarParametroAMap("FECHA",e1.toString());System.out.println("ingresado usuario creacion");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_fecha",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // parametro_fecha_modificacion ::= COMILLAS FECHAMP COMILLAS DOSP COMILLAS FECHA COMILLAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		agregarParametroAMap("FECHA_MODIFICACION",e1.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_fecha_modificacion",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // parametro_id ::= COMILLAS IDP COMILLAS DOSP COMILLAS ID COMILLAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		agregarParametroAMap("ID",e1.toString()); System.out.println("ingresado id");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_id",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // parametro_titulo ::= COMILLAS TITULOP COMILLAS DOSP COMILLAS tipo_opcion COMILLAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		agregarParametroAMap("TITULO",e1.toString()); System.out.println("ingresado titulo");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_titulo",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // parametro_nombre ::= COMILLAS NOMBREP COMILLAS DOSP COMILLAS USUARIO COMILLAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		agregarParametroAMap("NOMBRE",e1.toString()); System.out.println("ingresado nombre");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_nombre",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // parametro_nombre_campo ::= COMILLAS NOMBREC COMILLAS DOSP COMILLAS USUARIO COMILLAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		agregarParametroAMap("NOMBRE_CAMPO",e1.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_nombre_campo",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // parametro_formulario ::= COMILLAS FORMULARIOC COMILLAS DOSP COMILLAS ID COMILLAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		agregarParametroAMap("FORMULARIO",e1.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_formulario",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // tipos_de_clases ::= CLASENORMAL 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e1.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_de_clases",79, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // tipos_de_clases ::= CLASEAREA 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e1.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_de_clases",79, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // tipos_de_clases ::= CLASEOPCIONES 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e1.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_de_clases",79, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // tipos_de_clases ::= CLASEIMAGEN 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e1.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_de_clases",79, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // tipos_de_clases ::= CLASEBOTON 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e1.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_de_clases",79, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // parametro_clase ::= COMILLAS CLASE COMILLAS DOSP COMILLAS tipos_de_clases COMILLAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		agregarParametroAMap("CLASE",e1.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_clase",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // parametro_indice ::= COMILLAS INDICEC COMILLAS DOSP COMILLAS NUMERO COMILLAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		agregarParametroAMap("INDICE",e1.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_indice",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // parametro_texto ::= COMILLAS TEXTOVC COMILLAS DOSP COMILLAS tipo_opcion COMILLAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		agregarParametroAMap("TEXTO_VISIBLE",e1.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_texto",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // parametro_alineacion ::= COMILLAS ALINEAC COMILLAS DOSP COMILLAS ALINEA COMILLAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		agregarParametroAMap("ALINEACION",e1.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_alineacion",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // parametro_requerido ::= COMILLAS REQUERIDO COMILLAS DOSP COMILLAS BOOL COMILLAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		agregarParametroAMap("REQUERIDO",e1.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_requerido",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // parametro_opciones ::= COMILLAS OPCIONES COMILLAS DOSP COMILLAS bloque_opciones COMILLAS 
            {
              Object RESULT =null;
		agregarParametroAMap("OPCIONES",armando); armando = "";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_opciones",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // bloque_opciones ::= bloque_opciones OR tipo_opcion 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		armando += e1.toString()+"\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_opciones",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // bloque_opciones ::= tipo_opcion 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		armando += e1.toString()+"\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_opciones",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // tipo_opcion ::= TITULO 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e1.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_opcion",77, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // tipo_opcion ::= USUARIO 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e1.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_opcion",77, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // tipo_opcion ::= ID 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e1.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_opcion",77, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // tipo_opcion ::= NUMERO 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e1.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_opcion",77, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // tipo_palabra ::= USUARIO 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e1.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_palabra",76, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // tipo_palabra ::= ID 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e1.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_palabra",76, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // tipo_palabra ::= NUMERO 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e1.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_palabra",76, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // parametro_filas ::= COMILLAS FILAS COMILLAS DOSP COMILLAS NUMERO COMILLAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		agregarParametroAMap("FILAS",e1.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_filas",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // parametro_columnas ::= COMILLAS COLUMNAS COMILLAS DOSP COMILLAS NUMERO COMILLAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		agregarParametroAMap("COLUMNAS",e1.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_columnas",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // parametro_url ::= COMILLAS URLC COMILLAS DOSP COMILLAS URL COMILLAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		agregarParametroAMap("URL",e1.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_url",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // inicio_param_datos ::= COMILLAS MAYORQ LLAVEA COMILLAS CONSULTASP COMILLAS DOSP CORCHETEA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio_param_datos",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // bloque9 ::= LLAVEA bloque_consultas LLAVEC bloque9P 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque9",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // bloque9 ::= error bloque9P 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque9",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // bloque9P ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque9P",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // bloque9P ::= COMA bloque9 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque9P",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // bloque_consultas ::= descripcion_consulta bloque_consultasP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_consultas",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // bloque_consultas ::= error bloque_consultasP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_consultas",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // bloque_consultasP ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_consultasP",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // bloque_consultasP ::= COMA bloque_consultas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_consultasP",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // descripcion_consulta ::= COMILLAS NOCONSULTA COMILLAS DOSP COMILLAS SELECT DE campo CORCHETEA nombre_campos CORCHETEC restricciones COMILLAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		 cons_temp.setNoconsulta(e1.toString()); cons_temp.setForm(e2.toString()); lista_consultas.add(cons_temp); temporal.getConsulta().add(cons_temp); cons_temp = new Consulta(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("descripcion_consulta",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // campo ::= ID 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e1.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("campo",80, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // campo ::= USUARIO 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e1.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("campo",80, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // nombre_campos ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nombre_campos",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // nombre_campos ::= campos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nombre_campos",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // campos ::= campo camposP 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 cons_temp.getCampos().add(e1.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("campos",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // campos ::= error camposP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("campos",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // camposP ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("camposP",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // camposP ::= COMA campos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("camposP",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // restricciones ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("restricciones",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // restricciones ::= WHERE CORCHETEA restriccion CORCHETEC 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Map<String,String>> e1 = (ArrayList<Map<String,String>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 cons_temp.setRestricciones(e1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("restricciones",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // restriccion ::= restriccion AND restriccion 
            {
              ArrayList<Map<String,String>> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Map<String,String>> e1 = (ArrayList<Map<String,String>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Map<String,String>> e2 = (ArrayList<Map<String,String>>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<Map<String,String>> para = new ArrayList<>(e1); Map<String,String> te = new HashMap<>(); te.put("OPLOGICO","AND"); para.add(te); para.addAll(e2); RESULT = para; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("restriccion",85, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // restriccion ::= restriccion OROP restriccion 
            {
              ArrayList<Map<String,String>> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Map<String,String>> e1 = (ArrayList<Map<String,String>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Map<String,String>> e2 = (ArrayList<Map<String,String>>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<Map<String,String>> para = new ArrayList<>(e1); Map<String,String> te = new HashMap<>(); te.put("OPLOGICO","OR"); para.add(te); para.addAll(e2); RESULT = para; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("restriccion",85, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // restriccion ::= NOT restriccion 
            {
              ArrayList<Map<String,String>> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Map<String,String>> e1 = (ArrayList<Map<String,String>>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<Map<String,String>> para = e1; para.get(para.size()-1).put("NOT","true"); RESULT = para;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("restriccion",85, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // restriccion ::= PARENTESISA restriccion PARENTESISC 
            {
              ArrayList<Map<String,String>> RESULT =null;
		 imp("condicional con parentesis"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("restriccion",85, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // restriccion ::= condicional 
            {
              ArrayList<Map<String,String>> RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Map<String,String> e2 = (Map<String,String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<Map<String,String>> para = new ArrayList<>(); para.add(e2); RESULT = para; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("restriccion",85, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // condicional ::= campo tipo_condicion 
            {
              Map<String,String> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Map<String,String> e2 = (Map<String,String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Map<String,String> para = e2; para.put("CAMPO",e1.toString());  RESULT = para;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional",82, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // tipo_condicion ::= condicion_numerica tipo_numero 
            {
              Map<String,String> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Map<String,String> e2 = (Map<String,String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Map<String,String> para = e2; para.put("OPRELACIONAL",e1.toString());  RESULT = para;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_condicion",81, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // tipo_condicion ::= IGUAL tipo_dato 
            {
              Map<String,String> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Map<String,String> e2 = (Map<String,String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Map<String,String> para = e2; para.put("OPRELACIONAL",e1.toString());  RESULT = para;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_condicion",81, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // condicion_numerica ::= MAYORIGUAL 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e1.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion_numerica",78, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // condicion_numerica ::= MENORIGUAL 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e1.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion_numerica",78, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // condicion_numerica ::= MAYORQ 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e1.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion_numerica",78, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // condicion_numerica ::= MENORQ 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e1.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion_numerica",78, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // tipo_numero ::= NUMERO 
            {
              Map<String,String> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Map<String,String> para = new HashMap<>(); para.put("TIPO","NUMERO"); para.put("DATO",e1.toString()); RESULT = para;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_numero",83, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // tipo_numero ::= DEC 
            {
              Map<String,String> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Map<String,String> para = new HashMap<>(); para.put("TIPO","DECIMAL"); para.put("DATO",e1.toString()); RESULT = para;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_numero",83, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // tipo_dato ::= NUMERO 
            {
              Map<String,String> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Map<String,String> para = new HashMap<>(); para.put("TIPO","NUMERO"); para.put("DATO",e1.toString()); RESULT = para; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",84, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // tipo_dato ::= APOSTROFE tipo_opcion APOSTROFE 
            {
              Map<String,String> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 Map<String,String> para = new HashMap<>(); para.put("TIPO","STRING"); para.put("DATO",e1.toString()); RESULT = para;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",84, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // tipo_dato ::= DEC 
            {
              Map<String,String> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Map<String,String> para = new HashMap<>(); para.put("TIPO","DECIMAL"); para.put("DATO",e1.toString()); RESULT = para;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",84, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
