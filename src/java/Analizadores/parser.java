
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.Symbol;
import POJOS.Solicitud;
import POJOS.Usuario;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\163\000\002\002\004\000\002\002\011\000\002\002" +
    "\003\000\002\005\004\000\002\005\003\000\002\003\011" +
    "\000\002\006\007\000\002\006\007\000\002\006\007\000" +
    "\002\006\011\000\002\006\007\000\002\006\007\000\002" +
    "\006\007\000\002\006\007\000\002\006\007\000\002\006" +
    "\007\000\002\055\007\000\002\055\005\000\002\056\007" +
    "\000\002\056\005\000\002\057\007\000\002\057\005\000" +
    "\002\060\007\000\002\060\005\000\002\061\007\000\002" +
    "\061\005\000\002\062\007\000\002\062\005\000\002\063" +
    "\007\000\002\063\005\000\002\064\007\000\002\064\005" +
    "\000\002\007\012\000\002\023\012\000\002\035\012\000" +
    "\002\054\005\000\002\054\005\000\002\036\005\000\002" +
    "\036\003\000\002\037\003\000\002\037\003\000\002\037" +
    "\003\000\002\037\003\000\002\037\003\000\002\037\003" +
    "\000\002\037\003\000\002\037\003\000\002\037\003\000" +
    "\002\037\003\000\002\037\003\000\002\037\003\000\002" +
    "\004\005\000\002\004\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\015\005\000\002\015\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\024\005\000\002\024\003\000\002" +
    "\025\003\000\002\025\003\000\002\025\003\000\002\025" +
    "\003\000\002\025\003\000\002\025\003\000\002\033\005" +
    "\000\002\033\003\000\002\034\003\000\002\034\003\000" +
    "\002\034\003\000\002\034\003\000\002\032\011\000\002" +
    "\014\005\000\002\014\005\000\002\010\011\000\002\031" +
    "\011\000\002\017\011\000\002\020\011\000\002\012\011" +
    "\000\002\021\011\000\002\013\011\000\002\022\011\000" +
    "\002\026\011\000\002\027\011\000\002\030\011\000\002" +
    "\040\011\000\002\041\011\000\002\067\003\000\002\067" +
    "\003\000\002\067\003\000\002\067\003\000\002\067\003" +
    "\000\002\042\011\000\002\043\011\000\002\044\011\000" +
    "\002\045\011\000\002\046\011\000\002\047\011\000\002" +
    "\050\005\000\002\050\003\000\002\066\003\000\002\066" +
    "\003\000\002\066\003\000\002\066\003\000\002\065\003" +
    "\000\002\065\003\000\002\065\003\000\002\051\011\000" +
    "\002\052\011\000\002\053\011" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0174\000\004\005\005\001\002\000\004\002\uffff\001" +
    "\002\000\006\050\010\057\011\001\002\000\004\002\007" +
    "\001\002\000\004\002\001\001\002\000\004\010\u016f\001" +
    "\002\000\004\004\012\001\002\000\026\012\014\014\024" +
    "\023\023\024\013\025\021\043\015\052\017\054\016\076" +
    "\020\100\022\001\002\000\004\004\032\001\002\000\004" +
    "\004\032\001\002\000\004\004\331\001\002\000\004\004" +
    "\142\001\002\000\004\004\331\001\002\000\004\004\142" +
    "\001\002\000\004\004\331\001\002\000\004\004\142\001" +
    "\002\000\004\004\032\001\002\000\004\004\032\001\002" +
    "\000\004\011\026\001\002\000\004\060\027\001\002\000" +
    "\004\007\030\001\002\000\006\002\ufffc\005\ufffc\001\002" +
    "\000\004\044\042\001\002\000\004\010\033\001\002\000" +
    "\004\044\034\001\002\000\004\004\035\001\002\000\004" +
    "\101\036\001\002\000\004\004\037\001\002\000\004\006" +
    "\040\001\002\000\004\046\041\001\002\000\004\044\uffe1" +
    "\001\002\000\004\004\055\001\002\000\006\047\045\061" +
    "\044\001\002\000\004\044\047\001\002\000\004\045\046" +
    "\001\002\000\004\011\ufffa\001\002\000\004\004\055\001" +
    "\002\000\006\045\uffc7\061\uffc7\001\002\000\006\045\uffc4" +
    "\061\uffc4\001\002\000\006\045\uffc6\061\uffc6\001\002\000" +
    "\006\045\113\061\112\001\002\000\006\045\uffc5\061\uffc5" +
    "\001\002\000\012\015\057\016\062\017\060\022\061\001" +
    "\002\000\006\045\uffc8\061\uffc8\001\002\000\004\004\105" +
    "\001\002\000\004\004\075\001\002\000\004\004\070\001" +
    "\002\000\004\004\063\001\002\000\004\006\064\001\002" +
    "\000\004\004\065\001\002\000\004\033\066\001\002\000" +
    "\004\004\067\001\002\000\006\045\uffaf\061\uffaf\001\002" +
    "\000\004\006\071\001\002\000\004\004\072\001\002\000" +
    "\004\034\073\001\002\000\004\004\074\001\002\000\006" +
    "\045\uffab\061\uffab\001\002\000\004\006\076\001\002\000" +
    "\004\004\077\001\002\000\010\033\103\056\101\062\100" +
    "\001\002\000\004\004\uff93\001\002\000\004\004\uff92\001" +
    "\002\000\004\004\104\001\002\000\004\004\uff94\001\002" +
    "\000\006\045\uffad\061\uffad\001\002\000\004\006\106\001" +
    "\002\000\004\004\107\001\002\000\004\033\110\001\002" +
    "\000\004\004\111\001\002\000\006\045\uffb0\061\uffb0\001" +
    "\002\000\004\004\055\001\002\000\006\047\uffef\061\uffef" +
    "\001\002\000\006\045\uffc9\061\uffc9\001\002\000\006\045" +
    "\116\061\112\001\002\000\006\047\uffee\061\uffee\001\002" +
    "\000\004\044\121\001\002\000\006\047\134\061\133\001" +
    "\002\000\004\004\123\001\002\000\004\045\132\001\002" +
    "\000\004\013\124\001\002\000\004\004\125\001\002\000" +
    "\004\006\126\001\002\000\004\004\127\001\002\000\004" +
    "\033\130\001\002\000\004\004\131\001\002\000\006\045" +
    "\uffb2\061\uffb2\001\002\000\006\047\uffec\061\uffec\001\002" +
    "\000\004\044\136\001\002\000\004\045\135\001\002\000" +
    "\004\011\ufff9\001\002\000\004\004\123\001\002\000\004" +
    "\045\140\001\002\000\006\047\uffed\061\uffed\001\002\000" +
    "\004\044\152\001\002\000\004\010\143\001\002\000\004" +
    "\044\144\001\002\000\004\004\145\001\002\000\004\077" +
    "\146\001\002\000\004\004\147\001\002\000\004\006\150" +
    "\001\002\000\004\046\151\001\002\000\004\044\uffdf\001" +
    "\002\000\004\004\166\001\002\000\006\047\155\061\154" +
    "\001\002\000\004\044\157\001\002\000\004\045\156\001" +
    "\002\000\004\011\ufff2\001\002\000\004\004\166\001\002" +
    "\000\006\045\uffd7\061\uffd7\001\002\000\006\045\uffd8\061" +
    "\uffd8\001\002\000\006\045\uffda\061\uffda\001\002\000\006" +
    "\045\uffd9\061\uffd9\001\002\000\006\045\uffd6\061\uffd6\001" +
    "\002\000\006\045\uffd3\061\uffd3\001\002\000\032\035\215" +
    "\055\213\064\212\065\214\066\205\067\210\070\203\071" +
    "\207\072\204\073\202\074\211\075\206\001\002\000\006" +
    "\045\uffd5\061\uffd5\001\002\000\006\045\uffd1\061\uffd1\001" +
    "\002\000\006\045\200\061\177\001\002\000\006\045\uffd2" +
    "\061\uffd2\001\002\000\006\045\uffd4\061\uffd4\001\002\000" +
    "\006\045\uffd0\061\uffd0\001\002\000\006\045\uffcf\061\uffcf" +
    "\001\002\000\006\045\uffdb\061\uffdb\001\002\000\004\004" +
    "\166\001\002\000\006\047\uffe5\061\uffe5\001\002\000\006" +
    "\045\uffdc\061\uffdc\001\002\000\004\004\321\001\002\000" +
    "\004\004\314\001\002\000\004\004\304\001\002\000\004" +
    "\004\277\001\002\000\004\004\272\001\002\000\004\004" +
    "\265\001\002\000\004\004\254\001\002\000\004\004\247" +
    "\001\002\000\004\004\242\001\002\000\004\004\235\001" +
    "\002\000\004\004\223\001\002\000\004\004\216\001\002" +
    "\000\004\006\217\001\002\000\004\004\220\001\002\000" +
    "\004\062\221\001\002\000\004\004\222\001\002\000\006" +
    "\045\uffaa\061\uffaa\001\002\000\004\006\224\001\002\000" +
    "\004\004\225\001\002\000\014\103\231\104\227\105\232" +
    "\106\226\107\230\001\002\000\004\004\uffa2\001\002\000" +
    "\004\004\uffa4\001\002\000\004\004\uffa1\001\002\000\004" +
    "\004\uffa5\001\002\000\004\004\uffa3\001\002\000\004\004" +
    "\234\001\002\000\006\045\uffa0\061\uffa0\001\002\000\004" +
    "\006\236\001\002\000\004\004\237\001\002\000\004\033" +
    "\240\001\002\000\004\004\241\001\002\000\006\045\uffa7" +
    "\061\uffa7\001\002\000\004\006\243\001\002\000\004\004" +
    "\244\001\002\000\004\062\245\001\002\000\004\004\246" +
    "\001\002\000\006\045\uffa6\061\uffa6\001\002\000\004\006" +
    "\250\001\002\000\004\004\251\001\002\000\004\056\252" +
    "\001\002\000\004\004\253\001\002\000\006\045\uff90\061" +
    "\uff90\001\002\000\004\006\255\001\002\000\004\004\256" +
    "\001\002\000\012\026\261\033\262\056\257\062\260\001" +
    "\002\000\006\004\uff95\102\uff95\001\002\000\006\004\uff96" +
    "\102\uff96\001\002\000\006\004\uff98\102\uff98\001\002\000" +
    "\006\004\uff97\102\uff97\001\002\000\004\004\264\001\002" +
    "\000\006\045\uff9e\061\uff9e\001\002\000\004\006\266\001" +
    "\002\000\004\004\267\001\002\000\004\030\270\001\002" +
    "\000\004\004\271\001\002\000\006\045\uff9c\061\uff9c\001" +
    "\002\000\004\006\273\001\002\000\004\004\274\001\002" +
    "\000\004\063\275\001\002\000\004\004\276\001\002\000" +
    "\006\045\uff8f\061\uff8f\001\002\000\004\006\300\001\002" +
    "\000\004\004\301\001\002\000\004\056\302\001\002\000" +
    "\004\004\303\001\002\000\006\045\uff9f\061\uff9f\001\002" +
    "\000\004\006\305\001\002\000\004\004\306\001\002\000" +
    "\012\026\261\033\262\056\257\062\260\001\002\000\006" +
    "\004\312\102\311\001\002\000\006\004\uff99\102\uff99\001" +
    "\002\000\012\026\261\033\262\056\257\062\260\001\002" +
    "\000\006\045\uff9b\061\uff9b\001\002\000\006\004\uff9a\102" +
    "\uff9a\001\002\000\004\006\315\001\002\000\004\004\316" +
    "\001\002\000\004\027\317\001\002\000\004\004\320\001" +
    "\002\000\006\045\uff9d\061\uff9d\001\002\000\004\006\322" +
    "\001\002\000\004\004\323\001\002\000\004\056\324\001" +
    "\002\000\004\004\325\001\002\000\006\045\uff91\061\uff91" +
    "\001\002\000\006\045\327\061\177\001\002\000\006\047" +
    "\uffe4\061\uffe4\001\002\000\004\044\342\001\002\000\004" +
    "\010\332\001\002\000\004\044\333\001\002\000\004\004" +
    "\334\001\002\000\004\053\335\001\002\000\004\004\336" +
    "\001\002\000\004\006\337\001\002\000\004\046\340\001" +
    "\002\000\004\044\uffe0\001\002\000\006\047\u010e\061\u010d" +
    "\001\002\000\004\004\351\001\002\000\006\045\uffbd\061" +
    "\uffbd\001\002\000\006\045\uffbc\061\uffbc\001\002\000\006" +
    "\045\uffc0\061\uffc0\001\002\000\006\045\uffc1\061\uffc1\001" +
    "\002\000\006\045\uffc2\061\uffc2\001\002\000\006\045\u010b" +
    "\061\u010a\001\002\000\016\021\360\035\215\036\354\037" +
    "\355\040\356\041\357\001\002\000\006\045\uffbf\061\uffbf" +
    "\001\002\000\006\045\uffbe\061\uffbe\001\002\000\004\004" +
    "\u0105\001\002\000\004\004\u0100\001\002\000\004\004\373" +
    "\001\002\000\004\004\366\001\002\000\004\004\361\001" +
    "\002\000\004\006\362\001\002\000\004\004\363\001\002" +
    "\000\004\034\364\001\002\000\004\004\365\001\002\000" +
    "\006\045\uffac\061\uffac\001\002\000\004\006\367\001\002" +
    "\000\004\004\370\001\002\000\004\033\371\001\002\000" +
    "\004\004\372\001\002\000\006\045\uffb1\061\uffb1\001\002" +
    "\000\004\006\374\001\002\000\004\004\375\001\002\000" +
    "\004\042\376\001\002\000\004\004\377\001\002\000\006" +
    "\045\uffb5\061\uffb5\001\002\000\004\006\u0101\001\002\000" +
    "\004\004\u0102\001\002\000\004\033\u0103\001\002\000\004" +
    "\004\u0104\001\002\000\006\045\uffa8\061\uffa8\001\002\000" +
    "\004\006\u0106\001\002\000\004\004\u0107\001\002\000\012" +
    "\026\261\033\262\056\257\062\260\001\002\000\004\004" +
    "\u0109\001\002\000\006\045\uffa9\061\uffa9\001\002\000\004" +
    "\004\351\001\002\000\006\047\uffea\061\uffea\001\002\000" +
    "\006\045\uffc3\061\uffc3\001\002\000\004\044\u0110\001\002" +
    "\000\004\045\u010f\001\002\000\004\011\ufff7\001\002\000" +
    "\004\004\351\001\002\000\006\045\u0112\061\u010a\001\002" +
    "\000\006\047\uffeb\061\uffeb\001\002\000\004\044\u0114\001" +
    "\002\000\004\004\u011c\001\002\000\006\047\u0117\061\u0116" +
    "\001\002\000\004\044\u0119\001\002\000\004\045\u0118\001" +
    "\002\000\004\011\ufff3\001\002\000\004\004\u011c\001\002" +
    "\000\004\045\u0124\001\002\000\004\061\u0121\001\002\000" +
    "\006\035\215\064\212\001\002\000\004\061\u011e\001\002" +
    "\000\004\004\u0120\001\002\000\004\045\uffde\001\002\000" +
    "\004\064\212\001\002\000\004\004\u0122\001\002\000\004" +
    "\035\215\001\002\000\004\045\uffdd\001\002\000\006\047" +
    "\uffe3\061\uffe3\001\002\000\004\045\u0126\001\002\000\006" +
    "\047\uffe2\061\uffe2\001\002\000\004\044\u0129\001\002\000" +
    "\006\047\u0135\061\u0134\001\002\000\004\004\u012f\001\002" +
    "\000\006\045\uffb7\061\uffb7\001\002\000\006\045\uffb6\061" +
    "\uffb6\001\002\000\006\045\uffb8\061\uffb8\001\002\000\006" +
    "\045\uffba\061\uffba\001\002\000\006\045\u0132\061\u0131\001" +
    "\002\000\012\035\215\036\354\037\355\040\356\001\002" +
    "\000\006\045\uffb9\061\uffb9\001\002\000\004\004\u012f\001" +
    "\002\000\006\047\uffe6\061\uffe6\001\002\000\006\045\uffbb" +
    "\061\uffbb\001\002\000\004\044\u0137\001\002\000\004\045" +
    "\u0136\001\002\000\004\011\ufff5\001\002\000\004\004\u012f" +
    "\001\002\000\006\045\u0139\061\u0131\001\002\000\006\047" +
    "\uffe7\061\uffe7\001\002\000\004\044\152\001\002\000\006" +
    "\047\u013c\061\154\001\002\000\004\045\u013d\001\002\000" +
    "\004\011\ufff4\001\002\000\004\044\u0140\001\002\000\006" +
    "\047\u0144\061\u0143\001\002\000\004\004\u0122\001\002\000" +
    "\004\045\u0142\001\002\000\006\047\uffe8\061\uffe8\001\002" +
    "\000\004\044\u0146\001\002\000\004\045\u0145\001\002\000" +
    "\004\011\ufff6\001\002\000\004\004\u0122\001\002\000\004" +
    "\045\u0148\001\002\000\006\047\uffe9\061\uffe9\001\002\000" +
    "\004\044\u014a\001\002\000\004\004\u0155\001\002\000\006" +
    "\047\u014d\061\u014c\001\002\000\004\044\u014f\001\002\000" +
    "\004\045\u014e\001\002\000\004\011\ufffb\001\002\000\004" +
    "\004\u0155\001\002\000\006\045\uffcd\061\uffcd\001\002\000" +
    "\006\045\uffcc\061\uffcc\001\002\000\006\045\uffcb\061\uffcb" +
    "\001\002\000\006\045\uffca\061\uffca\001\002\000\006\045" +
    "\u015d\061\u015c\001\002\000\010\013\124\020\u0156\021\360" +
    "\001\002\000\004\004\u0157\001\002\000\004\006\u0158\001" +
    "\002\000\004\004\u0159\001\002\000\010\033\103\056\101" +
    "\062\100\001\002\000\004\004\u015b\001\002\000\006\045" +
    "\uffae\061\uffae\001\002\000\004\004\u0155\001\002\000\006" +
    "\047\ufff1\061\ufff1\001\002\000\006\045\uffce\061\uffce\001" +
    "\002\000\006\045\u0160\061\u015c\001\002\000\006\047\ufff0" +
    "\061\ufff0\001\002\000\004\044\u0162\001\002\000\004\004" +
    "\u0166\001\002\000\004\061\u016c\001\002\000\004\061\u016a" +
    "\001\002\000\004\045\u0167\001\002\000\006\013\124\020" +
    "\u0156\001\002\000\004\047\u0168\001\002\000\004\045\u0169" +
    "\001\002\000\004\011\ufff8\001\002\000\004\004\123\001" +
    "\002\000\004\045\uffb3\001\002\000\004\004\u016e\001\002" +
    "\000\004\045\uffb4\001\002\000\004\020\u0156\001\002\000" +
    "\004\005\u0172\001\002\000\004\005\u0174\001\002\000\004" +
    "\005\ufffd\001\002\000\004\057\011\001\002\000\004\005" +
    "\ufffe\001\002\000\006\051\u0175\057\011\001\002\000\004" +
    "\010\u0176\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0174\000\006\002\005\003\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\024\001" +
    "\001\000\004\007\u0160\001\001\000\004\007\u0148\001\001" +
    "\000\004\023\u013d\001\001\000\004\035\u0139\001\001\000" +
    "\004\023\u0126\001\001\000\004\035\u0112\001\001\000\004" +
    "\023\327\001\001\000\004\035\140\001\001\000\004\007" +
    "\116\001\001\000\004\007\030\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\056\042\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\015\114\016\055\017\047\020\051\021\053\022\050\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\015\052\016\055\017\047\020" +
    "\051\021\053\022\050\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\065\101\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\016\113\017\047\020\051\021\053\022" +
    "\050\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\057\117\001\001\000" +
    "\002\001\001\000\004\010\121\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\136\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\063\152\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\026\161\036\325\037\175" +
    "\040\160\041\162\042\157\043\163\044\166\045\172\046" +
    "\171\047\164\051\167\052\173\053\174\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\026\161\036\170\037\175\040\160\041\162" +
    "\042\157\043\163\044\166\045\172\046\171\047\164\051" +
    "\167\052\173\053\174\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\026\161\037\200\040\160\041\162\042" +
    "\157\043\163\044\166\045\172\046\171\047\164\051\167" +
    "\052\173\053\174\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\067\232\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\066" +
    "\262\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\050\306\066\307\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\066\312\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\060\340\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\013\343\024\347" +
    "\025\346\026\345\027\344\030\351\031\342\032\352\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\066\u0107\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\013\343\025\u010b\026\345\027\344" +
    "\030\351\031\342\032\352\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\013\343\024\u0110\025\346\026\345\027" +
    "\344\030\351\031\342\032\352\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\064\u0114\001\001\000\010\026" +
    "\u011c\041\u011a\054\u0124\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\026" +
    "\u011c\041\u011a\054\u0119\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\041" +
    "\u011e\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\026\u0122\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\062\u0127\001\001\000\002\001\001\000\016\026\u012f\027" +
    "\u012b\030\u0129\032\u012a\033\u012d\034\u012c\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\026\u012f\027\u012b\030\u0129\032\u012a\034\u0132\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\026\u012f\027" +
    "\u012b\030\u0129\032\u012a\033\u0137\034\u012c\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\063\u013a\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\061\u013e\001\001\000\002\001\001\000\004\026\u0140\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\026\u0146\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\055\u014a" +
    "\001\001\000\014\004\u015e\010\u0150\011\u014f\012\u0151\013" +
    "\u0152\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\004\u0153\010\u0150\011" +
    "\u014f\012\u0151\013\u0152\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\065\u0159\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\010\u0150\011\u015d\012\u0151" +
    "\013\u0152\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\010\u0162\012\u0163\014\u0164\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\u016a\001\001\000\002\001\001\000\004\012\u016c\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\003\u0170\005" +
    "\u016f\001\001\000\004\003\u0172\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol sym;
    
    public Solicitud temporal = new Solicitud();
    public Map<String,String> lista_temporal = new HashMap<>();
    public ArrayList<Solicitud> lista_solicitudes = new ArrayList<>();
    public Usuario logeado = new Usuario();
    public Usuario retorno = new Usuario();
    public String armando = "";

    public Symbol getS(){
        return this.sym;
    }

    public void agregarParametroAMap(String key, String valor){
        if (lista_temporal.containsKey(key)){
            temporal.setTieneErrores(true);
            temporal.setDescripcion_error(temporal.getDescripcion_error()+"Existe ya un parametro para "+key+" y se está intentando enviar otro: "+valor+"\n");
            lista_temporal.put("ERROR","PARAMETROS REPETIDOS");
            String tem = lista_temporal.get(key);
            if (lista_temporal.get(key).equals("OPCIONES")){
                tem += "\t"+valor;
            } else {
                tem += "\n"+valor;
            }
            lista_temporal.put(key,tem);
        } else {
            lista_temporal.put(key,valor);
        }
    }

    public void report_fatal_error(String message, Object info) {
        System.out.println("reportfatal "+message+info);
    }
    public void report_fatal_error(Symbol cur) {
        System.out.println("unrecovered_syntax_error");
    }

    public void syntax_error(Symbol cur_token) {
        System.out.println(symbl_name_from_id(expected_token_ids().get(0)));
        System.out.println("syntaxerr: " + symbl_name_from_id(cur_token.sym) +" Linea: "+cur_token.right+" Columna: "+cur_token.left+" Valor:"+cur_token.value);
    }

    protected int error_sync_size() {
        return 1;
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= INICIOE SOLICITUDESP MAYORQ bloque_solicitudes INICIOE FINSOLICITUDES MAYORQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= solicitud 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // bloque_solicitudes ::= bloque_solicitudes solicitud 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_solicitudes",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // bloque_solicitudes ::= solicitud 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_solicitudes",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // solicitud ::= INICIOE INICIOS COMILLAS tipo_solicitud MENORQ FINS FINE 
            {
              Object RESULT =null;
		lista_solicitudes.add(temporal); temporal = new Solicitud();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("solicitud",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // tipo_solicitud ::= CREARU inicio_param_usuario bloque1 CORCHETEC LLAVEC 
            {
              Object RESULT =null;
		temporal.setTipo("CREAR_USUARIO");  logeado = new Usuario();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_solicitud",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // tipo_solicitud ::= MODIFICARU inicio_param_usuario bloque2 CORCHETEC LLAVEC 
            {
              Object RESULT =null;
		temporal.setTipo("MODIFICAR_USUARIO");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_solicitud",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // tipo_solicitud ::= ELIMINARU inicio_param_usuario bloque3 CORCHETEC LLAVEC 
            {
              Object RESULT =null;
		temporal.setTipo("ELIMINAR_USUARIO");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_solicitud",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // tipo_solicitud ::= LOGINU inicio_param_usuario LLAVEA parametro_login LLAVEC CORCHETEC LLAVEC 
            {
              Object RESULT =null;
		retorno = logeado; logeado = new Usuario(); temporal.setTipo("LOGIN");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_solicitud",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // tipo_solicitud ::= NUEVOFP inicio_param_formulario bloque4 CORCHETEC LLAVEC 
            {
              Object RESULT =null;
		temporal.setTipo("NUEVO_FORMULARIO");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_solicitud",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // tipo_solicitud ::= ELIMINARF inicio_param_formulario bloque5 CORCHETEC LLAVEC 
            {
              Object RESULT =null;
		temporal.setTipo("ELIMINAR_FORMULARIO");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_solicitud",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // tipo_solicitud ::= MODIFICARF inicio_param_formulario bloque6 CORCHETEC LLAVEC 
            {
              Object RESULT =null;
		temporal.setTipo("MODIFICAR_FORMULARIO");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_solicitud",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // tipo_solicitud ::= AGREGARC inicio_param_componente bloque7 CORCHETEC LLAVEC 
            {
              Object RESULT =null;
		temporal.setTipo("AGREGAR_COMPONENTE");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_solicitud",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // tipo_solicitud ::= ELIMINARC inicio_param_componente bloque8 CORCHETEC LLAVEC 
            {
              Object RESULT =null;
		temporal.setTipo("ELIMINAR_COMPONENTE");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_solicitud",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // tipo_solicitud ::= MODIFICARC inicio_param_componente bloque7 CORCHETEC LLAVEC 
            {
              Object RESULT =null;
		temporal.setTipo("MODIFICAR_COMPONENTE");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_solicitud",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // bloque1 ::= bloque1 COMA LLAVEA bloque_usuario1 LLAVEC 
            {
              Object RESULT =null;
		temporal.getCuantas().add(lista_temporal); lista_temporal = new HashMap<>(); temporal.setTieneErrores(false);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque1",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // bloque1 ::= LLAVEA bloque_usuario1 LLAVEC 
            {
              Object RESULT =null;
		temporal.getCuantas().add(lista_temporal); lista_temporal = new HashMap<>(); temporal.setTieneErrores(false);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque1",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // bloque2 ::= bloque2 COMA LLAVEA bloque_usuario2 LLAVEC 
            {
              Object RESULT =null;
		temporal.getCuantas().add(lista_temporal); lista_temporal = new HashMap<>(); temporal.setTieneErrores(false);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque2",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // bloque2 ::= LLAVEA bloque_usuario2 LLAVEC 
            {
              Object RESULT =null;
		temporal.getCuantas().add(lista_temporal); lista_temporal = new HashMap<>(); temporal.setTieneErrores(false);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque2",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // bloque3 ::= bloque3 COMA LLAVEA parametro_usuario LLAVEC 
            {
              Object RESULT =null;
		temporal.getCuantas().add(lista_temporal); lista_temporal = new HashMap<>(); temporal.setTieneErrores(false);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque3",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // bloque3 ::= LLAVEA parametro_usuario LLAVEC 
            {
              Object RESULT =null;
		temporal.getCuantas().add(lista_temporal); lista_temporal = new HashMap<>(); temporal.setTieneErrores(false);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque3",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // bloque4 ::= bloque4 COMA LLAVEA bloque_formulario1 LLAVEC 
            {
              Object RESULT =null;
		temporal.getCuantas().add(lista_temporal); lista_temporal = new HashMap<>(); temporal.setTieneErrores(false);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque4",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // bloque4 ::= LLAVEA bloque_formulario1 LLAVEC 
            {
              Object RESULT =null;
		temporal.getCuantas().add(lista_temporal); lista_temporal = new HashMap<>(); temporal.setTieneErrores(false);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque4",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // bloque5 ::= bloque5 COMA LLAVEA parametro_id LLAVEC 
            {
              Object RESULT =null;
		temporal.getCuantas().add(lista_temporal); lista_temporal = new HashMap<>(); temporal.setTieneErrores(false);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque5",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // bloque5 ::= LLAVEA parametro_id LLAVEC 
            {
              Object RESULT =null;
		temporal.getCuantas().add(lista_temporal); lista_temporal = new HashMap<>(); temporal.setTieneErrores(false);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque5",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // bloque6 ::= bloque6 COMA LLAVEA bloque_formulario2 LLAVEC 
            {
              Object RESULT =null;
		temporal.getCuantas().add(lista_temporal); lista_temporal = new HashMap<>(); temporal.setTieneErrores(false);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque6",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // bloque6 ::= LLAVEA bloque_formulario2 LLAVEC 
            {
              Object RESULT =null;
		temporal.getCuantas().add(lista_temporal); lista_temporal = new HashMap<>(); temporal.setTieneErrores(false);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque6",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // bloque7 ::= bloque7 COMA LLAVEA bloque_componente1 LLAVEC 
            {
              Object RESULT =null;
		temporal.getCuantas().add(lista_temporal); lista_temporal = new HashMap<>(); temporal.setTieneErrores(false);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque7",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // bloque7 ::= LLAVEA bloque_componente1 LLAVEC 
            {
              Object RESULT =null;
		temporal.getCuantas().add(lista_temporal); lista_temporal = new HashMap<>(); temporal.setTieneErrores(false);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque7",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // bloque8 ::= bloque8 COMA LLAVEA bloque_eliminar LLAVEC 
            {
              Object RESULT =null;
		temporal.getCuantas().add(lista_temporal); lista_temporal = new HashMap<>(); temporal.setTieneErrores(false);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque8",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // bloque8 ::= LLAVEA bloque_eliminar LLAVEC 
            {
              Object RESULT =null;
		temporal.getCuantas().add(lista_temporal); lista_temporal = new HashMap<>(); temporal.setTieneErrores(false);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque8",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // inicio_param_usuario ::= COMILLAS MAYORQ LLAVEA COMILLAS CREDENCIALES COMILLAS DOSP CORCHETEA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio_param_usuario",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // inicio_param_formulario ::= COMILLAS MAYORQ LLAVEA COMILLAS PARAMF COMILLAS DOSP CORCHETEA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio_param_formulario",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // inicio_param_componente ::= COMILLAS MAYORQ LLAVEA COMILLAS PARAMC COMILLAS DOSP CORCHETEA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio_param_componente",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // bloque_eliminar ::= parametro_id COMA parametro_formulario 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_eliminar",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // bloque_eliminar ::= parametro_formulario COMA parametro_id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_eliminar",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // bloque_componente1 ::= bloque_componente1 COMA parametros_agregar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_componente1",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // bloque_componente1 ::= parametros_agregar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_componente1",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // parametros_agregar ::= parametro_id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_agregar",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // parametros_agregar ::= parametro_formulario 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_agregar",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // parametros_agregar ::= parametro_nombre_campo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_agregar",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // parametros_agregar ::= parametro_clase 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_agregar",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // parametros_agregar ::= parametro_indice 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_agregar",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // parametros_agregar ::= parametro_texto 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_agregar",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // parametros_agregar ::= parametro_alineacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_agregar",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // parametros_agregar ::= parametro_opciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_agregar",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // parametros_agregar ::= parametro_requerido 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_agregar",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // parametros_agregar ::= parametro_filas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_agregar",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // parametros_agregar ::= parametro_columnas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_agregar",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // parametros_agregar ::= parametro_url 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_agregar",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // bloque_usuario1 ::= bloque_usuario1 COMA parametros_crear 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_usuario1",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // bloque_usuario1 ::= parametros_crear 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_usuario1",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // parametros_crear ::= parametro_usuario 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_crear",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // parametros_crear ::= parametro_contra 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_crear",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // parametros_crear ::= parametro_fecha 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_crear",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // bloque_usuario2 ::= bloque_usuario2 COMA parametros_modificarU 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_usuario2",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // bloque_usuario2 ::= parametros_modificarU 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_usuario2",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // parametros_modificarU ::= parametro_usuario_antiguo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_modificarU",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // parametros_modificarU ::= parametro_usuario_nuevo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_modificarU",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // parametros_modificarU ::= parametro_contra_nueva 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_modificarU",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // parametros_modificarU ::= parametro_fecha_modificacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_modificarU",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // bloque_formulario1 ::= bloque_formulario1 COMA parametros_formulario 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_formulario1",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // bloque_formulario1 ::= parametros_formulario 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_formulario1",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // parametros_formulario ::= parametro_id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_formulario",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // parametros_formulario ::= parametro_titulo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_formulario",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // parametros_formulario ::= parametro_nombre 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_formulario",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // parametros_formulario ::= parametro_tema 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_formulario",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // parametros_formulario ::= parametro_usuario_creacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_formulario",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // parametros_formulario ::= parametro_fecha 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_formulario",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // bloque_formulario2 ::= bloque_formulario2 COMA parametros_formulario2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_formulario2",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // bloque_formulario2 ::= parametros_formulario2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_formulario2",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // parametros_formulario2 ::= parametro_id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_formulario2",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // parametros_formulario2 ::= parametro_titulo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_formulario2",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // parametros_formulario2 ::= parametro_nombre 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_formulario2",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // parametros_formulario2 ::= parametro_tema 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_formulario2",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // parametro_tema ::= COMILLAS TEMAP COMILLAS DOSP COMILLAS TEMA COMILLAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		agregarParametroAMap("TEMA",e1.toString());System.out.println("ingresado tema"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_tema",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // parametro_login ::= parametro_usuario COMA parametro_contra 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_login",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // parametro_login ::= parametro_contra COMA parametro_usuario 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_login",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // parametro_usuario ::= COMILLAS USUARIOP COMILLAS DOSP COMILLAS USUARIO COMILLAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		agregarParametroAMap("USUARIO",e1.toString()); logeado.setUsuario(e1.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_usuario",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // parametro_usuario_creacion ::= COMILLAS USUARIOCP COMILLAS DOSP COMILLAS USUARIO COMILLAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		agregarParametroAMap("USUARIO_CREACION",e1.toString()); System.out.println("ingresado usuario creacion");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_usuario_creacion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // parametro_usuario_antiguo ::= COMILLAS USUARIOAP COMILLAS DOSP COMILLAS USUARIO COMILLAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		agregarParametroAMap("USUARIO_ANTIGUO",e1.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_usuario_antiguo",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // parametro_usuario_nuevo ::= COMILLAS USUARIONP COMILLAS DOSP COMILLAS USUARIO COMILLAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		agregarParametroAMap("USUARIO_NUEVO",e1.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_usuario_nuevo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // parametro_contra ::= COMILLAS CONTRAP COMILLAS DOSP COMILLAS tipo_palabra COMILLAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		agregarParametroAMap("CONTRA",e1.toString()); logeado.setPassword(e1.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_contra",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // parametro_contra_nueva ::= COMILLAS NUEVOP COMILLAS DOSP COMILLAS tipo_palabra COMILLAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		agregarParametroAMap("CONTRA_NUEVA",e1.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_contra_nueva",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // parametro_fecha ::= COMILLAS FECHACP COMILLAS DOSP COMILLAS FECHA COMILLAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		agregarParametroAMap("FECHA",e1.toString());System.out.println("ingresado usuario creacion");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_fecha",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // parametro_fecha_modificacion ::= COMILLAS FECHAMP COMILLAS DOSP COMILLAS FECHA COMILLAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		agregarParametroAMap("FECHA_MODIFICACION",e1.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_fecha_modificacion",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // parametro_id ::= COMILLAS IDP COMILLAS DOSP COMILLAS ID COMILLAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		agregarParametroAMap("ID",e1.toString()); System.out.println("ingresado id");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_id",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // parametro_titulo ::= COMILLAS TITULOP COMILLAS DOSP COMILLAS tipo_opcion COMILLAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		agregarParametroAMap("TITULO",e1.toString()); System.out.println("ingresado titulo");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_titulo",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // parametro_nombre ::= COMILLAS NOMBREP COMILLAS DOSP COMILLAS USUARIO COMILLAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		agregarParametroAMap("NOMBRE",e1.toString()); System.out.println("ingresado nombre");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_nombre",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // parametro_nombre_campo ::= COMILLAS NOMBREC COMILLAS DOSP COMILLAS USUARIO COMILLAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		agregarParametroAMap("NOMBRE_CAMPO",e1.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_nombre_campo",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // parametro_formulario ::= COMILLAS FORMULARIOC COMILLAS DOSP COMILLAS ID COMILLAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		agregarParametroAMap("FORMULARIO",e1.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_formulario",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // tipos_de_clases ::= CLASENORMAL 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e1.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_de_clases",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // tipos_de_clases ::= CLASEAREA 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e1.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_de_clases",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // tipos_de_clases ::= CLASEOPCIONES 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e1.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_de_clases",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // tipos_de_clases ::= CLASEIMAGEN 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e1.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_de_clases",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // tipos_de_clases ::= CLASEBOTON 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e1.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_de_clases",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // parametro_clase ::= COMILLAS CLASE COMILLAS DOSP COMILLAS tipos_de_clases COMILLAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		agregarParametroAMap("CLASE",e1.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_clase",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // parametro_indice ::= COMILLAS INDICEC COMILLAS DOSP COMILLAS NUMERO COMILLAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		agregarParametroAMap("INDICE",e1.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_indice",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // parametro_texto ::= COMILLAS TEXTOVC COMILLAS DOSP COMILLAS tipo_opcion COMILLAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		agregarParametroAMap("TEXTO_VISIBLE",e1.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_texto",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // parametro_alineacion ::= COMILLAS ALINEAC COMILLAS DOSP COMILLAS ALINEA COMILLAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		agregarParametroAMap("ALINEACION",e1.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_alineacion",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // parametro_requerido ::= COMILLAS REQUERIDO COMILLAS DOSP COMILLAS BOOL COMILLAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		agregarParametroAMap("REQUERIDO",e1.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_requerido",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // parametro_opciones ::= COMILLAS OPCIONES COMILLAS DOSP COMILLAS bloque_opciones COMILLAS 
            {
              Object RESULT =null;
		agregarParametroAMap("OPCIONES",armando); armando = "";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_opciones",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // bloque_opciones ::= bloque_opciones OR tipo_opcion 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		armando += e1.toString()+"\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_opciones",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // bloque_opciones ::= tipo_opcion 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		armando += e1.toString()+"\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_opciones",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // tipo_opcion ::= TITULO 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e1.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_opcion",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // tipo_opcion ::= USUARIO 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e1.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_opcion",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // tipo_opcion ::= ID 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e1.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_opcion",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // tipo_opcion ::= NUMERO 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e1.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_opcion",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // tipo_palabra ::= USUARIO 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e1.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_palabra",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // tipo_palabra ::= ID 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e1.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_palabra",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // tipo_palabra ::= NUMERO 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e1.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_palabra",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // parametro_filas ::= COMILLAS FILAS COMILLAS DOSP COMILLAS NUMERO COMILLAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		agregarParametroAMap("FILAS",e1.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_filas",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // parametro_columnas ::= COMILLAS COLUMNAS COMILLAS DOSP COMILLAS NUMERO COMILLAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		agregarParametroAMap("COLUMNAS",e1.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_columnas",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // parametro_url ::= COMILLAS URLC COMILLAS DOSP COMILLAS URL COMILLAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		agregarParametroAMap("URL",e1.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_url",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
