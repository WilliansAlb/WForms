
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.Symbol;
import POJOS.Solicitud;
import POJOS.Usuario;
import POJOS.Consulta;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\226\000\002\002\004\000\002\002\011\000\002\002" +
    "\003\000\002\005\004\000\002\005\003\000\002\003\011" +
    "\000\002\006\007\000\002\006\007\000\002\006\007\000" +
    "\002\006\011\000\002\006\007\000\002\006\007\000\002" +
    "\006\007\000\002\006\007\000\002\006\007\000\002\006" +
    "\007\000\002\006\007\000\002\055\007\000\002\055\005" +
    "\000\002\056\007\000\002\056\005\000\002\057\007\000" +
    "\002\057\005\000\002\060\007\000\002\060\005\000\002" +
    "\061\007\000\002\061\005\000\002\062\007\000\002\062" +
    "\005\000\002\063\007\000\002\063\005\000\002\064\007" +
    "\000\002\064\005\000\002\007\012\000\002\023\012\000" +
    "\002\035\012\000\002\054\005\000\002\054\005\000\002" +
    "\036\005\000\002\036\003\000\002\037\003\000\002\037" +
    "\003\000\002\037\003\000\002\037\003\000\002\037\003" +
    "\000\002\037\003\000\002\037\003\000\002\037\003\000" +
    "\002\037\003\000\002\037\003\000\002\037\003\000\002" +
    "\037\003\000\002\004\005\000\002\004\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\015\005" +
    "\000\002\015\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\024\005\000\002" +
    "\024\003\000\002\025\003\000\002\025\003\000\002\025" +
    "\003\000\002\025\003\000\002\025\003\000\002\025\003" +
    "\000\002\033\005\000\002\033\003\000\002\034\003\000" +
    "\002\034\003\000\002\034\003\000\002\034\003\000\002" +
    "\032\011\000\002\014\005\000\002\014\005\000\002\010" +
    "\011\000\002\031\011\000\002\017\011\000\002\020\011" +
    "\000\002\012\011\000\002\021\011\000\002\013\011\000" +
    "\002\022\011\000\002\026\011\000\002\027\011\000\002" +
    "\030\011\000\002\040\011\000\002\041\011\000\002\106" +
    "\003\000\002\106\003\000\002\106\003\000\002\106\003" +
    "\000\002\106\003\000\002\042\011\000\002\043\011\000" +
    "\002\044\011\000\002\045\011\000\002\046\011\000\002" +
    "\047\011\000\002\050\005\000\002\050\003\000\002\104" +
    "\003\000\002\104\003\000\002\104\003\000\002\104\003" +
    "\000\002\103\003\000\002\103\003\000\002\103\003\000" +
    "\002\051\011\000\002\052\011\000\002\053\011\000\002" +
    "\065\012\000\002\066\006\000\002\067\002\000\002\067" +
    "\004\000\002\070\004\000\002\071\002\000\002\071\004" +
    "\000\002\072\017\000\002\107\003\000\002\107\003\000" +
    "\002\073\002\000\002\073\003\000\002\074\004\000\002" +
    "\075\002\000\002\075\004\000\002\076\002\000\002\076" +
    "\006\000\002\114\005\000\002\114\005\000\002\114\004" +
    "\000\002\114\005\000\002\114\003\000\002\111\004\000" +
    "\002\110\004\000\002\110\004\000\002\105\003\000\002" +
    "\105\003\000\002\105\003\000\002\105\003\000\002\112" +
    "\003\000\002\112\003\000\002\113\003\000\002\113\005" +
    "\000\002\113\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01be\000\004\005\005\001\002\000\004\002\uffff\001" +
    "\002\000\006\051\010\060\011\001\002\000\004\002\007" +
    "\001\002\000\004\002\001\001\002\000\004\010\u01b9\001" +
    "\002\000\004\004\012\001\002\000\030\012\014\014\024" +
    "\023\023\024\013\025\021\044\015\053\017\055\016\077" +
    "\020\101\022\111\026\001\002\000\004\004\150\001\002" +
    "\000\004\004\150\001\002\000\004\004\u0123\001\002\000" +
    "\004\004\260\001\002\000\004\004\u0123\001\002\000\004" +
    "\004\260\001\002\000\004\004\u0123\001\002\000\004\004" +
    "\260\001\002\000\004\004\150\001\002\000\004\004\150" +
    "\001\002\000\004\011\144\001\002\000\004\004\030\001" +
    "\002\000\004\045\040\001\002\000\004\010\031\001\002" +
    "\000\004\045\032\001\002\000\004\004\033\001\002\000" +
    "\004\112\034\001\002\000\004\004\035\001\002\000\004" +
    "\006\036\001\002\000\004\047\037\001\002\000\004\045" +
    "\uff8d\001\002\000\004\004\046\001\002\000\004\050\042" +
    "\001\002\000\004\046\043\001\002\000\004\011\ufff1\001" +
    "\002\000\006\046\uff88\062\141\001\002\000\004\046\135" +
    "\001\002\000\004\113\047\001\002\000\004\004\050\001" +
    "\002\000\004\006\051\001\002\000\004\004\052\001\002" +
    "\000\004\114\053\001\002\000\004\116\054\001\002\000" +
    "\006\034\057\063\055\001\002\000\022\010\uff85\011\uff85" +
    "\047\uff85\050\uff85\062\uff85\122\uff85\123\uff85\124\uff85\001" +
    "\002\000\004\047\060\001\002\000\022\010\uff84\011\uff84" +
    "\047\uff84\050\uff84\062\uff84\122\uff84\123\uff84\124\uff84\001" +
    "\002\000\010\034\057\050\uff83\063\055\001\002\000\006" +
    "\050\uff80\062\132\001\002\000\004\050\uff82\001\002\000" +
    "\004\050\064\001\002\000\006\004\uff7e\115\065\001\002" +
    "\000\004\047\070\001\002\000\004\004\067\001\002\000" +
    "\006\046\uff86\062\uff86\001\002\000\012\032\073\034\057" +
    "\063\055\117\072\001\002\000\014\010\110\011\111\122" +
    "\113\123\106\124\107\001\002\000\012\032\073\034\057" +
    "\063\055\117\072\001\002\000\012\032\073\034\057\063" +
    "\055\117\072\001\002\000\010\050\077\120\076\121\100" +
    "\001\002\000\012\033\uff78\050\uff78\120\uff78\121\uff78\001" +
    "\002\000\012\032\073\034\057\063\055\117\072\001\002" +
    "\000\004\004\uff7d\001\002\000\012\032\073\034\057\063" +
    "\055\117\072\001\002\000\012\033\uff7b\050\uff7b\120\076" +
    "\121\uff7b\001\002\000\012\033\uff7c\050\uff7c\120\uff7c\121" +
    "\uff7c\001\002\000\010\033\104\120\076\121\100\001\002" +
    "\000\012\033\uff79\050\uff79\120\uff79\121\uff79\001\002\000" +
    "\012\033\uff7a\050\uff7a\120\uff7a\121\uff7a\001\002\000\006" +
    "\031\uff74\057\uff74\001\002\000\006\031\uff73\057\uff73\001" +
    "\002\000\006\031\uff72\057\uff72\001\002\000\006\031\uff71" +
    "\057\uff71\001\002\000\006\031\131\057\127\001\002\000" +
    "\010\031\120\057\115\125\117\001\002\000\012\033\uff77" +
    "\050\uff77\120\uff77\121\uff77\001\002\000\012\033\uff6e\050" +
    "\uff6e\120\uff6e\121\uff6e\001\002\000\012\033\uff75\050\uff75" +
    "\120\uff75\121\uff75\001\002\000\012\026\123\034\124\057" +
    "\122\063\121\001\002\000\012\033\uff6c\050\uff6c\120\uff6c" +
    "\121\uff6c\001\002\000\010\004\uff95\103\uff95\125\uff95\001" +
    "\002\000\010\004\uff94\103\uff94\125\uff94\001\002\000\010" +
    "\004\uff97\103\uff97\125\uff97\001\002\000\010\004\uff96\103" +
    "\uff96\125\uff96\001\002\000\004\125\126\001\002\000\012" +
    "\033\uff6d\050\uff6d\120\uff6d\121\uff6d\001\002\000\012\033" +
    "\uff70\050\uff70\120\uff70\121\uff70\001\002\000\012\033\uff76" +
    "\050\uff76\120\uff76\121\uff76\001\002\000\012\033\uff6f\050" +
    "\uff6f\120\uff6f\121\uff6f\001\002\000\006\034\057\063\055" +
    "\001\002\000\004\050\uff81\001\002\000\004\050\uff7f\001" +
    "\002\000\006\050\uff8b\062\136\001\002\000\004\045\040" +
    "\001\002\000\004\050\uff8c\001\002\000\004\050\uff8a\001" +
    "\002\000\004\004\046\001\002\000\004\046\uff89\001\002" +
    "\000\004\046\uff87\001\002\000\004\061\145\001\002\000" +
    "\004\007\146\001\002\000\006\002\ufffc\005\ufffc\001\002" +
    "\000\004\045\160\001\002\000\004\010\151\001\002\000" +
    "\004\045\152\001\002\000\004\004\153\001\002\000\004" +
    "\102\154\001\002\000\004\004\155\001\002\000\004\006" +
    "\156\001\002\000\004\047\157\001\002\000\004\045\uffe0" +
    "\001\002\000\004\004\173\001\002\000\006\050\163\062" +
    "\162\001\002\000\004\045\165\001\002\000\004\046\164" +
    "\001\002\000\004\011\ufffa\001\002\000\004\004\173\001" +
    "\002\000\006\046\uffc6\062\uffc6\001\002\000\006\046\uffc3" +
    "\062\uffc3\001\002\000\006\046\uffc5\062\uffc5\001\002\000" +
    "\006\046\231\062\230\001\002\000\006\046\uffc4\062\uffc4" +
    "\001\002\000\012\015\176\016\200\017\175\022\177\001" +
    "\002\000\006\046\uffc7\062\uffc7\001\002\000\004\004\220" +
    "\001\002\000\004\004\213\001\002\000\004\004\206\001" +
    "\002\000\004\004\201\001\002\000\004\006\202\001\002" +
    "\000\004\004\203\001\002\000\004\034\204\001\002\000" +
    "\004\004\205\001\002\000\006\046\uffae\062\uffae\001\002" +
    "\000\004\006\207\001\002\000\004\004\210\001\002\000" +
    "\004\035\211\001\002\000\004\004\212\001\002\000\006" +
    "\046\uffaa\062\uffaa\001\002\000\004\006\214\001\002\000" +
    "\004\004\215\001\002\000\004\034\216\001\002\000\004" +
    "\004\217\001\002\000\006\046\uffaf\062\uffaf\001\002\000" +
    "\004\006\221\001\002\000\004\004\222\001\002\000\010" +
    "\034\226\057\224\063\223\001\002\000\004\004\uff92\001" +
    "\002\000\004\004\uff91\001\002\000\004\004\227\001\002" +
    "\000\004\004\uff93\001\002\000\006\046\uffac\062\uffac\001" +
    "\002\000\004\004\173\001\002\000\006\050\uffee\062\uffee" +
    "\001\002\000\006\046\uffc8\062\uffc8\001\002\000\006\046" +
    "\234\062\230\001\002\000\006\050\uffed\062\uffed\001\002" +
    "\000\004\045\236\001\002\000\004\004\245\001\002\000" +
    "\006\050\241\062\240\001\002\000\004\045\243\001\002" +
    "\000\004\046\242\001\002\000\004\011\ufff9\001\002\000" +
    "\004\004\245\001\002\000\004\046\254\001\002\000\004" +
    "\013\246\001\002\000\004\004\247\001\002\000\004\006" +
    "\250\001\002\000\004\004\251\001\002\000\004\034\252" +
    "\001\002\000\004\004\253\001\002\000\006\046\uffb1\062" +
    "\uffb1\001\002\000\006\050\uffec\062\uffec\001\002\000\004" +
    "\046\256\001\002\000\006\050\uffeb\062\uffeb\001\002\000" +
    "\004\045\270\001\002\000\004\010\261\001\002\000\004" +
    "\045\262\001\002\000\004\004\263\001\002\000\004\100" +
    "\264\001\002\000\004\004\265\001\002\000\004\006\266" +
    "\001\002\000\004\047\267\001\002\000\004\045\uffde\001" +
    "\002\000\004\004\304\001\002\000\006\050\273\062\272" +
    "\001\002\000\004\045\275\001\002\000\004\046\274\001" +
    "\002\000\004\011\ufff2\001\002\000\004\004\304\001\002" +
    "\000\006\046\uffd7\062\uffd7\001\002\000\006\046\uffd6\062" +
    "\uffd6\001\002\000\006\046\uffd9\062\uffd9\001\002\000\006" +
    "\046\uffd8\062\uffd8\001\002\000\006\046\uffd5\062\uffd5\001" +
    "\002\000\006\046\uffd2\062\uffd2\001\002\000\032\036\333" +
    "\056\331\065\330\066\332\067\323\070\326\071\321\072" +
    "\325\073\322\074\320\075\327\076\324\001\002\000\006" +
    "\046\uffd0\062\uffd0\001\002\000\006\046\uffd4\062\uffd4\001" +
    "\002\000\006\046\316\062\315\001\002\000\006\046\uffd3" +
    "\062\uffd3\001\002\000\006\046\uffd1\062\uffd1\001\002\000" +
    "\006\046\uffce\062\uffce\001\002\000\006\046\uffcf\062\uffcf" +
    "\001\002\000\006\046\uffda\062\uffda\001\002\000\004\004" +
    "\304\001\002\000\006\050\uffe4\062\uffe4\001\002\000\006" +
    "\046\uffdb\062\uffdb\001\002\000\004\004\u011b\001\002\000" +
    "\004\004\u0116\001\002\000\004\004\u010e\001\002\000\004" +
    "\004\u0109\001\002\000\004\004\u0104\001\002\000\004\004" +
    "\377\001\002\000\004\004\372\001\002\000\004\004\365" +
    "\001\002\000\004\004\360\001\002\000\004\004\353\001" +
    "\002\000\004\004\341\001\002\000\004\004\334\001\002" +
    "\000\004\006\335\001\002\000\004\004\336\001\002\000" +
    "\004\063\337\001\002\000\004\004\340\001\002\000\006" +
    "\046\uffa9\062\uffa9\001\002\000\004\006\342\001\002\000" +
    "\004\004\343\001\002\000\014\104\347\105\345\106\350" +
    "\107\344\110\346\001\002\000\004\004\uffa1\001\002\000" +
    "\004\004\uffa3\001\002\000\004\004\uffa0\001\002\000\004" +
    "\004\uffa4\001\002\000\004\004\uffa2\001\002\000\004\004" +
    "\352\001\002\000\006\046\uff9f\062\uff9f\001\002\000\004" +
    "\006\354\001\002\000\004\004\355\001\002\000\004\034" +
    "\356\001\002\000\004\004\357\001\002\000\006\046\uffa6" +
    "\062\uffa6\001\002\000\004\006\361\001\002\000\004\004" +
    "\362\001\002\000\004\063\363\001\002\000\004\004\364" +
    "\001\002\000\006\046\uffa5\062\uffa5\001\002\000\004\006" +
    "\366\001\002\000\004\004\367\001\002\000\004\057\370" +
    "\001\002\000\004\004\371\001\002\000\006\046\uff8f\062" +
    "\uff8f\001\002\000\004\006\373\001\002\000\004\004\374" +
    "\001\002\000\012\026\123\034\124\057\122\063\121\001" +
    "\002\000\004\004\376\001\002\000\006\046\uff9d\062\uff9d" +
    "\001\002\000\004\006\u0100\001\002\000\004\004\u0101\001" +
    "\002\000\004\030\u0102\001\002\000\004\004\u0103\001\002" +
    "\000\006\046\uff9b\062\uff9b\001\002\000\004\006\u0105\001" +
    "\002\000\004\004\u0106\001\002\000\004\064\u0107\001\002" +
    "\000\004\004\u0108\001\002\000\006\046\uff8e\062\uff8e\001" +
    "\002\000\004\006\u010a\001\002\000\004\004\u010b\001\002" +
    "\000\004\057\u010c\001\002\000\004\004\u010d\001\002\000" +
    "\006\046\uff9e\062\uff9e\001\002\000\004\006\u010f\001\002" +
    "\000\004\004\u0110\001\002\000\012\026\123\034\124\057" +
    "\122\063\121\001\002\000\006\004\u0113\103\u0114\001\002" +
    "\000\006\004\uff98\103\uff98\001\002\000\006\046\uff9a\062" +
    "\uff9a\001\002\000\012\026\123\034\124\057\122\063\121" +
    "\001\002\000\006\004\uff99\103\uff99\001\002\000\004\006" +
    "\u0117\001\002\000\004\004\u0118\001\002\000\004\027\u0119" +
    "\001\002\000\004\004\u011a\001\002\000\006\046\uff9c\062" +
    "\uff9c\001\002\000\004\006\u011c\001\002\000\004\004\u011d" +
    "\001\002\000\004\057\u011e\001\002\000\004\004\u011f\001" +
    "\002\000\006\046\uff90\062\uff90\001\002\000\006\046\u0121" +
    "\062\315\001\002\000\006\050\uffe3\062\uffe3\001\002\000" +
    "\004\045\u012c\001\002\000\004\010\u0124\001\002\000\004" +
    "\045\u0125\001\002\000\004\004\u0126\001\002\000\004\054" +
    "\u0127\001\002\000\004\004\u0128\001\002\000\004\006\u0129" +
    "\001\002\000\004\047\u012a\001\002\000\004\045\uffdf\001" +
    "\002\000\006\050\u0158\062\u0157\001\002\000\004\004\u0133" +
    "\001\002\000\006\046\uffbc\062\uffbc\001\002\000\006\046" +
    "\uffbb\062\uffbb\001\002\000\006\046\uffbf\062\uffbf\001\002" +
    "\000\006\046\uffc0\062\uffc0\001\002\000\006\046\uffc1\062" +
    "\uffc1\001\002\000\006\046\u0155\062\u0154\001\002\000\016" +
    "\021\u013a\036\333\037\u0136\040\u0137\041\u0138\042\u0139\001" +
    "\002\000\006\046\uffbe\062\uffbe\001\002\000\006\046\uffbd" +
    "\062\uffbd\001\002\000\004\004\u014f\001\002\000\004\004" +
    "\u014a\001\002\000\004\004\u0145\001\002\000\004\004\u0140" +
    "\001\002\000\004\004\u013b\001\002\000\004\006\u013c\001" +
    "\002\000\004\004\u013d\001\002\000\004\035\u013e\001\002" +
    "\000\004\004\u013f\001\002\000\006\046\uffab\062\uffab\001" +
    "\002\000\004\006\u0141\001\002\000\004\004\u0142\001\002" +
    "\000\004\034\u0143\001\002\000\004\004\u0144\001\002\000" +
    "\006\046\uffb0\062\uffb0\001\002\000\004\006\u0146\001\002" +
    "\000\004\004\u0147\001\002\000\004\043\u0148\001\002\000" +
    "\004\004\u0149\001\002\000\006\046\uffb4\062\uffb4\001\002" +
    "\000\004\006\u014b\001\002\000\004\004\u014c\001\002\000" +
    "\004\034\u014d\001\002\000\004\004\u014e\001\002\000\006" +
    "\046\uffa7\062\uffa7\001\002\000\004\006\u0150\001\002\000" +
    "\004\004\u0151\001\002\000\012\026\123\034\124\057\122" +
    "\063\121\001\002\000\004\004\u0153\001\002\000\006\046" +
    "\uffa8\062\uffa8\001\002\000\004\004\u0133\001\002\000\006" +
    "\050\uffe9\062\uffe9\001\002\000\006\046\uffc2\062\uffc2\001" +
    "\002\000\004\045\u015a\001\002\000\004\046\u0159\001\002" +
    "\000\004\011\ufff7\001\002\000\004\004\u0133\001\002\000" +
    "\006\046\u015c\062\u0154\001\002\000\006\050\uffea\062\uffea" +
    "\001\002\000\004\045\u015e\001\002\000\004\004\u0166\001" +
    "\002\000\006\050\u0161\062\u0160\001\002\000\004\045\u0163" +
    "\001\002\000\004\046\u0162\001\002\000\004\011\ufff3\001" +
    "\002\000\004\004\u0166\001\002\000\004\046\u016e\001\002" +
    "\000\004\062\u016b\001\002\000\006\036\333\065\330\001" +
    "\002\000\004\062\u0168\001\002\000\004\004\u016a\001\002" +
    "\000\004\046\uffdd\001\002\000\004\065\330\001\002\000" +
    "\004\004\u016c\001\002\000\004\036\333\001\002\000\004" +
    "\046\uffdc\001\002\000\006\050\uffe2\062\uffe2\001\002\000" +
    "\004\046\u0170\001\002\000\006\050\uffe1\062\uffe1\001\002" +
    "\000\004\045\u0173\001\002\000\006\050\u017f\062\u017e\001" +
    "\002\000\004\004\u0179\001\002\000\006\046\uffb6\062\uffb6" +
    "\001\002\000\006\046\uffb5\062\uffb5\001\002\000\006\046" +
    "\uffb9\062\uffb9\001\002\000\006\046\uffb7\062\uffb7\001\002" +
    "\000\006\046\u017c\062\u017b\001\002\000\012\036\333\037" +
    "\u0136\040\u0137\041\u0138\001\002\000\006\046\uffb8\062\uffb8" +
    "\001\002\000\004\004\u0179\001\002\000\006\050\uffe5\062" +
    "\uffe5\001\002\000\006\046\uffba\062\uffba\001\002\000\004" +
    "\045\u0181\001\002\000\004\046\u0180\001\002\000\004\011" +
    "\ufff5\001\002\000\004\004\u0179\001\002\000\006\046\u0183" +
    "\062\u017b\001\002\000\006\050\uffe6\062\uffe6\001\002\000" +
    "\004\045\270\001\002\000\006\050\u0186\062\272\001\002" +
    "\000\004\046\u0187\001\002\000\004\011\ufff4\001\002\000" +
    "\004\045\u018a\001\002\000\006\050\u018e\062\u018d\001\002" +
    "\000\004\004\u016c\001\002\000\004\046\u018c\001\002\000" +
    "\006\050\uffe7\062\uffe7\001\002\000\004\045\u0190\001\002" +
    "\000\004\046\u018f\001\002\000\004\011\ufff6\001\002\000" +
    "\004\004\u016c\001\002\000\004\046\u0192\001\002\000\006" +
    "\050\uffe8\062\uffe8\001\002\000\004\045\u0194\001\002\000" +
    "\004\004\u019f\001\002\000\006\050\u0197\062\u0196\001\002" +
    "\000\004\045\u0199\001\002\000\004\046\u0198\001\002\000" +
    "\004\011\ufffb\001\002\000\004\004\u019f\001\002\000\006" +
    "\046\uffcc\062\uffcc\001\002\000\006\046\uffcb\062\uffcb\001" +
    "\002\000\006\046\uffca\062\uffca\001\002\000\006\046\uffc9" +
    "\062\uffc9\001\002\000\006\046\u01a7\062\u01a6\001\002\000" +
    "\010\013\246\020\u01a0\021\u013a\001\002\000\004\004\u01a1" +
    "\001\002\000\004\006\u01a2\001\002\000\004\004\u01a3\001" +
    "\002\000\010\034\226\057\224\063\223\001\002\000\004" +
    "\004\u01a5\001\002\000\006\046\uffad\062\uffad\001\002\000" +
    "\004\004\u019f\001\002\000\006\050\ufff0\062\ufff0\001\002" +
    "\000\006\046\uffcd\062\uffcd\001\002\000\006\046\u01aa\062" +
    "\u01a6\001\002\000\006\050\uffef\062\uffef\001\002\000\004" +
    "\045\u01ac\001\002\000\004\004\u01b0\001\002\000\004\062" +
    "\u01b6\001\002\000\004\062\u01b4\001\002\000\004\046\u01b1" +
    "\001\002\000\006\013\246\020\u01a0\001\002\000\004\050" +
    "\u01b2\001\002\000\004\046\u01b3\001\002\000\004\011\ufff8" +
    "\001\002\000\004\004\245\001\002\000\004\046\uffb2\001" +
    "\002\000\004\004\u01b8\001\002\000\004\046\uffb3\001\002" +
    "\000\004\020\u01a0\001\002\000\004\005\u01bc\001\002\000" +
    "\004\005\u01be\001\002\000\004\005\ufffd\001\002\000\004" +
    "\060\011\001\002\000\004\005\ufffe\001\002\000\006\052" +
    "\u01bf\060\011\001\002\000\004\010\u01c0\001\002\000\004" +
    "\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01be\000\006\002\005\003\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\024\001" +
    "\001\000\004\007\u01aa\001\001\000\004\007\u0192\001\001" +
    "\000\004\023\u0187\001\001\000\004\035\u0183\001\001\000" +
    "\004\023\u0170\001\001\000\004\035\u015c\001\001\000\004" +
    "\023\u0121\001\001\000\004\035\256\001\001\000\004\007" +
    "\234\001\001\000\004\007\146\001\001\000\002\001\001" +
    "\000\004\065\026\001\001\000\004\066\040\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\070\044\072\043\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\071\141\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\107\055\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\073\062\074\061\107\060\001\001\000\004\075\132" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\076" +
    "\065\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\107\070\111\074\114\073\001\001\000" +
    "\006\105\111\110\113\001\001\000\010\107\070\111\074" +
    "\114\104\001\001\000\010\107\070\111\074\114\102\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\107\070" +
    "\111\074\114\101\001\001\000\002\001\001\000\010\107" +
    "\070\111\074\114\100\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\112\127\001\001\000\004\113" +
    "\115\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\104\124\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\074\133" +
    "\107\060\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\067\136\001\001\000\004\066\137\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\070\142\072\043\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\056\160\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\015\232\016\173" +
    "\017\165\020\167\021\171\022\166\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\015\170\016\173\017\165\020\167\021\171\022" +
    "\166\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\103\224\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\016\231\017\165\020\167\021\171\022\166\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\057\236\001\001\000\004\010\254\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\243\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\063\270\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\026\277\036\u011f\037\313\040\275\041\300" +
    "\042\276\043\301\044\305\045\307\046\310\047\302\051" +
    "\304\052\312\053\311\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\026" +
    "\277\036\306\037\313\040\275\041\300\042\276\043\301" +
    "\044\305\045\307\046\310\047\302\051\304\052\312\053" +
    "\311\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\026\277\037\316\040\275\041\300\042\276\043\301\044" +
    "\305\045\307\046\310\047\302\051\304\052\312\053\311" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\106\350\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\104\374\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\050" +
    "\u0110\104\u0111\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\104\u0114\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\060" +
    "\u012a\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\013\u012d\024\u0131\025\u0130\026\u012f\027\u012e\030" +
    "\u0133\031\u012c\032\u0134\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\104\u0151\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\013\u012d" +
    "\025\u0155\026\u012f\027\u012e\030\u0133\031\u012c\032\u0134\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\013\u012d\024" +
    "\u015a\025\u0130\026\u012f\027\u012e\030\u0133\031\u012c\032\u0134" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\064" +
    "\u015e\001\001\000\010\026\u0166\041\u0164\054\u016e\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\026\u0166\041\u0164\054\u0163\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\041\u0168\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\026\u016c\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\062\u0171\001\001\000\002\001" +
    "\001\000\016\026\u0179\027\u0176\030\u0173\032\u0174\033\u0177" +
    "\034\u0175\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\026\u0179\027\u0176\030" +
    "\u0173\032\u0174\034\u017c\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\026\u0179\027\u0176\030\u0173\032\u0174\033\u0181" +
    "\034\u0175\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\063\u0184\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\061\u0188\001\001\000\002\001" +
    "\001\000\004\026\u018a\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\026\u0190\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\055\u0194\001\001\000\014\004\u01a8\010" +
    "\u019a\011\u0199\012\u019b\013\u019c\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\004\u019d\010\u019a\011\u0199\012\u019b\013\u019c\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\103" +
    "\u01a3\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\010\u019a\011\u01a7\012\u019b\013\u019c\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\010\u01ac\012\u01ad\014\u01ae\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\u01b4\001\001\000\002\001\001" +
    "\000\004\012\u01b6\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\003\u01ba\005\u01b9\001\001\000\004\003\u01bc" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol sym;
    
    public Solicitud temporal = new Solicitud();
    public Map<String,String> lista_temporal = new HashMap<>();
    public Map<String,String> res_temp = new HashMap<>();
    public ArrayList<Consulta> lista_consultas = new ArrayList<>();
    public ArrayList<Solicitud> lista_solicitudes = new ArrayList<>();
    public Usuario logeado = new Usuario();
    public Usuario retorno = new Usuario();
    public Consulta cons_temp = new Consulta();
    public String armando = "";

    public Symbol getS(){
        return this.sym;
    }

    public void agregarParametroAMap(String key, String valor){
        if (lista_temporal.containsKey(key)){
            temporal.setTieneErrores(true);
            temporal.setDescripcion_error(temporal.getDescripcion_error()+"Existe ya un parametro para "+key+" y se está intentando enviar otro: "+valor+"\n");
            lista_temporal.put("ERROR","PARAMETROS REPETIDOS");
            String tem = lista_temporal.get(key);
            if (lista_temporal.get(key).equals("OPCIONES")){
                tem += "\t"+valor;
            } else {
                tem += "\n"+valor;
            }
            lista_temporal.put(key,tem);
        } else {
            lista_temporal.put(key,valor);
        }
    }

    public void imp(String texto){
        System.out.println(texto);
    }

    public void report_fatal_error(String message, Object info) {
        System.out.println("reportfatal "+message+info);
    }
    public void report_fatal_error(Symbol cur) {
        System.out.println("unrecovered_syntax_error");
    }

    public void syntax_error(Symbol cur_token) {
        System.out.println(symbl_name_from_id(expected_token_ids().get(0)));
        System.out.println("syntaxerr: " + symbl_name_from_id(cur_token.sym) +" Linea: "+cur_token.right+" Columna: "+cur_token.left+" Valor:"+cur_token.value);
    }

    protected int error_sync_size() {
        return 1;
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= INICIOE SOLICITUDESP MAYORQ bloque_solicitudes INICIOE FINSOLICITUDES MAYORQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= solicitud 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // bloque_solicitudes ::= bloque_solicitudes solicitud 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_solicitudes",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // bloque_solicitudes ::= solicitud 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_solicitudes",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // solicitud ::= INICIOE INICIOS COMILLAS tipo_solicitud MENORQ FINS FINE 
            {
              Object RESULT =null;
		lista_solicitudes.add(temporal); temporal = new Solicitud();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("solicitud",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // tipo_solicitud ::= CREARU inicio_param_usuario bloque1 CORCHETEC LLAVEC 
            {
              Object RESULT =null;
		temporal.setTipo("CREAR_USUARIO");  logeado = new Usuario();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_solicitud",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // tipo_solicitud ::= MODIFICARU inicio_param_usuario bloque2 CORCHETEC LLAVEC 
            {
              Object RESULT =null;
		temporal.setTipo("MODIFICAR_USUARIO");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_solicitud",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // tipo_solicitud ::= ELIMINARU inicio_param_usuario bloque3 CORCHETEC LLAVEC 
            {
              Object RESULT =null;
		temporal.setTipo("ELIMINAR_USUARIO");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_solicitud",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // tipo_solicitud ::= LOGINU inicio_param_usuario LLAVEA parametro_login LLAVEC CORCHETEC LLAVEC 
            {
              Object RESULT =null;
		retorno = logeado; logeado = new Usuario(); temporal.setTipo("LOGIN");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_solicitud",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // tipo_solicitud ::= NUEVOFP inicio_param_formulario bloque4 CORCHETEC LLAVEC 
            {
              Object RESULT =null;
		temporal.setTipo("NUEVO_FORMULARIO");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_solicitud",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // tipo_solicitud ::= ELIMINARF inicio_param_formulario bloque5 CORCHETEC LLAVEC 
            {
              Object RESULT =null;
		temporal.setTipo("ELIMINAR_FORMULARIO");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_solicitud",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // tipo_solicitud ::= MODIFICARF inicio_param_formulario bloque6 CORCHETEC LLAVEC 
            {
              Object RESULT =null;
		temporal.setTipo("MODIFICAR_FORMULARIO");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_solicitud",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // tipo_solicitud ::= AGREGARC inicio_param_componente bloque7 CORCHETEC LLAVEC 
            {
              Object RESULT =null;
		temporal.setTipo("AGREGAR_COMPONENTE");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_solicitud",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // tipo_solicitud ::= ELIMINARC inicio_param_componente bloque8 CORCHETEC LLAVEC 
            {
              Object RESULT =null;
		temporal.setTipo("ELIMINAR_COMPONENTE");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_solicitud",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // tipo_solicitud ::= MODIFICARC inicio_param_componente bloque7 CORCHETEC LLAVEC 
            {
              Object RESULT =null;
		temporal.setTipo("MODIFICAR_COMPONENTE");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_solicitud",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // tipo_solicitud ::= CONSULTARD inicio_param_datos bloque9 CORCHETEC LLAVEC 
            {
              Object RESULT =null;
		temporal.setTipo("CONSULTAR_DATOS");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_solicitud",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // bloque1 ::= bloque1 COMA LLAVEA bloque_usuario1 LLAVEC 
            {
              Object RESULT =null;
		temporal.getCuantas().add(lista_temporal); lista_temporal = new HashMap<>(); temporal.setTieneErrores(false);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque1",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // bloque1 ::= LLAVEA bloque_usuario1 LLAVEC 
            {
              Object RESULT =null;
		temporal.getCuantas().add(lista_temporal); lista_temporal = new HashMap<>(); temporal.setTieneErrores(false);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque1",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // bloque2 ::= bloque2 COMA LLAVEA bloque_usuario2 LLAVEC 
            {
              Object RESULT =null;
		temporal.getCuantas().add(lista_temporal); lista_temporal = new HashMap<>(); temporal.setTieneErrores(false);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque2",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // bloque2 ::= LLAVEA bloque_usuario2 LLAVEC 
            {
              Object RESULT =null;
		temporal.getCuantas().add(lista_temporal); lista_temporal = new HashMap<>(); temporal.setTieneErrores(false);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque2",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // bloque3 ::= bloque3 COMA LLAVEA parametro_usuario LLAVEC 
            {
              Object RESULT =null;
		temporal.getCuantas().add(lista_temporal); lista_temporal = new HashMap<>(); temporal.setTieneErrores(false);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque3",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // bloque3 ::= LLAVEA parametro_usuario LLAVEC 
            {
              Object RESULT =null;
		temporal.getCuantas().add(lista_temporal); lista_temporal = new HashMap<>(); temporal.setTieneErrores(false);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque3",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // bloque4 ::= bloque4 COMA LLAVEA bloque_formulario1 LLAVEC 
            {
              Object RESULT =null;
		temporal.getCuantas().add(lista_temporal); lista_temporal = new HashMap<>(); temporal.setTieneErrores(false);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque4",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // bloque4 ::= LLAVEA bloque_formulario1 LLAVEC 
            {
              Object RESULT =null;
		temporal.getCuantas().add(lista_temporal); lista_temporal = new HashMap<>(); temporal.setTieneErrores(false);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque4",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // bloque5 ::= bloque5 COMA LLAVEA parametro_id LLAVEC 
            {
              Object RESULT =null;
		temporal.getCuantas().add(lista_temporal); lista_temporal = new HashMap<>(); temporal.setTieneErrores(false);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque5",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // bloque5 ::= LLAVEA parametro_id LLAVEC 
            {
              Object RESULT =null;
		temporal.getCuantas().add(lista_temporal); lista_temporal = new HashMap<>(); temporal.setTieneErrores(false);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque5",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // bloque6 ::= bloque6 COMA LLAVEA bloque_formulario2 LLAVEC 
            {
              Object RESULT =null;
		temporal.getCuantas().add(lista_temporal); lista_temporal = new HashMap<>(); temporal.setTieneErrores(false);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque6",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // bloque6 ::= LLAVEA bloque_formulario2 LLAVEC 
            {
              Object RESULT =null;
		temporal.getCuantas().add(lista_temporal); lista_temporal = new HashMap<>(); temporal.setTieneErrores(false);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque6",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // bloque7 ::= bloque7 COMA LLAVEA bloque_componente1 LLAVEC 
            {
              Object RESULT =null;
		temporal.getCuantas().add(lista_temporal); lista_temporal = new HashMap<>(); temporal.setTieneErrores(false);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque7",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // bloque7 ::= LLAVEA bloque_componente1 LLAVEC 
            {
              Object RESULT =null;
		temporal.getCuantas().add(lista_temporal); lista_temporal = new HashMap<>(); temporal.setTieneErrores(false);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque7",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // bloque8 ::= bloque8 COMA LLAVEA bloque_eliminar LLAVEC 
            {
              Object RESULT =null;
		temporal.getCuantas().add(lista_temporal); lista_temporal = new HashMap<>(); temporal.setTieneErrores(false);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque8",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // bloque8 ::= LLAVEA bloque_eliminar LLAVEC 
            {
              Object RESULT =null;
		temporal.getCuantas().add(lista_temporal); lista_temporal = new HashMap<>(); temporal.setTieneErrores(false);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque8",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // inicio_param_usuario ::= COMILLAS MAYORQ LLAVEA COMILLAS CREDENCIALES COMILLAS DOSP CORCHETEA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio_param_usuario",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // inicio_param_formulario ::= COMILLAS MAYORQ LLAVEA COMILLAS PARAMF COMILLAS DOSP CORCHETEA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio_param_formulario",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // inicio_param_componente ::= COMILLAS MAYORQ LLAVEA COMILLAS PARAMC COMILLAS DOSP CORCHETEA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio_param_componente",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // bloque_eliminar ::= parametro_id COMA parametro_formulario 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_eliminar",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // bloque_eliminar ::= parametro_formulario COMA parametro_id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_eliminar",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // bloque_componente1 ::= bloque_componente1 COMA parametros_agregar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_componente1",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // bloque_componente1 ::= parametros_agregar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_componente1",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // parametros_agregar ::= parametro_id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_agregar",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // parametros_agregar ::= parametro_formulario 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_agregar",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // parametros_agregar ::= parametro_nombre_campo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_agregar",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // parametros_agregar ::= parametro_clase 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_agregar",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // parametros_agregar ::= parametro_indice 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_agregar",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // parametros_agregar ::= parametro_texto 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_agregar",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // parametros_agregar ::= parametro_alineacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_agregar",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // parametros_agregar ::= parametro_opciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_agregar",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // parametros_agregar ::= parametro_requerido 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_agregar",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // parametros_agregar ::= parametro_filas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_agregar",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // parametros_agregar ::= parametro_columnas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_agregar",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // parametros_agregar ::= parametro_url 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_agregar",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // bloque_usuario1 ::= bloque_usuario1 COMA parametros_crear 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_usuario1",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // bloque_usuario1 ::= parametros_crear 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_usuario1",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // parametros_crear ::= parametro_usuario 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_crear",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // parametros_crear ::= parametro_contra 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_crear",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // parametros_crear ::= parametro_fecha 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_crear",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // bloque_usuario2 ::= bloque_usuario2 COMA parametros_modificarU 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_usuario2",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // bloque_usuario2 ::= parametros_modificarU 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_usuario2",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // parametros_modificarU ::= parametro_usuario_antiguo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_modificarU",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // parametros_modificarU ::= parametro_usuario_nuevo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_modificarU",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // parametros_modificarU ::= parametro_contra_nueva 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_modificarU",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // parametros_modificarU ::= parametro_fecha_modificacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_modificarU",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // bloque_formulario1 ::= bloque_formulario1 COMA parametros_formulario 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_formulario1",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // bloque_formulario1 ::= parametros_formulario 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_formulario1",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // parametros_formulario ::= parametro_id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_formulario",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // parametros_formulario ::= parametro_titulo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_formulario",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // parametros_formulario ::= parametro_nombre 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_formulario",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // parametros_formulario ::= parametro_tema 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_formulario",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // parametros_formulario ::= parametro_usuario_creacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_formulario",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // parametros_formulario ::= parametro_fecha 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_formulario",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // bloque_formulario2 ::= bloque_formulario2 COMA parametros_formulario2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_formulario2",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // bloque_formulario2 ::= parametros_formulario2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_formulario2",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // parametros_formulario2 ::= parametro_id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_formulario2",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // parametros_formulario2 ::= parametro_titulo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_formulario2",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // parametros_formulario2 ::= parametro_nombre 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_formulario2",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // parametros_formulario2 ::= parametro_tema 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_formulario2",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // parametro_tema ::= COMILLAS TEMAP COMILLAS DOSP COMILLAS TEMA COMILLAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		agregarParametroAMap("TEMA",e1.toString());System.out.println("ingresado tema"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_tema",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // parametro_login ::= parametro_usuario COMA parametro_contra 
            {
              Object RESULT =null;
		temporal.getCuantas().add(lista_temporal); lista_temporal = new HashMap<>(); temporal.setTieneErrores(false);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_login",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // parametro_login ::= parametro_contra COMA parametro_usuario 
            {
              Object RESULT =null;
		temporal.getCuantas().add(lista_temporal); lista_temporal = new HashMap<>(); temporal.setTieneErrores(false);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_login",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // parametro_usuario ::= COMILLAS USUARIOP COMILLAS DOSP COMILLAS USUARIO COMILLAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		agregarParametroAMap("USUARIO",e1.toString()); logeado.setUsuario(e1.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_usuario",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // parametro_usuario_creacion ::= COMILLAS USUARIOCP COMILLAS DOSP COMILLAS USUARIO COMILLAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		agregarParametroAMap("USUARIO_CREACION",e1.toString()); System.out.println("ingresado usuario creacion");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_usuario_creacion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // parametro_usuario_antiguo ::= COMILLAS USUARIOAP COMILLAS DOSP COMILLAS USUARIO COMILLAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		agregarParametroAMap("USUARIO_ANTIGUO",e1.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_usuario_antiguo",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // parametro_usuario_nuevo ::= COMILLAS USUARIONP COMILLAS DOSP COMILLAS USUARIO COMILLAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		agregarParametroAMap("USUARIO_NUEVO",e1.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_usuario_nuevo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // parametro_contra ::= COMILLAS CONTRAP COMILLAS DOSP COMILLAS tipo_palabra COMILLAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		agregarParametroAMap("CONTRA",e1.toString()); logeado.setPassword(e1.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_contra",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // parametro_contra_nueva ::= COMILLAS NUEVOP COMILLAS DOSP COMILLAS tipo_palabra COMILLAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		agregarParametroAMap("CONTRA_NUEVA",e1.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_contra_nueva",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // parametro_fecha ::= COMILLAS FECHACP COMILLAS DOSP COMILLAS FECHA COMILLAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		agregarParametroAMap("FECHA",e1.toString());System.out.println("ingresado usuario creacion");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_fecha",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // parametro_fecha_modificacion ::= COMILLAS FECHAMP COMILLAS DOSP COMILLAS FECHA COMILLAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		agregarParametroAMap("FECHA_MODIFICACION",e1.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_fecha_modificacion",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // parametro_id ::= COMILLAS IDP COMILLAS DOSP COMILLAS ID COMILLAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		agregarParametroAMap("ID",e1.toString()); System.out.println("ingresado id");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_id",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // parametro_titulo ::= COMILLAS TITULOP COMILLAS DOSP COMILLAS tipo_opcion COMILLAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		agregarParametroAMap("TITULO",e1.toString()); System.out.println("ingresado titulo");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_titulo",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // parametro_nombre ::= COMILLAS NOMBREP COMILLAS DOSP COMILLAS USUARIO COMILLAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		agregarParametroAMap("NOMBRE",e1.toString()); System.out.println("ingresado nombre");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_nombre",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // parametro_nombre_campo ::= COMILLAS NOMBREC COMILLAS DOSP COMILLAS USUARIO COMILLAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		agregarParametroAMap("NOMBRE_CAMPO",e1.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_nombre_campo",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // parametro_formulario ::= COMILLAS FORMULARIOC COMILLAS DOSP COMILLAS ID COMILLAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		agregarParametroAMap("FORMULARIO",e1.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_formulario",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // tipos_de_clases ::= CLASENORMAL 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e1.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_de_clases",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // tipos_de_clases ::= CLASEAREA 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e1.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_de_clases",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // tipos_de_clases ::= CLASEOPCIONES 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e1.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_de_clases",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // tipos_de_clases ::= CLASEIMAGEN 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e1.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_de_clases",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // tipos_de_clases ::= CLASEBOTON 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e1.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_de_clases",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // parametro_clase ::= COMILLAS CLASE COMILLAS DOSP COMILLAS tipos_de_clases COMILLAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		agregarParametroAMap("CLASE",e1.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_clase",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // parametro_indice ::= COMILLAS INDICEC COMILLAS DOSP COMILLAS NUMERO COMILLAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		agregarParametroAMap("INDICE",e1.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_indice",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // parametro_texto ::= COMILLAS TEXTOVC COMILLAS DOSP COMILLAS tipo_opcion COMILLAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		agregarParametroAMap("TEXTO_VISIBLE",e1.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_texto",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // parametro_alineacion ::= COMILLAS ALINEAC COMILLAS DOSP COMILLAS ALINEA COMILLAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		agregarParametroAMap("ALINEACION",e1.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_alineacion",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // parametro_requerido ::= COMILLAS REQUERIDO COMILLAS DOSP COMILLAS BOOL COMILLAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		agregarParametroAMap("REQUERIDO",e1.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_requerido",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // parametro_opciones ::= COMILLAS OPCIONES COMILLAS DOSP COMILLAS bloque_opciones COMILLAS 
            {
              Object RESULT =null;
		agregarParametroAMap("OPCIONES",armando); armando = "";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_opciones",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // bloque_opciones ::= bloque_opciones OR tipo_opcion 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		armando += e1.toString()+"\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_opciones",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // bloque_opciones ::= tipo_opcion 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		armando += e1.toString()+"\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_opciones",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // tipo_opcion ::= TITULO 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e1.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_opcion",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // tipo_opcion ::= USUARIO 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e1.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_opcion",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // tipo_opcion ::= ID 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e1.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_opcion",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // tipo_opcion ::= NUMERO 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e1.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_opcion",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // tipo_palabra ::= USUARIO 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e1.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_palabra",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // tipo_palabra ::= ID 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e1.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_palabra",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // tipo_palabra ::= NUMERO 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e1.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_palabra",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // parametro_filas ::= COMILLAS FILAS COMILLAS DOSP COMILLAS NUMERO COMILLAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		agregarParametroAMap("FILAS",e1.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_filas",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // parametro_columnas ::= COMILLAS COLUMNAS COMILLAS DOSP COMILLAS NUMERO COMILLAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		agregarParametroAMap("COLUMNAS",e1.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_columnas",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // parametro_url ::= COMILLAS URLC COMILLAS DOSP COMILLAS URL COMILLAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		agregarParametroAMap("URL",e1.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_url",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // inicio_param_datos ::= COMILLAS MAYORQ LLAVEA COMILLAS CONSULTASP COMILLAS DOSP CORCHETEA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio_param_datos",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // bloque9 ::= LLAVEA bloque_consultas LLAVEC bloque9P 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque9",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // bloque9P ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque9P",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // bloque9P ::= COMA bloque9 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque9P",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // bloque_consultas ::= descripcion_consulta bloque_consultasP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_consultas",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // bloque_consultasP ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_consultasP",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // bloque_consultasP ::= COMA bloque_consultas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_consultasP",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // descripcion_consulta ::= COMILLAS NOCONSULTA COMILLAS DOSP COMILLAS SELECT DE campo CORCHETEA nombre_campos CORCHETEC restricciones COMILLAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		 cons_temp.setNoconsulta(e1.toString()); cons_temp.setForm(e2.toString()); lista_consultas.add(cons_temp); temporal.getConsulta().add(cons_temp); cons_temp = new Consulta(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("descripcion_consulta",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // campo ::= ID 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e1.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("campo",69, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // campo ::= USUARIO 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e1.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("campo",69, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // nombre_campos ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nombre_campos",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // nombre_campos ::= campos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nombre_campos",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // campos ::= campo camposP 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 cons_temp.getCampos().add(e1.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("campos",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // camposP ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("camposP",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // camposP ::= COMA campos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("camposP",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // restricciones ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("restricciones",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // restricciones ::= WHERE CORCHETEA restriccion CORCHETEC 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Map<String,String>> e1 = (ArrayList<Map<String,String>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 cons_temp.setRestricciones(e1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("restricciones",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // restriccion ::= restriccion AND restriccion 
            {
              ArrayList<Map<String,String>> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Map<String,String>> e1 = (ArrayList<Map<String,String>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Map<String,String>> e2 = (ArrayList<Map<String,String>>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<Map<String,String>> para = new ArrayList<>(e1); Map<String,String> te = new HashMap<>(); te.put("OPLOGICO","AND"); para.add(te); para.addAll(e2); RESULT = para; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("restriccion",74, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // restriccion ::= restriccion OROP restriccion 
            {
              ArrayList<Map<String,String>> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Map<String,String>> e1 = (ArrayList<Map<String,String>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Map<String,String>> e2 = (ArrayList<Map<String,String>>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<Map<String,String>> para = new ArrayList<>(e1); Map<String,String> te = new HashMap<>(); te.put("OPLOGICO","OR"); para.add(te); para.addAll(e2); RESULT = para; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("restriccion",74, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // restriccion ::= NOT restriccion 
            {
              ArrayList<Map<String,String>> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Map<String,String>> e1 = (ArrayList<Map<String,String>>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<Map<String,String>> para = e1; para.get(para.size()-1).put("NOT","true"); RESULT = para;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("restriccion",74, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // restriccion ::= PARENTESISA restriccion PARENTESISC 
            {
              ArrayList<Map<String,String>> RESULT =null;
		 imp("condicional con parentesis"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("restriccion",74, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // restriccion ::= condicional 
            {
              ArrayList<Map<String,String>> RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Map<String,String> e2 = (Map<String,String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<Map<String,String>> para = new ArrayList<>(); para.add(e2); RESULT = para; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("restriccion",74, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // condicional ::= campo tipo_condicion 
            {
              Map<String,String> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Map<String,String> e2 = (Map<String,String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Map<String,String> para = e2; para.put("CAMPO",e1.toString());  RESULT = para;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional",71, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // tipo_condicion ::= condicion_numerica tipo_numero 
            {
              Map<String,String> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Map<String,String> e2 = (Map<String,String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Map<String,String> para = e2; para.put("OPRELACIONAL",e1.toString());  RESULT = para;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_condicion",70, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // tipo_condicion ::= IGUAL tipo_dato 
            {
              Map<String,String> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Map<String,String> e2 = (Map<String,String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Map<String,String> para = e2; para.put("OPRELACIONAL",e1.toString());  RESULT = para;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_condicion",70, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // condicion_numerica ::= MAYORIGUAL 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e1.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion_numerica",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // condicion_numerica ::= MENORIGUAL 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e1.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion_numerica",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // condicion_numerica ::= MAYORQ 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e1.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion_numerica",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // condicion_numerica ::= MENORQ 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e1.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion_numerica",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // tipo_numero ::= NUMERO 
            {
              Map<String,String> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Map<String,String> para = new HashMap<>(); para.put("TIPO","NUMERO"); para.put("DATO",e1.toString()); RESULT = para;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_numero",72, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // tipo_numero ::= DEC 
            {
              Map<String,String> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Map<String,String> para = new HashMap<>(); para.put("TIPO","DECIMAL"); para.put("DATO",e1.toString()); RESULT = para;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_numero",72, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // tipo_dato ::= NUMERO 
            {
              Map<String,String> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Map<String,String> para = new HashMap<>(); para.put("TIPO","NUMERO"); para.put("DATO",e1.toString()); RESULT = para; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",73, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // tipo_dato ::= APOSTROFE tipo_opcion APOSTROFE 
            {
              Map<String,String> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 Map<String,String> para = new HashMap<>(); para.put("TIPO","STRING"); para.put("DATO",e1.toString()); RESULT = para;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",73, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // tipo_dato ::= DEC 
            {
              Map<String,String> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Map<String,String> para = new HashMap<>(); para.put("TIPO","DECIMAL"); para.put("DATO",e1.toString()); RESULT = para;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",73, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
