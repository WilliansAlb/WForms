
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.Symbol;
import POJOS.Solicitud;
import POJOS.Usuario;
import POJOS.Consulta;
import POJOS.Errores;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\303\000\002\002\004\000\002\002\004\000\002\002" +
    "\004\000\002\100\002\000\002\100\003\000\002\100\004" +
    "\000\002\077\010\000\002\077\010\000\002\077\003\000" +
    "\002\005\004\000\002\005\003\000\002\005\004\000\002" +
    "\003\011\000\002\006\007\000\002\006\007\000\002\006" +
    "\007\000\002\006\011\000\002\006\007\000\002\006\007" +
    "\000\002\006\007\000\002\006\007\000\002\006\007\000" +
    "\002\006\007\000\002\006\007\000\002\055\006\000\002" +
    "\055\003\000\002\101\002\000\002\101\004\000\002\056" +
    "\006\000\002\056\003\000\002\103\002\000\002\103\004" +
    "\000\002\057\006\000\002\057\003\000\002\104\002\000" +
    "\002\104\004\000\002\060\006\000\002\060\003\000\002" +
    "\105\002\000\002\105\004\000\002\061\006\000\002\061" +
    "\003\000\002\106\002\000\002\106\004\000\002\062\006" +
    "\000\002\062\003\000\002\107\002\000\002\107\004\000" +
    "\002\063\006\000\002\063\003\000\002\110\002\000\002" +
    "\110\004\000\002\064\006\000\002\064\004\000\002\111" +
    "\002\000\002\111\004\000\002\007\012\000\002\007\003" +
    "\000\002\023\012\000\002\023\003\000\002\035\012\000" +
    "\002\035\003\000\002\054\005\000\002\054\005\000\002" +
    "\036\004\000\002\112\002\000\002\112\004\000\002\037" +
    "\003\000\002\037\003\000\002\037\003\000\002\037\003" +
    "\000\002\037\003\000\002\037\003\000\002\037\003\000" +
    "\002\037\003\000\002\037\003\000\002\037\003\000\002" +
    "\037\003\000\002\037\003\000\002\037\003\000\002\004" +
    "\004\000\002\102\002\000\002\102\004\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\015\004\000\002\113\002\000\002\113\004\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\024\004\000\002\114\002" +
    "\000\002\114\004\000\002\025\003\000\002\025\003\000" +
    "\002\025\003\000\002\025\003\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\033\004\000\002\115" +
    "\002\000\002\115\004\000\002\034\003\000\002\034\003" +
    "\000\002\034\003\000\002\034\003\000\002\034\003\000" +
    "\002\032\011\000\002\014\005\000\002\014\005\000\002" +
    "\014\003\000\002\010\011\000\002\031\011\000\002\017" +
    "\011\000\002\020\011\000\002\012\011\000\002\021\011" +
    "\000\002\013\011\000\002\022\011\000\002\026\011\000" +
    "\002\027\011\000\002\030\011\000\002\040\011\000\002" +
    "\041\011\000\002\123\003\000\002\123\003\000\002\123" +
    "\003\000\002\123\003\000\002\123\003\000\002\042\011" +
    "\000\002\043\011\000\002\044\011\000\002\045\011\000" +
    "\002\046\011\000\002\047\011\000\002\050\005\000\002" +
    "\050\003\000\002\121\003\000\002\121\003\000\002\121" +
    "\003\000\002\121\003\000\002\120\003\000\002\120\003" +
    "\000\002\120\003\000\002\051\011\000\002\052\011\000" +
    "\002\053\011\000\002\065\012\000\002\065\003\000\002" +
    "\066\006\000\002\066\003\000\002\067\002\000\002\067" +
    "\004\000\002\070\004\000\002\071\002\000\002\071\004" +
    "\000\002\072\005\000\002\116\013\000\002\116\003\000" +
    "\002\117\005\000\002\117\003\000\002\124\003\000\002" +
    "\124\003\000\002\073\002\000\002\073\003\000\002\074" +
    "\004\000\002\075\002\000\002\075\004\000\002\076\002" +
    "\000\002\076\006\000\002\131\005\000\002\131\005\000" +
    "\002\131\004\000\002\131\005\000\002\131\003\000\002" +
    "\131\003\000\002\126\004\000\002\126\004\000\002\125" +
    "\004\000\002\125\004\000\002\122\003\000\002\122\003" +
    "\000\002\122\003\000\002\122\003\000\002\127\003\000" +
    "\002\127\003\000\002\130\003\000\002\130\005\000\002" +
    "\130\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01e3\000\006\003\004\005\005\001\002\000\014\002" +
    "\ufffe\003\010\005\u01e4\051\011\060\012\001\002\000\010" +
    "\003\010\051\011\060\012\001\002\000\004\002\007\001" +
    "\002\000\004\002\001\001\002\000\004\002\ufff9\001\002" +
    "\000\004\010\u01d2\001\002\000\004\004\014\001\002\000" +
    "\004\002\000\001\002\000\030\012\017\014\026\023\025" +
    "\024\015\025\022\044\016\053\023\055\020\077\021\101" +
    "\024\111\030\001\002\000\006\003\161\004\163\001\002" +
    "\000\006\003\u0132\004\u0134\001\002\000\006\003\161\004" +
    "\163\001\002\000\006\003\275\004\276\001\002\000\006" +
    "\003\275\004\276\001\002\000\006\003\u0132\004\u0134\001" +
    "\002\000\006\003\u0132\004\u0134\001\002\000\006\003\275" +
    "\004\276\001\002\000\006\003\161\004\163\001\002\000" +
    "\006\003\161\004\163\001\002\000\004\011\156\001\002" +
    "\000\006\003\032\004\033\001\002\000\006\003\044\045" +
    "\043\001\002\000\006\003\uff67\045\uff67\001\002\000\004" +
    "\010\034\001\002\000\004\045\035\001\002\000\004\004" +
    "\036\001\002\000\004\112\037\001\002\000\004\004\040" +
    "\001\002\000\004\006\041\001\002\000\004\047\042\001" +
    "\002\000\006\003\uff68\045\uff68\001\002\000\006\003\051" +
    "\004\054\001\002\000\004\050\uff65\001\002\000\004\050" +
    "\046\001\002\000\004\046\047\001\002\000\004\011\uffea" +
    "\001\002\000\006\046\uff61\062\153\001\002\000\012\003" +
    "\uff5d\034\uff5d\050\uff5d\063\uff5d\001\002\000\012\003\uff58" +
    "\034\065\050\uff58\063\063\001\002\000\004\046\067\001" +
    "\002\000\004\113\055\001\002\000\004\004\056\001\002" +
    "\000\004\006\057\001\002\000\004\004\060\001\002\000" +
    "\004\114\061\001\002\000\004\116\062\001\002\000\006" +
    "\034\065\063\063\001\002\000\024\003\uff5a\010\uff5a\011" +
    "\uff5a\047\uff5a\050\uff5a\062\uff5a\122\uff5a\123\uff5a\124\uff5a" +
    "\001\002\000\004\047\066\001\002\000\024\003\uff59\010" +
    "\uff59\011\uff59\047\uff59\050\uff59\062\uff59\122\uff59\123\uff59" +
    "\124\uff59\001\002\000\012\003\uff5e\034\uff5e\050\uff5e\063" +
    "\uff5e\001\002\000\006\050\uff64\062\070\001\002\000\006" +
    "\003\044\045\043\001\002\000\004\050\uff66\001\002\000" +
    "\004\050\uff63\001\002\000\010\003\uff55\050\uff55\062\150" +
    "\001\002\000\006\003\076\050\077\001\002\000\006\003" +
    "\uff57\050\uff57\001\002\000\006\046\uff5b\062\uff5b\001\002" +
    "\000\006\004\uff53\115\101\001\002\000\006\046\uff5f\062" +
    "\uff5f\001\002\000\004\047\104\001\002\000\004\004\103" +
    "\001\002\000\006\046\uff5c\062\uff5c\001\002\000\014\003" +
    "\107\032\110\034\065\063\063\117\106\001\002\000\014" +
    "\010\124\011\125\122\126\123\123\124\122\001\002\000" +
    "\014\003\107\032\110\034\065\063\063\117\106\001\002" +
    "\000\024\010\124\011\125\033\uff4c\050\uff4c\120\uff4c\121" +
    "\uff4c\122\126\123\123\124\122\001\002\000\014\003\107" +
    "\032\110\034\065\063\063\117\106\001\002\000\010\050" +
    "\114\120\113\121\115\001\002\000\012\033\uff4d\050\uff4d" +
    "\120\uff4d\121\uff4d\001\002\000\014\003\107\032\110\034" +
    "\065\063\063\117\106\001\002\000\004\004\uff52\001\002" +
    "\000\014\003\107\032\110\034\065\063\063\117\106\001" +
    "\002\000\012\033\uff50\050\uff50\120\113\121\uff50\001\002" +
    "\000\012\033\uff51\050\uff51\120\uff51\121\uff51\001\002\000" +
    "\010\033\121\120\113\121\115\001\002\000\012\033\uff4e" +
    "\050\uff4e\120\uff4e\121\uff4e\001\002\000\006\031\uff46\057" +
    "\uff46\001\002\000\006\031\uff47\057\uff47\001\002\000\006" +
    "\031\uff45\057\uff45\001\002\000\006\031\uff44\057\uff44\001" +
    "\002\000\010\031\137\057\134\125\135\001\002\000\006" +
    "\031\133\057\131\001\002\000\012\033\uff4a\050\uff4a\120" +
    "\uff4a\121\uff4a\001\002\000\012\033\uff43\050\uff43\120\uff43" +
    "\121\uff43\001\002\000\012\033\uff49\050\uff49\120\uff49\121" +
    "\uff49\001\002\000\012\033\uff42\050\uff42\120\uff42\121\uff42" +
    "\001\002\000\012\033\uff41\050\uff41\120\uff41\121\uff41\001" +
    "\002\000\012\026\142\034\143\057\140\063\141\001\002" +
    "\000\012\033\uff48\050\uff48\120\uff48\121\uff48\001\002\000" +
    "\012\033\uff3f\050\uff3f\120\uff3f\121\uff3f\001\002\000\010" +
    "\004\uff6f\103\uff6f\125\uff6f\001\002\000\010\004\uff70\103" +
    "\uff70\125\uff70\001\002\000\010\004\uff72\103\uff72\125\uff72" +
    "\001\002\000\010\004\uff71\103\uff71\125\uff71\001\002\000" +
    "\004\125\145\001\002\000\012\033\uff40\050\uff40\120\uff40" +
    "\121\uff40\001\002\000\012\033\uff4f\050\uff4f\120\uff4f\121" +
    "\uff4f\001\002\000\012\033\uff4b\050\uff4b\120\uff4b\121\uff4b" +
    "\001\002\000\006\034\065\063\063\001\002\000\006\003" +
    "\uff56\050\uff56\001\002\000\006\003\uff54\050\uff54\001\002" +
    "\000\006\003\051\004\054\001\002\000\004\046\uff62\001" +
    "\002\000\004\046\uff60\001\002\000\004\061\157\001\002" +
    "\000\004\007\160\001\002\000\004\002\ufffa\001\002\000" +
    "\006\003\uffc8\045\uffc8\001\002\000\006\003\174\045\173" +
    "\001\002\000\004\010\164\001\002\000\004\045\165\001" +
    "\002\000\004\004\166\001\002\000\004\102\167\001\002" +
    "\000\004\004\170\001\002\000\004\006\171\001\002\000" +
    "\004\047\172\001\002\000\006\003\uffc9\045\uffc9\001\002" +
    "\000\006\003\202\004\206\001\002\000\004\050\uffe4\001" +
    "\002\000\004\050\176\001\002\000\004\046\177\001\002" +
    "\000\004\011\ufff3\001\002\000\006\046\uffa7\062\uffa7\001" +
    "\002\000\006\046\uffa4\062\uffa4\001\002\000\006\046\uffa3" +
    "\062\uffa3\001\002\000\006\046\uffa6\062\uffa6\001\002\000" +
    "\004\046\246\001\002\000\006\046\uffa5\062\uffa5\001\002" +
    "\000\012\015\213\016\216\017\214\022\215\001\002\000" +
    "\006\046\uffa9\062\210\001\002\000\006\003\202\004\206" +
    "\001\002\000\004\046\uffaa\001\002\000\004\046\uffa8\001" +
    "\002\000\004\004\241\001\002\000\004\004\231\001\002" +
    "\000\004\004\224\001\002\000\004\004\217\001\002\000" +
    "\004\006\220\001\002\000\004\004\221\001\002\000\004" +
    "\034\222\001\002\000\004\004\223\001\002\000\006\046" +
    "\uff89\062\uff89\001\002\000\004\006\225\001\002\000\004" +
    "\004\226\001\002\000\004\035\227\001\002\000\004\004" +
    "\230\001\002\000\006\046\uff85\062\uff85\001\002\000\004" +
    "\006\232\001\002\000\004\004\233\001\002\000\010\034" +
    "\237\057\234\063\235\001\002\000\004\004\uff6c\001\002" +
    "\000\004\004\uff6d\001\002\000\004\004\240\001\002\000" +
    "\004\004\uff6e\001\002\000\006\046\uff87\062\uff87\001\002" +
    "\000\004\006\242\001\002\000\004\004\243\001\002\000" +
    "\004\034\244\001\002\000\004\004\245\001\002\000\006" +
    "\046\uff8a\062\uff8a\001\002\000\006\050\uffe3\062\247\001" +
    "\002\000\006\003\174\045\173\001\002\000\004\050\uffe5" +
    "\001\002\000\004\050\uffe2\001\002\000\006\003\253\045" +
    "\255\001\002\000\004\050\uffe0\001\002\000\004\050\272" +
    "\001\002\000\004\004\257\001\002\000\004\046\266\001" +
    "\002\000\004\013\260\001\002\000\004\004\261\001\002" +
    "\000\004\006\262\001\002\000\004\004\263\001\002\000" +
    "\004\034\264\001\002\000\004\004\265\001\002\000\006" +
    "\046\uff8c\062\uff8c\001\002\000\006\050\uffdf\062\267\001" +
    "\002\000\006\003\253\045\255\001\002\000\004\050\uffe1" +
    "\001\002\000\004\050\uffde\001\002\000\004\046\273\001" +
    "\002\000\004\011\ufff2\001\002\000\006\003\307\045\306" +
    "\001\002\000\006\003\uffc4\045\uffc4\001\002\000\004\010" +
    "\277\001\002\000\004\045\300\001\002\000\004\004\301" +
    "\001\002\000\004\100\302\001\002\000\004\004\303\001" +
    "\002\000\004\006\304\001\002\000\004\047\305\001\002" +
    "\000\006\003\uffc5\045\uffc5\001\002\000\006\003\322\004" +
    "\321\001\002\000\004\050\uffd0\001\002\000\004\050\311" +
    "\001\002\000\004\046\312\001\002\000\004\011\uffeb\001" +
    "\002\000\006\046\uffbc\062\uffbc\001\002\000\006\046\uffbb" +
    "\062\uffbb\001\002\000\006\046\uffbe\062\uffbe\001\002\000" +
    "\006\046\uffbd\062\uffbd\001\002\000\006\046\uffba\062\uffba" +
    "\001\002\000\006\046\uffb7\062\uffb7\001\002\000\032\036" +
    "\355\056\353\065\352\066\354\067\345\070\350\071\343" +
    "\072\347\073\344\074\342\075\351\076\346\001\002\000" +
    "\006\046\uffb2\062\uffb2\001\002\000\006\046\uffb5\062\uffb5" +
    "\001\002\000\006\046\uffb9\062\uffb9\001\002\000\004\046" +
    "\336\001\002\000\006\046\uffb8\062\uffb8\001\002\000\006" +
    "\046\uffb6\062\uffb6\001\002\000\006\046\uffb3\062\uffb3\001" +
    "\002\000\006\046\uffb4\062\uffb4\001\002\000\006\046\uffc0" +
    "\062\333\001\002\000\006\003\322\004\321\001\002\000" +
    "\004\046\uffc1\001\002\000\004\046\uffbf\001\002\000\006" +
    "\050\uffcf\062\337\001\002\000\006\003\307\045\306\001" +
    "\002\000\004\050\uffd1\001\002\000\004\050\uffce\001\002" +
    "\000\004\004\u012d\001\002\000\004\004\u0128\001\002\000" +
    "\004\004\u0120\001\002\000\004\004\u011b\001\002\000\004" +
    "\004\u0116\001\002\000\004\004\u0111\001\002\000\004\004" +
    "\u010c\001\002\000\004\004\u0107\001\002\000\004\004\u0102" +
    "\001\002\000\004\004\375\001\002\000\004\004\363\001" +
    "\002\000\004\004\356\001\002\000\004\006\357\001\002" +
    "\000\004\004\360\001\002\000\004\063\361\001\002\000" +
    "\004\004\362\001\002\000\006\046\uff84\062\uff84\001\002" +
    "\000\004\006\364\001\002\000\004\004\365\001\002\000" +
    "\014\104\371\105\367\106\372\107\366\110\370\001\002" +
    "\000\004\004\uff7c\001\002\000\004\004\uff7e\001\002\000" +
    "\004\004\uff7b\001\002\000\004\004\uff7f\001\002\000\004" +
    "\004\uff7d\001\002\000\004\004\374\001\002\000\006\046" +
    "\uff7a\062\uff7a\001\002\000\004\006\376\001\002\000\004" +
    "\004\377\001\002\000\004\034\u0100\001\002\000\004\004" +
    "\u0101\001\002\000\006\046\uff81\062\uff81\001\002\000\004" +
    "\006\u0103\001\002\000\004\004\u0104\001\002\000\004\063" +
    "\u0105\001\002\000\004\004\u0106\001\002\000\006\046\uff80" +
    "\062\uff80\001\002\000\004\006\u0108\001\002\000\004\004" +
    "\u0109\001\002\000\004\057\u010a\001\002\000\004\004\u010b" +
    "\001\002\000\006\046\uff6a\062\uff6a\001\002\000\004\006" +
    "\u010d\001\002\000\004\004\u010e\001\002\000\012\026\142" +
    "\034\143\057\140\063\141\001\002\000\004\004\u0110\001" +
    "\002\000\006\046\uff78\062\uff78\001\002\000\004\006\u0112" +
    "\001\002\000\004\004\u0113\001\002\000\004\030\u0114\001" +
    "\002\000\004\004\u0115\001\002\000\006\046\uff76\062\uff76" +
    "\001\002\000\004\006\u0117\001\002\000\004\004\u0118\001" +
    "\002\000\004\064\u0119\001\002\000\004\004\u011a\001\002" +
    "\000\006\046\uff69\062\uff69\001\002\000\004\006\u011c\001" +
    "\002\000\004\004\u011d\001\002\000\004\057\u011e\001\002" +
    "\000\004\004\u011f\001\002\000\006\046\uff79\062\uff79\001" +
    "\002\000\004\006\u0121\001\002\000\004\004\u0122\001\002" +
    "\000\012\026\142\034\143\057\140\063\141\001\002\000" +
    "\006\004\u0126\103\u0125\001\002\000\006\004\uff73\103\uff73" +
    "\001\002\000\012\026\142\034\143\057\140\063\141\001" +
    "\002\000\006\046\uff75\062\uff75\001\002\000\006\004\uff74" +
    "\103\uff74\001\002\000\004\006\u0129\001\002\000\004\004" +
    "\u012a\001\002\000\004\027\u012b\001\002\000\004\004\u012c" +
    "\001\002\000\006\046\uff77\062\uff77\001\002\000\004\006" +
    "\u012e\001\002\000\004\004\u012f\001\002\000\004\057\u0130" +
    "\001\002\000\004\004\u0131\001\002\000\006\046\uff6b\062" +
    "\uff6b\001\002\000\006\003\uffc6\045\uffc6\001\002\000\006" +
    "\003\u013e\045\u013d\001\002\000\004\010\u0135\001\002\000" +
    "\004\045\u0136\001\002\000\004\004\u0137\001\002\000\004" +
    "\054\u0138\001\002\000\004\004\u0139\001\002\000\004\006" +
    "\u013a\001\002\000\004\047\u013b\001\002\000\006\003\uffc7" +
    "\045\uffc7\001\002\000\004\050\u0160\001\002\000\006\003" +
    "\u0141\004\u0145\001\002\000\004\050\uffd4\001\002\000\006" +
    "\046\uff93\062\uff93\001\002\000\006\046\uff92\062\uff92\001" +
    "\002\000\006\046\uff91\062\uff91\001\002\000\006\046\uff97" +
    "\062\u015d\001\002\000\006\046\uff94\062\uff94\001\002\000" +
    "\004\046\u0159\001\002\000\012\036\355\037\u0147\040\u0148" +
    "\041\u0149\001\002\000\006\046\uff95\062\uff95\001\002\000" +
    "\004\004\u0154\001\002\000\004\004\u014f\001\002\000\004" +
    "\004\u014a\001\002\000\004\006\u014b\001\002\000\004\004" +
    "\u014c\001\002\000\004\043\u014d\001\002\000\004\004\u014e" +
    "\001\002\000\006\046\uff90\062\uff90\001\002\000\004\006" +
    "\u0150\001\002\000\004\004\u0151\001\002\000\004\034\u0152" +
    "\001\002\000\004\004\u0153\001\002\000\006\046\uff82\062" +
    "\uff82\001\002\000\004\006\u0155\001\002\000\004\004\u0156" +
    "\001\002\000\012\026\142\034\143\057\140\063\141\001" +
    "\002\000\004\004\u0158\001\002\000\006\046\uff83\062\uff83" +
    "\001\002\000\006\050\uffd3\062\u015a\001\002\000\006\003" +
    "\u013e\045\u013d\001\002\000\004\050\uffd5\001\002\000\004" +
    "\050\uffd2\001\002\000\006\003\u0141\004\u0145\001\002\000" +
    "\004\046\uff98\001\002\000\004\046\uff96\001\002\000\004" +
    "\046\u0161\001\002\000\004\011\uffee\001\002\000\006\003" +
    "\u0165\045\u0164\001\002\000\004\050\u0183\001\002\000\006" +
    "\003\u016d\004\u016c\001\002\000\004\050\uffdc\001\002\000" +
    "\006\046\uff9b\062\uff9b\001\002\000\006\046\uff9a\062\uff9a" +
    "\001\002\000\006\046\uff9e\062\uff9e\001\002\000\006\046" +
    "\uff9f\062\uff9f\001\002\000\006\046\uffa1\062\u0180\001\002" +
    "\000\004\046\u017c\001\002\000\016\021\u0171\036\355\037" +
    "\u0147\040\u0148\041\u0149\042\u0170\001\002\000\006\046\uff99" +
    "\062\uff99\001\002\000\006\046\uff9d\062\uff9d\001\002\000" +
    "\006\046\uff9c\062\uff9c\001\002\000\004\004\u0177\001\002" +
    "\000\004\004\u0172\001\002\000\004\006\u0173\001\002\000" +
    "\004\004\u0174\001\002\000\004\035\u0175\001\002\000\004" +
    "\004\u0176\001\002\000\006\046\uff86\062\uff86\001\002\000" +
    "\004\006\u0178\001\002\000\004\004\u0179\001\002\000\004" +
    "\034\u017a\001\002\000\004\004\u017b\001\002\000\006\046" +
    "\uff8b\062\uff8b\001\002\000\006\050\uffdb\062\u017d\001\002" +
    "\000\006\003\u0165\045\u0164\001\002\000\004\050\uffdd\001" +
    "\002\000\004\050\uffda\001\002\000\006\003\u016d\004\u016c" +
    "\001\002\000\004\046\uffa2\001\002\000\004\046\uffa0\001" +
    "\002\000\004\046\u0184\001\002\000\004\011\ufff0\001\002" +
    "\000\006\003\u0186\045\u0187\001\002\000\006\050\uffcb\062" +
    "\u0196\001\002\000\004\004\u018d\001\002\000\004\050\u0189" +
    "\001\002\000\004\046\u018a\001\002\000\004\011\uffec\001" +
    "\002\000\004\046\u0195\001\002\000\004\062\u0192\001\002" +
    "\000\006\036\355\065\352\001\002\000\004\062\u018f\001" +
    "\002\000\004\004\u0191\001\002\000\004\046\uffc3\001\002" +
    "\000\004\065\352\001\002\000\004\004\u0193\001\002\000" +
    "\004\036\355\001\002\000\004\046\uffc2\001\002\000\006" +
    "\050\uffcb\062\u0196\001\002\000\006\003\u0186\045\u0187\001" +
    "\002\000\004\050\uffcd\001\002\000\004\050\uffca\001\002" +
    "\000\004\050\uffcc\001\002\000\006\003\307\045\306\001" +
    "\002\000\004\050\u019c\001\002\000\004\046\u019d\001\002" +
    "\000\004\011\uffed\001\002\000\006\003\u019f\045\u01a0\001" +
    "\002\000\004\050\uffe8\001\002\000\006\003\u01a5\004\u01aa" +
    "\001\002\000\004\050\u01a2\001\002\000\004\046\u01a3\001" +
    "\002\000\004\011\ufff4\001\002\000\006\046\uffb0\062\u01b5" +
    "\001\002\000\006\046\uffab\062\uffab\001\002\000\006\046" +
    "\uffae\062\uffae\001\002\000\006\046\uffad\062\uffad\001\002" +
    "\000\006\046\uffac\062\uffac\001\002\000\004\046\u01b1\001" +
    "\002\000\010\013\260\020\u01ab\021\u0171\001\002\000\004" +
    "\004\u01ac\001\002\000\004\006\u01ad\001\002\000\004\004" +
    "\u01ae\001\002\000\010\034\237\057\234\063\235\001\002" +
    "\000\004\004\u01b0\001\002\000\006\046\uff88\062\uff88\001" +
    "\002\000\006\050\uffe7\062\u01b3\001\002\000\004\050\uffe9" +
    "\001\002\000\006\003\u019f\045\u01a0\001\002\000\004\050" +
    "\uffe6\001\002\000\006\003\u01a5\004\u01aa\001\002\000\004" +
    "\046\uffb1\001\002\000\004\046\uffaf\001\002\000\006\003" +
    "\u01bb\045\u01ba\001\002\000\004\050\u01c1\001\002\000\004" +
    "\004\u0193\001\002\000\004\050\uffd8\001\002\000\004\046" +
    "\u01bd\001\002\000\006\050\uffd7\062\u01be\001\002\000\006" +
    "\003\u01bb\045\u01ba\001\002\000\004\050\uffd9\001\002\000" +
    "\004\050\uffd6\001\002\000\004\046\u01c2\001\002\000\004" +
    "\011\uffef\001\002\000\004\045\u01c4\001\002\000\006\003" +
    "\u01c5\004\u01c9\001\002\000\004\046\uff8d\001\002\000\004" +
    "\062\u01cf\001\002\000\004\062\u01cd\001\002\000\004\046" +
    "\u01ca\001\002\000\006\013\260\020\u01ab\001\002\000\004" +
    "\050\u01cb\001\002\000\004\046\u01cc\001\002\000\004\011" +
    "\ufff1\001\002\000\004\004\257\001\002\000\004\046\uff8e" +
    "\001\002\000\004\004\u01d1\001\002\000\004\046\uff8f\001" +
    "\002\000\004\020\u01ab\001\002\000\006\003\u01d3\005\u01d6" +
    "\001\002\000\004\005\u01d6\001\002\000\004\005\u01de\001" +
    "\002\000\004\005\ufff7\001\002\000\004\060\u01d7\001\002" +
    "\000\004\004\u01d8\001\002\000\030\012\017\014\026\023" +
    "\025\024\015\025\022\044\016\053\023\055\020\077\021" +
    "\101\024\111\030\001\002\000\004\011\u01da\001\002\000" +
    "\004\061\u01db\001\002\000\004\007\u01dc\001\002\000\004" +
    "\005\ufff5\001\002\000\004\005\ufff8\001\002\000\006\052" +
    "\u01df\060\u01d7\001\002\000\004\010\u01e0\001\002\000\004" +
    "\002\ufffb\001\002\000\004\005\ufff6\001\002\000\004\002" +
    "\uffff\001\002\000\004\002\ufffd\001\002\000\010\003\010" +
    "\051\011\060\012\001\002\000\004\002\ufffc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01e3\000\004\002\005\001\001\000\006\077\u01e2\100" +
    "\u01e1\001\001\000\004\077\012\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\026\001\001" +
    "\000\004\007\u01c2\001\001\000\004\023\u01b7\001\001\000" +
    "\004\007\u019d\001\001\000\004\035\u0199\001\001\000\004" +
    "\035\u0184\001\001\000\004\023\u0161\001\001\000\004\023" +
    "\u0132\001\001\000\004\035\273\001\001\000\004\007\251" +
    "\001\001\000\004\007\161\001\001\000\002\001\001\000" +
    "\004\065\030\001\001\000\004\066\044\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\070\052\072" +
    "\047\116\051\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\071\153\001" +
    "\001\000\002\001\001\000\010\073\073\074\074\124\072" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\124\063\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\067\070\001\001\000\004\066\071\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\075\150\001\001" +
    "\000\004\117\077\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\076\101\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\124" +
    "\104\126\111\131\110\001\001\000\006\122\126\125\146" +
    "\001\001\000\010\124\104\126\111\131\145\001\001\000" +
    "\006\122\126\125\127\001\001\000\010\124\104\126\111" +
    "\131\117\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\124\104\126\111\131\116\001\001\000\002\001\001" +
    "\000\010\124\104\126\111\131\115\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\130\135\001\001\000\004\127\131" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\121\143" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\074\151\124\072\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\070\154\072\047\116" +
    "\051\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\056\174\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\015\203\016\206\017\177\020\202\021\204\022" +
    "\200\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\113\210\001" +
    "\001\000\016\015\211\016\206\017\177\020\202\021\204" +
    "\022\200\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\120\235\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\103\247\001\001\000\004" +
    "\056\250\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\057\253\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\255\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\104\267\001\001\000\004\057\270\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\063\307\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\026\314\036\324\037\331\040" +
    "\312\041\315\042\313\043\316\044\323\045\325\046\326" +
    "\047\317\051\322\052\330\053\327\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\112\333\001" +
    "\001\000\036\026\314\036\334\037\331\040\312\041\315" +
    "\042\313\043\316\044\323\045\325\046\326\047\317\051" +
    "\322\052\330\053\327\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\110\337\001\001\000\004\063\340\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\123\372\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\121\u010e\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\050\u0122" +
    "\121\u0123\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\121\u0126\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\062\u013b\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\026\u0145\027" +
    "\u0142\030\u013e\032\u013f\033\u0143\034\u0141\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\115\u015d\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\121\u0156\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\107\u015a\001\001\000" +
    "\004\062\u015b\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\026\u0145\027\u0142\030\u013e\032\u013f\033\u015e\034" +
    "\u0141\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\060\u0162\001\001\000" +
    "\002\001\001\000\022\013\u0166\024\u016a\025\u0169\026\u0168" +
    "\027\u0167\030\u016d\031\u0165\032\u016e\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\114\u0180\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\105\u017d\001\001\000\004\060\u017e\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\013\u0166\024\u0181" +
    "\025\u0169\026\u0168\027\u0167\030\u016d\031\u0165\032\u016e\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\064\u0187\001\001\000\004\111" +
    "\u0198\001\001\000\010\026\u018d\041\u018b\054\u018a\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\041\u018f\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\026\u0193\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\111\u0196\001\001\000\004\064" +
    "\u0197\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\063\u019a\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\055\u01a0\001\001" +
    "\000\002\001\001\000\014\004\u01a8\010\u01a5\011\u01a3\012" +
    "\u01a6\013\u01a7\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\102\u01b5\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\120\u01ae\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\101\u01b1\001" +
    "\001\000\002\001\001\000\004\055\u01b3\001\001\000\002" +
    "\001\001\000\014\004\u01b6\010\u01a5\011\u01a3\012\u01a6\013" +
    "\u01a7\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\061\u01b8\001\001\000\002\001\001\000\004\026\u01bb\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\106\u01be" +
    "\001\001\000\004\061\u01bf\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\010\u01c5\012\u01c6\014\u01c7\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\u01cd\001\001\000\002" +
    "\001\001\000\004\012\u01cf\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\003\u01d4\005\u01d3\001\001\000\004" +
    "\003\u01e0\001\001\000\004\003\u01dc\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\u01d8" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\077\u01e4\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol sym;
    
    public Solicitud temporal = new Solicitud();
    public Map<String,String> lista_temporal = new HashMap<>();
    public Map<String,String> res_temp = new HashMap<>();
    public ArrayList<Consulta> lista_consultas = new ArrayList<>();
    public ArrayList<Solicitud> lista_solicitudes = new ArrayList<>();
    public ArrayList<Errores> errores = new ArrayList<>();
    public Usuario logeado = new Usuario();
    public Usuario retorno = new Usuario();
    public Consulta cons_temp = new Consulta();
    public String armando = "";
    public boolean error = false;

    public Symbol getS(){
        return this.sym;
    }

    public void agregarParametroAMap(String key, String valor){
        if (lista_temporal.containsKey(key)){
            temporal.setTieneErrores(true);
            temporal.setDescripcion_error(temporal.getDescripcion_error()+"Existe ya un parametro para "+key+" y se está intentando enviar otro: "+valor+"\n");
            lista_temporal.put("ERROR","PARAMETROS REPETIDOS");
            String tem = lista_temporal.get(key);
            if (lista_temporal.get(key).equals("OPCIONES")){
                tem += "\t"+valor;
            } else {
                tem += "\n"+valor;
            }
            lista_temporal.put(key,tem);
        } else {
            lista_temporal.put(key,valor);
        }
    }

    public void imp(String texto){
        System.out.println(texto);
    }

    public void report_fatal_error(String message, Object info) {
        System.out.println("reportfatal "+message+info);
    }
    public void report_fatal_error(Symbol cur) {
        System.out.println("unrecovered_syntax_error");
    }

    public void syntax_error(Symbol cur_token) {
        error = true;
        ArrayList<String> esperados = new ArrayList<>();
        for (int i = 0; i < expected_token_ids().size(); i++){
            if (!symbl_name_from_id(expected_token_ids().get(i)).equals("error")){
                esperados.add(symbl_name_from_id(expected_token_ids().get(i)));
            }
        }
        String nom = symbl_name_from_id(cur_token.sym);
        String tip = "Lexico";
        if (!nom.equals("ERRORLEX")){
            tip = "Sintactico";
        }
        errores.add(new Errores(esperados,cur_token,nom,tip));
    }

    protected int error_sync_size() {
        return 1;
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= INICIOE partida 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= error posibilidad 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // posibilidad ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("posibilidad",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // posibilidad ::= partida 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("posibilidad",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // posibilidad ::= INICIOE partida 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("posibilidad",62, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // partida ::= SOLICITUDESP MAYORQ bloque_solicitudes INICIOE FINSOLICITUDES MAYORQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("partida",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // partida ::= INICIOS COMILLAS tipo_solicitud MENORQ FINS FINE 
            {
              Object RESULT =null;
		lista_solicitudes.add(temporal); temporal = new Solicitud();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("partida",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // partida ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("partida",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // bloque_solicitudes ::= bloque_solicitudes solicitud 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_solicitudes",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // bloque_solicitudes ::= solicitud 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_solicitudes",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // bloque_solicitudes ::= error solicitud 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_solicitudes",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // solicitud ::= INICIOE INICIOS COMILLAS tipo_solicitud MENORQ FINS FINE 
            {
              Object RESULT =null;
		lista_solicitudes.add(temporal); temporal = new Solicitud();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("solicitud",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // tipo_solicitud ::= CREARU inicio_param_usuario bloque1 CORCHETEC LLAVEC 
            {
              Object RESULT =null;
		temporal.setTipo("CREAR_USUARIO");  logeado = new Usuario();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_solicitud",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // tipo_solicitud ::= MODIFICARU inicio_param_usuario bloque2 CORCHETEC LLAVEC 
            {
              Object RESULT =null;
		temporal.setTipo("MODIFICAR_USUARIO");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_solicitud",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // tipo_solicitud ::= ELIMINARU inicio_param_usuario bloque3 CORCHETEC LLAVEC 
            {
              Object RESULT =null;
		temporal.setTipo("ELIMINAR_USUARIO");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_solicitud",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // tipo_solicitud ::= LOGINU inicio_param_usuario LLAVEA parametro_login LLAVEC CORCHETEC LLAVEC 
            {
              Object RESULT =null;
		retorno = logeado; logeado = new Usuario(); temporal.setTipo("LOGIN");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_solicitud",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // tipo_solicitud ::= NUEVOFP inicio_param_formulario bloque4 CORCHETEC LLAVEC 
            {
              Object RESULT =null;
		temporal.setTipo("NUEVO_FORMULARIO");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_solicitud",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // tipo_solicitud ::= ELIMINARF inicio_param_formulario bloque5 CORCHETEC LLAVEC 
            {
              Object RESULT =null;
		temporal.setTipo("ELIMINAR_FORMULARIO");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_solicitud",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // tipo_solicitud ::= MODIFICARF inicio_param_formulario bloque6 CORCHETEC LLAVEC 
            {
              Object RESULT =null;
		temporal.setTipo("MODIFICAR_FORMULARIO");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_solicitud",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // tipo_solicitud ::= AGREGARC inicio_param_componente bloque7 CORCHETEC LLAVEC 
            {
              Object RESULT =null;
		temporal.setTipo("AGREGAR_COMPONENTE");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_solicitud",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // tipo_solicitud ::= ELIMINARC inicio_param_componente bloque8 CORCHETEC LLAVEC 
            {
              Object RESULT =null;
		temporal.setTipo("ELIMINAR_COMPONENTE");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_solicitud",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // tipo_solicitud ::= MODIFICARC inicio_param_componente bloque7 CORCHETEC LLAVEC 
            {
              Object RESULT =null;
		temporal.setTipo("MODIFICAR_COMPONENTE");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_solicitud",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // tipo_solicitud ::= CONSULTARD inicio_param_datos bloque9 CORCHETEC LLAVEC 
            {
              Object RESULT =null;
		temporal.setTipo("CONSULTAR_DATOS");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_solicitud",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // bloque1 ::= LLAVEA bloque_usuario1 LLAVEC bloque1P 
            {
              Object RESULT =null;
		temporal.getCuantas().add(lista_temporal); lista_temporal = new HashMap<>(); temporal.setTieneErrores(false);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque1",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // bloque1 ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque1",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // bloque1P ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque1P",63, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // bloque1P ::= COMA bloque1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque1P",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // bloque2 ::= LLAVEA bloque_usuario2 LLAVEC bloque2P 
            {
              Object RESULT =null;
		temporal.getCuantas().add(lista_temporal); lista_temporal = new HashMap<>(); temporal.setTieneErrores(false);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque2",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // bloque2 ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque2",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // bloque2P ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque2P",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // bloque2P ::= COMA bloque2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque2P",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // bloque3 ::= LLAVEA parametro_usuario LLAVEC bloque3P 
            {
              Object RESULT =null;
		temporal.getCuantas().add(lista_temporal); lista_temporal = new HashMap<>(); temporal.setTieneErrores(false);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque3",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // bloque3 ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque3",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // bloque3P ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque3P",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // bloque3P ::= COMA bloque3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque3P",66, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // bloque4 ::= LLAVEA bloque_formulario1 LLAVEC bloque4P 
            {
              Object RESULT =null;
		temporal.getCuantas().add(lista_temporal); lista_temporal = new HashMap<>(); temporal.setTieneErrores(false);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque4",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // bloque4 ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque4",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // bloque4P ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque4P",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // bloque4P ::= COMA bloque4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque4P",67, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // bloque5 ::= LLAVEA parametro_id LLAVEC bloque5P 
            {
              Object RESULT =null;
		temporal.getCuantas().add(lista_temporal); lista_temporal = new HashMap<>(); temporal.setTieneErrores(false);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque5",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // bloque5 ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque5",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // bloque5P ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque5P",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // bloque5P ::= COMA bloque5 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque5P",68, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // bloque6 ::= LLAVEA bloque_formulario2 LLAVEC bloque6P 
            {
              Object RESULT =null;
		temporal.getCuantas().add(lista_temporal); lista_temporal = new HashMap<>(); temporal.setTieneErrores(false);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque6",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // bloque6 ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque6",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // bloque6P ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque6P",69, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // bloque6P ::= COMA bloque6 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque6P",69, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // bloque7 ::= LLAVEA bloque_componente1 LLAVEC bloque7P 
            {
              Object RESULT =null;
		temporal.getCuantas().add(lista_temporal); lista_temporal = new HashMap<>(); temporal.setTieneErrores(false);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque7",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // bloque7 ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque7",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // bloque7P ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque7P",70, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // bloque7P ::= COMA bloque7 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque7P",70, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // bloque8 ::= LLAVEA bloque_eliminar LLAVEC bloque8P 
            {
              Object RESULT =null;
		temporal.getCuantas().add(lista_temporal); lista_temporal = new HashMap<>(); temporal.setTieneErrores(false);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque8",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // bloque8 ::= error bloque8P 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque8",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // bloque8P ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque8P",71, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // bloque8P ::= COMA bloque8 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque8P",71, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // inicio_param_usuario ::= COMILLAS MAYORQ LLAVEA COMILLAS CREDENCIALES COMILLAS DOSP CORCHETEA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio_param_usuario",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // inicio_param_usuario ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio_param_usuario",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // inicio_param_formulario ::= COMILLAS MAYORQ LLAVEA COMILLAS PARAMF COMILLAS DOSP CORCHETEA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio_param_formulario",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // inicio_param_formulario ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio_param_formulario",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // inicio_param_componente ::= COMILLAS MAYORQ LLAVEA COMILLAS PARAMC COMILLAS DOSP CORCHETEA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio_param_componente",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // inicio_param_componente ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio_param_componente",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // bloque_eliminar ::= parametro_id COMA parametro_formulario 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_eliminar",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // bloque_eliminar ::= parametro_formulario COMA parametro_id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_eliminar",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // bloque_componente1 ::= parametros_agregar bloque_componente1P 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_componente1",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // bloque_componente1P ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_componente1P",72, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // bloque_componente1P ::= COMA bloque_componente1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_componente1P",72, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // parametros_agregar ::= parametro_id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_agregar",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // parametros_agregar ::= parametro_formulario 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_agregar",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // parametros_agregar ::= parametro_nombre_campo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_agregar",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // parametros_agregar ::= parametro_clase 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_agregar",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // parametros_agregar ::= parametro_indice 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_agregar",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // parametros_agregar ::= parametro_texto 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_agregar",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // parametros_agregar ::= parametro_alineacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_agregar",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // parametros_agregar ::= parametro_opciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_agregar",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // parametros_agregar ::= parametro_requerido 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_agregar",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // parametros_agregar ::= parametro_filas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_agregar",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // parametros_agregar ::= parametro_columnas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_agregar",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // parametros_agregar ::= parametro_url 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_agregar",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // parametros_agregar ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_agregar",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // bloque_usuario1 ::= parametros_crear bloque_usuario1P 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_usuario1",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // bloque_usuario1P ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_usuario1P",64, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // bloque_usuario1P ::= COMA bloque_usuario1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_usuario1P",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // parametros_crear ::= parametro_usuario 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_crear",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // parametros_crear ::= parametro_contra 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_crear",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // parametros_crear ::= parametro_fecha 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_crear",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // parametros_crear ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_crear",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // bloque_usuario2 ::= parametros_modificarU bloque_usuario2P 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_usuario2",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // bloque_usuario2P ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_usuario2P",73, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // bloque_usuario2P ::= COMA bloque_usuario2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_usuario2P",73, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // parametros_modificarU ::= parametro_usuario_antiguo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_modificarU",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // parametros_modificarU ::= parametro_usuario_nuevo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_modificarU",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // parametros_modificarU ::= parametro_contra_nueva 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_modificarU",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // parametros_modificarU ::= parametro_fecha_modificacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_modificarU",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // parametros_modificarU ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_modificarU",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // bloque_formulario1 ::= parametros_formulario bloque_formulario1P 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_formulario1",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // bloque_formulario1P ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_formulario1P",74, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // bloque_formulario1P ::= COMA bloque_formulario1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_formulario1P",74, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // parametros_formulario ::= parametro_id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_formulario",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // parametros_formulario ::= parametro_titulo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_formulario",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // parametros_formulario ::= parametro_nombre 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_formulario",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // parametros_formulario ::= parametro_tema 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_formulario",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // parametros_formulario ::= parametro_usuario_creacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_formulario",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // parametros_formulario ::= parametro_fecha 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_formulario",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // parametros_formulario ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_formulario",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // bloque_formulario2 ::= parametros_formulario2 bloque_formulario2P 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_formulario2",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // bloque_formulario2P ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_formulario2P",75, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // bloque_formulario2P ::= COMA bloque_formulario2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_formulario2P",75, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // parametros_formulario2 ::= parametro_id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_formulario2",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // parametros_formulario2 ::= parametro_titulo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_formulario2",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // parametros_formulario2 ::= parametro_nombre 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_formulario2",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // parametros_formulario2 ::= parametro_tema 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_formulario2",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // parametros_formulario2 ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_formulario2",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // parametro_tema ::= COMILLAS TEMAP COMILLAS DOSP COMILLAS TEMA COMILLAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		agregarParametroAMap("TEMA",e1.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_tema",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // parametro_login ::= parametro_usuario COMA parametro_contra 
            {
              Object RESULT =null;
		temporal.getCuantas().add(lista_temporal); lista_temporal = new HashMap<>(); temporal.setTieneErrores(false);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_login",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // parametro_login ::= parametro_contra COMA parametro_usuario 
            {
              Object RESULT =null;
		temporal.getCuantas().add(lista_temporal); lista_temporal = new HashMap<>(); temporal.setTieneErrores(false);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_login",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // parametro_login ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_login",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // parametro_usuario ::= COMILLAS USUARIOP COMILLAS DOSP COMILLAS USUARIO COMILLAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		agregarParametroAMap("USUARIO",e1.toString()); logeado.setUsuario(e1.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_usuario",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // parametro_usuario_creacion ::= COMILLAS USUARIOCP COMILLAS DOSP COMILLAS USUARIO COMILLAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		agregarParametroAMap("USUARIO_CREACION",e1.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_usuario_creacion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // parametro_usuario_antiguo ::= COMILLAS USUARIOAP COMILLAS DOSP COMILLAS USUARIO COMILLAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		agregarParametroAMap("USUARIO_ANTIGUO",e1.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_usuario_antiguo",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // parametro_usuario_nuevo ::= COMILLAS USUARIONP COMILLAS DOSP COMILLAS USUARIO COMILLAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		agregarParametroAMap("USUARIO_NUEVO",e1.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_usuario_nuevo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // parametro_contra ::= COMILLAS CONTRAP COMILLAS DOSP COMILLAS tipo_palabra COMILLAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		agregarParametroAMap("CONTRA",e1.toString()); logeado.setPassword(e1.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_contra",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // parametro_contra_nueva ::= COMILLAS NUEVOP COMILLAS DOSP COMILLAS tipo_palabra COMILLAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		agregarParametroAMap("CONTRA_NUEVA",e1.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_contra_nueva",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // parametro_fecha ::= COMILLAS FECHACP COMILLAS DOSP COMILLAS FECHA COMILLAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		agregarParametroAMap("FECHA",e1.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_fecha",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // parametro_fecha_modificacion ::= COMILLAS FECHAMP COMILLAS DOSP COMILLAS FECHA COMILLAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		agregarParametroAMap("FECHA_MODIFICACION",e1.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_fecha_modificacion",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // parametro_id ::= COMILLAS IDP COMILLAS DOSP COMILLAS ID COMILLAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		agregarParametroAMap("ID",e1.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_id",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // parametro_titulo ::= COMILLAS TITULOP COMILLAS DOSP COMILLAS tipo_opcion COMILLAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		agregarParametroAMap("TITULO",e1.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_titulo",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // parametro_nombre ::= COMILLAS NOMBREP COMILLAS DOSP COMILLAS USUARIO COMILLAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		agregarParametroAMap("NOMBRE",e1.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_nombre",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // parametro_nombre_campo ::= COMILLAS NOMBREC COMILLAS DOSP COMILLAS USUARIO COMILLAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		agregarParametroAMap("NOMBRE_CAMPO",e1.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_nombre_campo",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // parametro_formulario ::= COMILLAS FORMULARIOC COMILLAS DOSP COMILLAS ID COMILLAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		agregarParametroAMap("FORMULARIO",e1.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_formulario",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // tipos_de_clases ::= CLASENORMAL 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e1.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_de_clases",81, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // tipos_de_clases ::= CLASEAREA 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e1.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_de_clases",81, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // tipos_de_clases ::= CLASEOPCIONES 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e1.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_de_clases",81, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // tipos_de_clases ::= CLASEIMAGEN 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e1.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_de_clases",81, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // tipos_de_clases ::= CLASEBOTON 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e1.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_de_clases",81, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // parametro_clase ::= COMILLAS CLASE COMILLAS DOSP COMILLAS tipos_de_clases COMILLAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		agregarParametroAMap("CLASE",e1.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_clase",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // parametro_indice ::= COMILLAS INDICEC COMILLAS DOSP COMILLAS NUMERO COMILLAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		agregarParametroAMap("INDICE",e1.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_indice",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // parametro_texto ::= COMILLAS TEXTOVC COMILLAS DOSP COMILLAS tipo_opcion COMILLAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		agregarParametroAMap("TEXTO_VISIBLE",e1.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_texto",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // parametro_alineacion ::= COMILLAS ALINEAC COMILLAS DOSP COMILLAS ALINEA COMILLAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		agregarParametroAMap("ALINEACION",e1.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_alineacion",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // parametro_requerido ::= COMILLAS REQUERIDO COMILLAS DOSP COMILLAS BOOL COMILLAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		agregarParametroAMap("REQUERIDO",e1.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_requerido",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // parametro_opciones ::= COMILLAS OPCIONES COMILLAS DOSP COMILLAS bloque_opciones COMILLAS 
            {
              Object RESULT =null;
		agregarParametroAMap("OPCIONES",armando); armando = "";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_opciones",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // bloque_opciones ::= bloque_opciones OR tipo_opcion 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		armando += e1.toString()+"\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_opciones",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // bloque_opciones ::= tipo_opcion 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		armando += e1.toString()+"\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_opciones",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // tipo_opcion ::= TITULO 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e1.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_opcion",79, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // tipo_opcion ::= USUARIO 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e1.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_opcion",79, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // tipo_opcion ::= ID 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e1.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_opcion",79, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // tipo_opcion ::= NUMERO 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e1.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_opcion",79, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // tipo_palabra ::= USUARIO 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e1.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_palabra",78, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // tipo_palabra ::= ID 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e1.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_palabra",78, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // tipo_palabra ::= NUMERO 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e1.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_palabra",78, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // parametro_filas ::= COMILLAS FILAS COMILLAS DOSP COMILLAS NUMERO COMILLAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		agregarParametroAMap("FILAS",e1.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_filas",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // parametro_columnas ::= COMILLAS COLUMNAS COMILLAS DOSP COMILLAS NUMERO COMILLAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		agregarParametroAMap("COLUMNAS",e1.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_columnas",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // parametro_url ::= COMILLAS URLC COMILLAS DOSP COMILLAS URL COMILLAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		agregarParametroAMap("URL",e1.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_url",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // inicio_param_datos ::= COMILLAS MAYORQ LLAVEA COMILLAS CONSULTASP COMILLAS DOSP CORCHETEA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio_param_datos",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // inicio_param_datos ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio_param_datos",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // bloque9 ::= LLAVEA bloque_consultas LLAVEC bloque9P 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque9",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // bloque9 ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque9",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // bloque9P ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque9P",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // bloque9P ::= COMA bloque9 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque9P",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // bloque_consultas ::= descripcion_consulta bloque_consultasP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_consultas",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // bloque_consultasP ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_consultasP",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // bloque_consultasP ::= COMA bloque_consultas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_consultasP",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // descripcion_consulta ::= inicio_consulta nombre_campos final_consulta 
            {
              Object RESULT =null;
		  lista_consultas.add(cons_temp); temporal.getConsulta().add(cons_temp); cons_temp = new Consulta(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("descripcion_consulta",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // inicio_consulta ::= COMILLAS NOCONSULTA COMILLAS DOSP COMILLAS SELECT DE campo CORCHETEA 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		cons_temp.setNoconsulta(e1.toString()); cons_temp.setForm(e2.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio_consulta",76, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // inicio_consulta ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio_consulta",76, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // final_consulta ::= CORCHETEC restricciones COMILLAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("final_consulta",77, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // final_consulta ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("final_consulta",77, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // campo ::= ID 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e1.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("campo",82, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // campo ::= USUARIO 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e1.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("campo",82, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // nombre_campos ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nombre_campos",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // nombre_campos ::= campos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nombre_campos",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // campos ::= campo camposP 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 cons_temp.getCampos().add(e1.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("campos",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // camposP ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("camposP",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // camposP ::= COMA campos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("camposP",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // restricciones ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("restricciones",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // restricciones ::= WHERE CORCHETEA restriccion CORCHETEC 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Map<String,String>> e1 = (ArrayList<Map<String,String>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 cons_temp.setRestricciones(e1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("restricciones",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // restriccion ::= restriccion AND restriccion 
            {
              ArrayList<Map<String,String>> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Map<String,String>> e1 = (ArrayList<Map<String,String>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Map<String,String>> e2 = (ArrayList<Map<String,String>>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<Map<String,String>> para = new ArrayList<>(e1); Map<String,String> te = new HashMap<>(); te.put("OPLOGICO","AND"); para.add(te); para.addAll(e2); RESULT = para; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("restriccion",87, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // restriccion ::= restriccion OROP restriccion 
            {
              ArrayList<Map<String,String>> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Map<String,String>> e1 = (ArrayList<Map<String,String>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Map<String,String>> e2 = (ArrayList<Map<String,String>>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<Map<String,String>> para = new ArrayList<>(e1); Map<String,String> te = new HashMap<>(); te.put("OPLOGICO","OR"); para.add(te); para.addAll(e2); RESULT = para; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("restriccion",87, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // restriccion ::= NOT restriccion 
            {
              ArrayList<Map<String,String>> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Map<String,String>> e1 = (ArrayList<Map<String,String>>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<Map<String,String>> para = e1; para.get(para.size()-1).put("NOT","true"); RESULT = para;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("restriccion",87, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // restriccion ::= PARENTESISA restriccion PARENTESISC 
            {
              ArrayList<Map<String,String>> RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("restriccion",87, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // restriccion ::= condicional 
            {
              ArrayList<Map<String,String>> RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Map<String,String> e2 = (Map<String,String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<Map<String,String>> para = new ArrayList<>(); para.add(e2); RESULT = para; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("restriccion",87, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // restriccion ::= error 
            {
              ArrayList<Map<String,String>> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("restriccion",87, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // condicional ::= campo tipo_condicion 
            {
              Map<String,String> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Map<String,String> e2 = (Map<String,String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Map<String,String> para = e2; para.put("CAMPO",e1.toString());  RESULT = para;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional",84, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // condicional ::= error tipo_condicion 
            {
              Map<String,String> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional",84, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // tipo_condicion ::= condicion_numerica tipo_numero 
            {
              Map<String,String> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Map<String,String> e2 = (Map<String,String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Map<String,String> para = e2; para.put("OPRELACIONAL",e1.toString());  RESULT = para;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_condicion",83, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // tipo_condicion ::= IGUAL tipo_dato 
            {
              Map<String,String> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Map<String,String> e2 = (Map<String,String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Map<String,String> para = e2; para.put("OPRELACIONAL",e1.toString());  RESULT = para;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_condicion",83, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // condicion_numerica ::= MAYORIGUAL 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e1.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion_numerica",80, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // condicion_numerica ::= MENORIGUAL 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e1.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion_numerica",80, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // condicion_numerica ::= MAYORQ 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e1.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion_numerica",80, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // condicion_numerica ::= MENORQ 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e1.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion_numerica",80, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // tipo_numero ::= NUMERO 
            {
              Map<String,String> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Map<String,String> para = new HashMap<>(); para.put("TIPO","NUMERO"); para.put("DATO",e1.toString()); RESULT = para;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_numero",85, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // tipo_numero ::= DEC 
            {
              Map<String,String> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Map<String,String> para = new HashMap<>(); para.put("TIPO","DECIMAL"); para.put("DATO",e1.toString()); RESULT = para;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_numero",85, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // tipo_dato ::= NUMERO 
            {
              Map<String,String> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Map<String,String> para = new HashMap<>(); para.put("TIPO","NUMERO"); para.put("DATO",e1.toString()); RESULT = para; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",86, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // tipo_dato ::= APOSTROFE tipo_opcion APOSTROFE 
            {
              Map<String,String> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 Map<String,String> para = new HashMap<>(); para.put("TIPO","STRING"); para.put("DATO",e1.toString()); RESULT = para;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",86, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // tipo_dato ::= DEC 
            {
              Map<String,String> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Map<String,String> para = new HashMap<>(); para.put("TIPO","DECIMAL"); para.put("DATO",e1.toString()); RESULT = para;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",86, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
