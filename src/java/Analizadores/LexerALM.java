// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/Analizadores/LexerALM.flex

package Analizadores;
import java_cup.runtime.Symbol;

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class LexerALM implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  2,  3,  3,  2,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     4,  0,  5,  6,  7,  6,  6,  0,  8,  9,  0,  0, 10, 11, 12, 13, 
    14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 15,  0,  0,  0,  0,  0, 
     6, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 
    31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41,  0,  0,  0,  0, 42, 
     0, 43, 44, 45, 46, 47, 48, 40, 49, 50, 40, 51, 52, 53, 40, 54, 
    55, 40, 56, 57, 58, 59, 40, 60, 40, 40, 40, 61, 62, 63,  0,  0, 
     0,  0,  0,  0,  0,  3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\3\1\0\1\10\1\11\24\3\1\12\1\13\1\14"+
    "\1\1\1\15\1\3\1\0\1\10\1\0\22\3\1\16"+
    "\4\3\1\16\12\3\2\10\1\0\36\3\1\17\4\3"+
    "\1\0\2\3\1\10\1\0\2\3\1\20\30\3\1\21"+
    "\3\3\2\0\2\3\1\0\2\3\1\22\3\3\1\23"+
    "\1\3\1\24\1\3\1\25\3\3\1\26\16\3\2\0"+
    "\2\3\1\0\3\3\1\27\10\3\1\30\1\31\2\3"+
    "\1\32\5\3\1\33\1\3\3\0\1\3\1\0\10\3"+
    "\1\34\1\35\1\36\10\3\1\37\3\0\1\40\1\41"+
    "\3\3\1\42\5\3\1\43\1\44\4\3\3\0\11\3"+
    "\1\45\2\3\3\0\1\46\1\47\5\3\1\50\2\3"+
    "\2\0\1\34\1\51\5\3\1\0\1\52\2\3\1\53"+
    "\2\3\1\0\2\3\1\54\1\3\1\0\1\55\2\3"+
    "\1\56\3\3\1\57\1\3\1\60";

  private static int [] zzUnpackAction() {
    int [] result = new int[317];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\100\0\200\0\300\0\u0100\0\200\0\200\0\200"+
    "\0\u0140\0\u0180\0\u01c0\0\200\0\u0200\0\u0240\0\u0280\0\u02c0"+
    "\0\u0300\0\u0340\0\u0380\0\u03c0\0\u0400\0\u0440\0\u0480\0\u04c0"+
    "\0\u0500\0\u0540\0\u0580\0\u05c0\0\u0600\0\u0640\0\u0680\0\u06c0"+
    "\0\200\0\100\0\200\0\u0700\0\u0740\0\u0780\0\u07c0\0\u0800"+
    "\0\u0840\0\u0880\0\u08c0\0\u0900\0\u0940\0\u0980\0\u09c0\0\u0a00"+
    "\0\u0a40\0\u0a80\0\u0ac0\0\u0b00\0\u0b40\0\u0b80\0\u0bc0\0\u0c00"+
    "\0\u0c40\0\u0c80\0\u0cc0\0\u0d00\0\u0d40\0\u0d80\0\u0dc0\0\u0e00"+
    "\0\u0300\0\u0e40\0\u0e80\0\u0ec0\0\u0f00\0\u0f40\0\u0f80\0\u0fc0"+
    "\0\u1000\0\u1040\0\u1080\0\u07c0\0\u10c0\0\u1100\0\u1140\0\u1180"+
    "\0\u11c0\0\u1200\0\u1240\0\u1280\0\u12c0\0\u1300\0\u1340\0\u1380"+
    "\0\u13c0\0\u1400\0\u1440\0\u1480\0\u14c0\0\u1500\0\u1540\0\u1580"+
    "\0\u15c0\0\u1600\0\u1640\0\u1680\0\u16c0\0\u1700\0\u1740\0\u1780"+
    "\0\u17c0\0\u1800\0\u1840\0\u1880\0\u0300\0\u18c0\0\u1900\0\u1940"+
    "\0\u1980\0\u19c0\0\u1a00\0\u1a40\0\u1a80\0\u1ac0\0\u1b00\0\u1b40"+
    "\0\u0300\0\u1b80\0\u1bc0\0\u1c00\0\u1c40\0\u1c80\0\u1cc0\0\u1d00"+
    "\0\u1d40\0\u1d80\0\u1dc0\0\u1e00\0\u1e40\0\u1e80\0\u1ec0\0\u1f00"+
    "\0\u1f40\0\u1f80\0\u1fc0\0\u2000\0\u2040\0\u2080\0\u20c0\0\u2100"+
    "\0\u2140\0\u0300\0\u2180\0\u21c0\0\u2200\0\u2240\0\u2280\0\u22c0"+
    "\0\u2300\0\u2340\0\u2380\0\u23c0\0\u0300\0\u2400\0\u2440\0\u2480"+
    "\0\u0300\0\u24c0\0\u0300\0\u2500\0\u0300\0\u2540\0\u2580\0\u25c0"+
    "\0\u0300\0\u2600\0\u2640\0\u2680\0\u26c0\0\u2700\0\u2740\0\u2780"+
    "\0\u27c0\0\u2800\0\u2840\0\u2880\0\u28c0\0\u2900\0\u2940\0\u2980"+
    "\0\u29c0\0\u2a00\0\u2a40\0\u2a80\0\u2ac0\0\u2b00\0\u2b40\0\u0300"+
    "\0\u2b80\0\u2bc0\0\u2c00\0\u2c40\0\u2c80\0\u2cc0\0\u2d00\0\u2d40"+
    "\0\u0300\0\u0300\0\u2d80\0\u2dc0\0\u2e00\0\u2e40\0\u2e80\0\u2ec0"+
    "\0\u2f00\0\u2f40\0\u0300\0\u2f80\0\u2fc0\0\u3000\0\u3040\0\u3080"+
    "\0\u30c0\0\u3100\0\u3140\0\u3180\0\u31c0\0\u3200\0\u3240\0\u3280"+
    "\0\u32c0\0\u0300\0\u0780\0\u0780\0\u3300\0\u3340\0\u3380\0\u33c0"+
    "\0\u3400\0\u3440\0\u3480\0\u34c0\0\u3500\0\u3540\0\u3580\0\u35c0"+
    "\0\u3080\0\u3600\0\u3640\0\u3680\0\u36c0\0\u0300\0\u3700\0\u3740"+
    "\0\u3780\0\u37c0\0\u3800\0\u0300\0\u0300\0\u3840\0\u3880\0\u38c0"+
    "\0\u3900\0\u3940\0\u3980\0\u39c0\0\u3a00\0\u3a40\0\u3a80\0\u3ac0"+
    "\0\u3b00\0\u3b40\0\u3b80\0\u3bc0\0\u3c00\0\u0300\0\u3c40\0\u3c80"+
    "\0\u3cc0\0\u3d00\0\u3d40\0\u0300\0\u0780\0\u3d80\0\u3dc0\0\u3e00"+
    "\0\u3e40\0\u3e80\0\u3c00\0\u3ec0\0\u3f00\0\u3f40\0\u3f80\0\u0780"+
    "\0\u0300\0\u3fc0\0\u4000\0\u4040\0\u4080\0\u40c0\0\u4100\0\u1100"+
    "\0\u4140\0\u4180\0\u0780\0\u41c0\0\u4200\0\u4240\0\u4280\0\u42c0"+
    "\0\u0780\0\u4300\0\u4340\0\u0780\0\u4380\0\u43c0\0\u1100\0\u4400"+
    "\0\u4440\0\u4480\0\u0780\0\u44c0\0\u0780";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[317];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\2\2\1\0\1\2\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\0\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\2\21\1\23\1\24"+
    "\3\21\1\25\1\26\1\27\1\21\1\30\1\31\1\32"+
    "\1\33\1\21\1\34\3\21\1\11\1\21\1\35\1\21"+
    "\1\36\2\21\1\37\12\21\1\40\1\41\1\42\1\43"+
    "\1\0\2\2\1\0\1\2\71\0\1\2\107\0\1\4"+
    "\4\0\1\4\2\0\1\4\1\0\55\4\12\0\1\5"+
    "\3\0\1\5\2\0\1\5\1\0\55\5\11\0\1\4"+
    "\1\5\3\0\1\11\2\0\1\11\1\0\55\11\20\0"+
    "\1\44\66\0\1\45\1\0\1\46\4\0\1\46\1\47"+
    "\1\0\1\50\1\0\55\46\7\0\1\45\1\0\1\46"+
    "\4\0\1\46\1\51\1\0\1\46\1\0\13\21\1\52"+
    "\5\21\1\53\10\21\1\46\22\21\7\0\1\45\1\0"+
    "\1\46\4\0\1\46\1\51\1\0\1\46\1\0\13\21"+
    "\1\54\2\21\1\55\13\21\1\46\22\21\7\0\1\45"+
    "\1\0\1\46\4\0\1\46\1\51\1\0\1\46\1\0"+
    "\1\56\3\21\1\57\2\21\1\60\3\21\1\61\2\21"+
    "\1\62\13\21\1\46\22\21\7\0\1\45\1\0\1\46"+
    "\4\0\1\46\1\51\1\0\1\46\1\0\1\63\3\21"+
    "\1\64\25\21\1\46\22\21\7\0\1\45\1\0\1\46"+
    "\4\0\1\46\1\51\1\0\1\46\1\0\32\21\1\46"+
    "\22\21\7\0\1\45\1\0\1\46\4\0\1\46\1\51"+
    "\1\0\1\46\1\0\4\21\1\65\3\21\1\66\21\21"+
    "\1\46\22\21\7\0\1\45\1\0\1\46\4\0\1\46"+
    "\1\51\1\0\1\46\1\0\3\21\1\67\10\21\1\70"+
    "\1\71\13\21\1\72\1\46\22\21\7\0\1\45\1\0"+
    "\1\46\4\0\1\46\1\51\1\0\1\46\1\0\24\21"+
    "\1\73\5\21\1\46\22\21\7\0\1\45\1\0\1\46"+
    "\4\0\1\46\1\51\1\0\1\46\1\0\16\21\1\74"+
    "\13\21\1\46\22\21\7\0\1\45\1\0\1\46\4\0"+
    "\1\46\1\51\1\0\1\46\1\0\17\21\1\75\12\21"+
    "\1\46\22\21\7\0\1\45\1\0\1\46\4\0\1\46"+
    "\1\51\1\0\1\46\1\0\1\76\31\21\1\46\22\21"+
    "\7\0\1\45\1\0\1\46\4\0\1\46\1\51\1\0"+
    "\1\46\1\0\1\77\3\21\1\100\25\21\1\46\22\21"+
    "\7\0\1\45\1\0\1\46\4\0\1\46\1\51\1\0"+
    "\1\46\1\0\10\21\1\101\21\21\1\46\22\21\7\0"+
    "\1\45\1\0\1\46\4\0\1\46\1\51\1\0\1\46"+
    "\1\0\4\21\1\102\3\21\1\103\21\21\1\46\22\21"+
    "\7\0\1\45\1\0\1\46\4\0\1\46\1\51\1\0"+
    "\1\46\1\0\21\21\1\104\1\105\7\21\1\46\22\21"+
    "\7\0\1\45\1\0\1\46\4\0\1\46\1\51\1\0"+
    "\1\46\1\0\7\21\1\106\22\21\1\46\22\21\7\0"+
    "\1\45\1\0\1\46\4\0\1\46\1\51\1\0\1\46"+
    "\1\0\32\21\1\46\11\21\1\107\10\21\7\0\1\45"+
    "\1\0\1\46\4\0\1\46\1\51\1\0\1\46\1\0"+
    "\32\21\1\46\1\110\1\111\20\21\7\0\1\45\1\0"+
    "\1\46\4\0\1\46\1\51\1\0\1\46\1\0\32\21"+
    "\1\46\17\21\1\112\2\21\7\0\1\45\1\0\1\46"+
    "\4\0\1\46\1\51\1\0\1\46\1\0\32\21\1\46"+
    "\6\21\1\113\13\21\3\0\2\44\2\0\74\44\4\0"+
    "\1\45\1\0\1\45\4\0\1\45\2\0\1\45\1\0"+
    "\55\45\7\0\1\45\1\0\1\46\4\0\1\46\2\0"+
    "\1\46\1\0\55\46\21\0\1\114\65\0\1\45\1\0"+
    "\1\46\4\0\1\46\1\47\1\0\1\115\1\0\55\46"+
    "\23\0\32\116\1\0\22\116\7\0\1\45\1\0\1\46"+
    "\4\0\1\46\1\51\1\0\1\46\1\0\10\21\1\117"+
    "\21\21\1\46\22\21\7\0\1\45\1\0\1\46\4\0"+
    "\1\46\1\51\1\0\1\46\1\0\4\21\1\120\25\21"+
    "\1\46\22\21\7\0\1\45\1\0\1\46\4\0\1\46"+
    "\1\51\1\0\1\46\1\0\24\21\1\121\5\21\1\46"+
    "\22\21\7\0\1\45\1\0\1\46\4\0\1\46\1\51"+
    "\1\0\1\46\1\0\23\21\1\122\6\21\1\46\22\21"+
    "\7\0\1\45\1\0\1\46\4\0\1\46\1\51\1\0"+
    "\1\46\1\0\14\21\1\123\15\21\1\46\22\21\7\0"+
    "\1\45\1\0\1\46\4\0\1\46\1\51\1\0\1\46"+
    "\1\0\15\21\1\124\14\21\1\46\22\21\7\0\1\45"+
    "\1\0\1\46\4\0\1\46\1\51\1\0\1\46\1\0"+
    "\4\21\1\125\25\21\1\46\22\21\7\0\1\45\1\0"+
    "\1\46\4\0\1\46\1\51\1\0\1\46\1\0\1\126"+
    "\31\21\1\46\22\21\7\0\1\45\1\0\1\46\4\0"+
    "\1\46\1\51\1\0\1\46\1\0\13\21\1\127\1\130"+
    "\15\21\1\46\22\21\7\0\1\45\1\0\1\46\4\0"+
    "\1\46\1\51\1\0\1\46\1\0\21\21\1\131\1\21"+
    "\1\132\6\21\1\46\22\21\7\0\1\45\1\0\1\46"+
    "\4\0\1\46\1\51\1\0\1\46\1\0\21\21\1\133"+
    "\10\21\1\46\22\21\7\0\1\45\1\0\1\46\4\0"+
    "\1\46\1\51\1\0\1\46\1\0\2\21\1\134\27\21"+
    "\1\46\22\21\7\0\1\45\1\0\1\46\4\0\1\46"+
    "\1\51\1\0\1\46\1\0\2\21\1\135\10\21\1\136"+
    "\16\21\1\46\22\21\7\0\1\45\1\0\1\46\4\0"+
    "\1\46\1\51\1\0\1\46\1\0\32\21\1\137\22\21"+
    "\7\0\1\45\1\0\1\46\4\0\1\46\1\51\1\0"+
    "\1\46\1\0\1\140\31\21\1\46\22\21\7\0\1\45"+
    "\1\0\1\46\4\0\1\46\1\51\1\0\1\46\1\0"+
    "\3\21\1\141\26\21\1\46\22\21\7\0\1\45\1\0"+
    "\1\46\4\0\1\46\1\51\1\0\1\46\1\0\20\21"+
    "\1\142\11\21\1\46\22\21\7\0\1\45\1\0\1\46"+
    "\4\0\1\46\1\51\1\0\1\46\1\0\22\21\1\143"+
    "\7\21\1\46\22\21\7\0\1\45\1\0\1\46\4\0"+
    "\1\46\1\51\1\0\1\46\1\0\14\21\1\144\15\21"+
    "\1\46\22\21\7\0\1\45\1\0\1\46\4\0\1\46"+
    "\1\51\1\0\1\46\1\0\2\21\1\145\27\21\1\46"+
    "\22\21\7\0\1\45\1\0\1\46\4\0\1\46\1\51"+
    "\1\0\1\46\1\0\22\21\1\146\7\21\1\46\22\21"+
    "\7\0\1\45\1\0\1\46\4\0\1\46\1\51\1\0"+
    "\1\46\1\0\3\21\1\147\26\21\1\46\22\21\7\0"+
    "\1\45\1\0\1\46\4\0\1\46\1\51\1\0\1\46"+
    "\1\0\6\21\1\150\11\21\1\151\11\21\1\46\22\21"+
    "\7\0\1\45\1\0\1\46\4\0\1\46\1\51\1\0"+
    "\1\46\1\0\14\21\1\152\12\21\1\153\2\21\1\46"+
    "\22\21\7\0\1\45\1\0\1\46\4\0\1\46\1\51"+
    "\1\0\1\46\1\0\23\21\1\154\6\21\1\46\22\21"+
    "\7\0\1\45\1\0\1\46\4\0\1\46\1\51\1\0"+
    "\1\46\1\0\13\21\1\155\16\21\1\46\22\21\7\0"+
    "\1\45\1\0\1\46\4\0\1\46\1\51\1\0\1\46"+
    "\1\0\24\21\1\156\5\21\1\46\22\21\7\0\1\45"+
    "\1\0\1\46\4\0\1\46\1\51\1\0\1\46\1\0"+
    "\10\21\1\157\21\21\1\46\22\21\7\0\1\45\1\0"+
    "\1\46\4\0\1\46\1\51\1\0\1\46\1\0\32\21"+
    "\1\46\20\21\1\160\1\21\7\0\1\45\1\0\1\46"+
    "\4\0\1\46\1\51\1\0\1\46\1\0\32\21\1\46"+
    "\15\21\1\161\4\21\7\0\1\45\1\0\1\46\4\0"+
    "\1\46\1\162\1\0\1\46\1\0\32\21\1\46\22\21"+
    "\7\0\1\45\1\0\1\46\4\0\1\46\1\51\1\0"+
    "\1\46\1\0\32\21\1\46\17\21\1\163\2\21\7\0"+
    "\1\45\1\0\1\46\4\0\1\46\1\51\1\0\1\46"+
    "\1\0\32\21\1\46\7\21\1\164\12\21\7\0\1\45"+
    "\1\0\1\46\4\0\1\46\1\47\1\0\1\165\1\0"+
    "\55\46\17\0\1\166\3\0\32\116\1\0\22\116\7\0"+
    "\1\45\1\0\1\46\4\0\1\46\1\51\1\0\1\46"+
    "\1\0\15\21\1\167\14\21\1\46\22\21\7\0\1\45"+
    "\1\0\1\46\4\0\1\46\1\51\1\0\1\46\1\0"+
    "\1\170\31\21\1\46\22\21\7\0\1\45\1\0\1\46"+
    "\4\0\1\46\1\51\1\0\1\46\1\0\4\21\1\171"+
    "\25\21\1\46\22\21\7\0\1\45\1\0\1\46\4\0"+
    "\1\46\1\51\1\0\1\46\1\0\16\21\1\172\13\21"+
    "\1\46\22\21\7\0\1\45\1\0\1\46\4\0\1\46"+
    "\1\51\1\0\1\46\1\0\17\21\1\173\12\21\1\46"+
    "\22\21\7\0\1\45\1\0\1\46\4\0\1\46\1\51"+
    "\1\0\1\46\1\0\23\21\1\174\6\21\1\46\22\21"+
    "\7\0\1\45\1\0\1\46\4\0\1\46\1\51\1\0"+
    "\1\46\1\0\2\21\1\175\27\21\1\46\22\21\7\0"+
    "\1\45\1\0\1\46\4\0\1\46\1\51\1\0\1\46"+
    "\1\0\22\21\1\176\7\21\1\46\22\21\7\0\1\45"+
    "\1\0\1\46\4\0\1\46\1\51\1\0\1\46\1\0"+
    "\24\21\1\177\5\21\1\46\22\21\7\0\1\45\1\0"+
    "\1\46\4\0\1\46\1\51\1\0\1\46\1\0\1\21"+
    "\1\200\15\21\1\201\12\21\1\46\22\21\7\0\1\45"+
    "\1\0\1\46\4\0\1\46\1\51\1\0\1\46\1\0"+
    "\12\21\1\171\17\21\1\46\22\21\7\0\1\45\1\0"+
    "\1\46\4\0\1\46\1\51\1\0\1\46\1\0\16\21"+
    "\1\202\13\21\1\46\22\21\7\0\1\45\1\0\1\46"+
    "\4\0\1\46\1\51\1\0\1\46\1\0\4\21\1\203"+
    "\25\21\1\46\22\21\7\0\1\45\1\0\1\46\4\0"+
    "\1\46\1\51\1\0\1\46\1\0\7\21\1\204\22\21"+
    "\1\46\22\21\7\0\1\45\1\0\1\46\4\0\1\46"+
    "\1\51\1\0\1\46\1\0\7\21\1\205\22\21\1\46"+
    "\22\21\7\0\1\45\1\0\1\46\4\0\1\46\1\51"+
    "\1\0\1\46\1\0\1\206\31\21\1\46\22\21\7\0"+
    "\1\45\1\0\1\46\4\0\1\46\2\0\1\46\1\0"+
    "\2\46\1\207\2\46\1\210\47\46\7\0\1\45\1\0"+
    "\1\46\4\0\1\46\1\51\1\0\1\46\1\0\6\21"+
    "\1\211\23\21\1\46\22\21\7\0\1\45\1\0\1\46"+
    "\4\0\1\46\1\51\1\0\1\46\1\0\10\21\1\212"+
    "\21\21\1\46\22\21\7\0\1\45\1\0\1\46\4\0"+
    "\1\46\1\51\1\0\1\46\1\0\24\21\1\213\5\21"+
    "\1\46\22\21\7\0\1\45\1\0\1\46\4\0\1\46"+
    "\1\51\1\0\1\46\1\0\23\21\1\214\6\21\1\46"+
    "\22\21\7\0\1\45\1\0\1\46\4\0\1\46\1\51"+
    "\1\0\1\46\1\0\1\21\1\215\30\21\1\46\22\21"+
    "\7\0\1\45\1\0\1\46\4\0\1\46\1\51\1\0"+
    "\1\46\1\0\10\21\1\216\21\21\1\46\22\21\7\0"+
    "\1\45\1\0\1\46\4\0\1\46\1\51\1\0\1\46"+
    "\1\0\22\21\1\217\7\21\1\46\22\21\7\0\1\45"+
    "\1\0\1\46\4\0\1\46\1\51\1\0\1\46\1\0"+
    "\10\21\1\200\21\21\1\46\22\21\7\0\1\45\1\0"+
    "\1\46\4\0\1\46\1\51\1\0\1\46\1\0\10\21"+
    "\1\220\21\21\1\46\22\21\7\0\1\45\1\0\1\46"+
    "\4\0\1\46\1\51\1\0\1\46\1\0\24\21\1\221"+
    "\5\21\1\46\22\21\7\0\1\45\1\0\1\46\4\0"+
    "\1\46\1\51\1\0\1\46\1\0\1\222\31\21\1\46"+
    "\22\21\7\0\1\45\1\0\1\46\4\0\1\46\1\51"+
    "\1\0\1\46\1\0\23\21\1\223\6\21\1\46\22\21"+
    "\7\0\1\45\1\0\1\46\4\0\1\46\1\51\1\0"+
    "\1\46\1\0\24\21\1\224\5\21\1\46\22\21\7\0"+
    "\1\45\1\0\1\46\4\0\1\46\1\51\1\0\1\46"+
    "\1\0\1\225\31\21\1\46\22\21\7\0\1\45\1\0"+
    "\1\46\4\0\1\46\1\51\1\0\1\46\1\0\23\21"+
    "\1\121\6\21\1\46\22\21\7\0\1\45\1\0\1\46"+
    "\4\0\1\46\1\51\1\0\1\46\1\0\32\21\1\46"+
    "\4\21\1\171\15\21\7\0\1\45\1\0\1\46\4\0"+
    "\1\46\1\51\1\0\1\46\1\0\32\21\1\46\10\21"+
    "\1\171\11\21\23\0\32\116\1\0\5\116\1\226\12\116"+
    "\1\227\1\116\7\0\1\45\1\0\1\46\4\0\1\46"+
    "\1\51\1\0\1\46\1\0\32\21\1\46\14\21\1\230"+
    "\5\21\7\0\1\45\1\0\1\46\4\0\1\46\1\51"+
    "\1\0\1\46\1\0\32\21\1\46\17\21\1\160\2\21"+
    "\7\0\1\45\1\0\1\46\4\0\1\231\1\47\1\0"+
    "\1\165\1\0\55\46\60\0\1\232\26\0\1\45\1\0"+
    "\1\46\4\0\1\46\1\51\1\0\1\46\1\0\4\21"+
    "\1\233\25\21\1\46\22\21\7\0\1\45\1\0\1\46"+
    "\4\0\1\46\1\51\1\0\1\46\1\0\32\21\1\234"+
    "\22\21\7\0\1\45\1\0\1\46\4\0\1\46\1\51"+
    "\1\0\1\46\1\0\15\21\1\235\14\21\1\46\22\21"+
    "\7\0\1\45\1\0\1\46\4\0\1\46\1\51\1\0"+
    "\1\46\1\0\16\21\1\236\13\21\1\46\22\21\7\0"+
    "\1\45\1\0\1\46\4\0\1\46\1\51\1\0\1\46"+
    "\1\0\21\21\1\237\10\21\1\46\22\21\7\0\1\45"+
    "\1\0\1\46\4\0\1\46\1\51\1\0\1\46\1\0"+
    "\12\21\1\240\17\21\1\46\22\21\7\0\1\45\1\0"+
    "\1\46\4\0\1\46\1\51\1\0\1\46\1\0\4\21"+
    "\1\241\25\21\1\46\22\21\7\0\1\45\1\0\1\46"+
    "\4\0\1\46\1\51\1\0\1\46\1\0\14\21\1\242"+
    "\15\21\1\46\22\21\7\0\1\45\1\0\1\46\4\0"+
    "\1\46\1\51\1\0\1\46\1\0\16\21\1\243\13\21"+
    "\1\46\22\21\7\0\1\45\1\0\1\46\4\0\1\46"+
    "\1\51\1\0\1\46\1\0\16\21\1\244\13\21\1\46"+
    "\22\21\7\0\1\45\1\0\1\46\4\0\1\46\1\51"+
    "\1\0\1\46\1\0\22\21\1\245\7\21\1\46\22\21"+
    "\7\0\1\45\1\0\1\46\4\0\1\46\1\51\1\0"+
    "\1\46\1\0\2\21\1\246\27\21\1\46\22\21\7\0"+
    "\1\45\1\0\1\46\4\0\1\46\1\51\1\0\1\46"+
    "\1\0\1\247\31\21\1\46\22\21\7\0\1\45\1\0"+
    "\1\46\4\0\1\46\1\51\1\0\1\46\1\0\4\21"+
    "\1\250\25\21\1\46\22\21\7\0\1\45\1\0\1\46"+
    "\4\0\1\46\1\51\1\0\1\46\1\0\22\21\1\251"+
    "\7\21\1\46\22\21\7\0\1\45\1\0\1\46\4\0"+
    "\1\46\2\0\1\46\1\0\16\46\1\252\36\46\7\0"+
    "\1\45\1\0\1\46\4\0\1\46\2\0\1\46\1\0"+
    "\16\46\1\253\36\46\7\0\1\45\1\0\1\46\4\0"+
    "\1\46\1\51\1\0\1\46\1\0\4\21\1\254\25\21"+
    "\1\46\22\21\7\0\1\45\1\0\1\46\4\0\1\46"+
    "\1\51\1\0\1\46\1\0\2\21\1\255\27\21\1\46"+
    "\22\21\7\0\1\45\1\0\1\46\4\0\1\46\1\51"+
    "\1\0\1\46\1\0\10\21\1\256\21\21\1\46\22\21"+
    "\7\0\1\45\1\0\1\46\4\0\1\46\1\51\1\0"+
    "\1\46\1\0\10\21\1\257\21\21\1\46\22\21\7\0"+
    "\1\45\1\0\1\46\4\0\1\46\1\51\1\0\1\46"+
    "\1\0\21\21\1\260\10\21\1\46\22\21\7\0\1\45"+
    "\1\0\1\46\4\0\1\46\1\51\1\0\1\46\1\0"+
    "\16\21\1\261\13\21\1\46\22\21\7\0\1\45\1\0"+
    "\1\46\4\0\1\46\1\51\1\0\1\46\1\0\26\21"+
    "\1\262\3\21\1\46\22\21\7\0\1\45\1\0\1\46"+
    "\4\0\1\46\1\51\1\0\1\46\1\0\22\21\1\263"+
    "\7\21\1\46\22\21\7\0\1\45\1\0\1\46\4\0"+
    "\1\46\1\51\1\0\1\46\1\0\4\21\1\264\25\21"+
    "\1\46\22\21\7\0\1\45\1\0\1\46\4\0\1\46"+
    "\1\51\1\0\1\46\1\0\16\21\1\265\13\21\1\46"+
    "\22\21\7\0\1\45\1\0\1\46\4\0\1\46\1\51"+
    "\1\0\1\46\1\0\13\21\1\266\16\21\1\46\22\21"+
    "\7\0\1\45\1\0\1\46\4\0\1\46\1\51\1\0"+
    "\1\46\1\0\21\21\1\267\10\21\1\46\22\21\17\0"+
    "\1\166\3\0\32\116\1\0\13\116\1\270\6\116\17\0"+
    "\1\166\3\0\32\116\1\0\16\116\1\271\3\116\7\0"+
    "\1\45\1\0\1\46\4\0\1\46\1\51\1\0\1\46"+
    "\1\0\32\21\1\46\16\21\1\272\3\21\7\0\1\45"+
    "\1\0\1\46\4\0\1\46\2\0\1\273\1\0\55\46"+
    "\71\0\1\274\15\0\1\45\1\0\1\46\4\0\1\46"+
    "\1\51\1\0\1\46\1\0\1\275\31\21\1\46\22\21"+
    "\7\0\1\45\1\0\1\46\4\0\1\46\2\0\1\46"+
    "\1\0\23\46\1\276\31\46\7\0\1\45\1\0\1\46"+
    "\4\0\1\46\1\51\1\0\1\46\1\0\32\21\1\277"+
    "\22\21\7\0\1\45\1\0\1\46\4\0\1\46\1\51"+
    "\1\0\1\46\1\0\16\21\1\300\13\21\1\46\22\21"+
    "\7\0\1\45\1\0\1\46\4\0\1\46\1\51\1\0"+
    "\1\46\1\0\1\21\1\301\30\21\1\46\22\21\7\0"+
    "\1\45\1\0\1\46\4\0\1\46\1\51\1\0\1\46"+
    "\1\0\15\21\1\302\14\21\1\46\22\21\7\0\1\45"+
    "\1\0\1\46\4\0\1\46\1\51\1\0\1\46\1\0"+
    "\15\21\1\303\14\21\1\46\22\21\7\0\1\45\1\0"+
    "\1\46\4\0\1\46\1\51\1\0\1\46\1\0\7\21"+
    "\1\304\22\21\1\46\22\21\7\0\1\45\1\0\1\46"+
    "\4\0\1\46\1\51\1\0\1\46\1\0\32\21\1\305"+
    "\22\21\7\0\1\45\1\0\1\46\4\0\1\46\1\51"+
    "\1\0\1\46\1\0\21\21\1\306\10\21\1\46\22\21"+
    "\7\0\1\45\1\0\1\46\4\0\1\46\2\0\1\46"+
    "\1\0\14\46\1\307\40\46\7\0\1\45\1\0\1\46"+
    "\4\0\1\46\2\0\1\46\1\0\21\46\1\310\33\46"+
    "\7\0\1\45\1\0\1\46\4\0\1\46\1\51\1\0"+
    "\1\46\1\0\15\21\1\311\14\21\1\46\22\21\7\0"+
    "\1\45\1\0\1\46\4\0\1\46\1\51\1\0\1\46"+
    "\1\0\4\21\1\312\25\21\1\46\22\21\7\0\1\45"+
    "\1\0\1\46\4\0\1\46\1\51\1\0\1\46\1\0"+
    "\4\21\1\313\25\21\1\46\22\21\7\0\1\45\1\0"+
    "\1\46\4\0\1\46\1\51\1\0\1\46\1\0\5\21"+
    "\1\314\24\21\1\46\22\21\7\0\1\45\1\0\1\46"+
    "\4\0\1\46\1\51\1\0\1\46\1\0\4\21\1\315"+
    "\25\21\1\46\22\21\7\0\1\45\1\0\1\46\4\0"+
    "\1\46\1\51\1\0\1\46\1\0\15\21\1\316\14\21"+
    "\1\46\22\21\7\0\1\45\1\0\1\46\4\0\1\46"+
    "\1\51\1\0\1\46\1\0\16\21\1\317\13\21\1\46"+
    "\22\21\7\0\1\45\1\0\1\46\4\0\1\46\1\51"+
    "\1\0\1\46\1\0\23\21\1\320\6\21\1\46\22\21"+
    "\7\0\1\45\1\0\1\46\4\0\1\46\1\51\1\0"+
    "\1\46\1\0\21\21\1\321\10\21\1\46\22\21\7\0"+
    "\1\45\1\0\1\46\4\0\1\46\1\51\1\0\1\46"+
    "\1\0\32\21\1\322\22\21\7\0\1\45\1\0\1\46"+
    "\4\0\1\46\1\51\1\0\1\46\1\0\16\21\1\323"+
    "\13\21\1\46\22\21\7\0\1\45\1\0\1\46\4\0"+
    "\1\46\1\51\1\0\1\46\1\0\10\21\1\324\21\21"+
    "\1\46\22\21\17\0\1\166\3\0\32\116\1\0\15\116"+
    "\1\325\4\116\17\0\1\166\3\0\32\116\1\0\20\116"+
    "\1\326\1\116\7\0\1\45\1\0\1\46\4\0\1\46"+
    "\1\51\1\0\1\46\1\327\32\21\1\46\22\21\7\0"+
    "\1\45\1\0\1\46\4\0\1\330\2\0\1\273\1\0"+
    "\55\46\70\0\1\331\16\0\1\45\1\0\1\46\4\0"+
    "\1\46\1\51\1\0\1\46\1\0\2\21\1\332\27\21"+
    "\1\46\22\21\7\0\1\45\1\0\1\46\4\0\1\46"+
    "\2\0\1\46\1\0\4\46\1\333\50\46\7\0\1\45"+
    "\1\0\1\46\4\0\1\46\2\0\1\46\1\0\23\46"+
    "\1\334\31\46\7\0\1\45\1\0\1\46\4\0\1\46"+
    "\1\51\1\0\1\46\1\0\16\21\1\335\13\21\1\46"+
    "\22\21\7\0\1\45\1\0\1\46\4\0\1\46\1\51"+
    "\1\0\1\46\1\0\1\336\31\21\1\46\22\21\7\0"+
    "\1\45\1\0\1\46\4\0\1\46\1\51\1\0\1\46"+
    "\1\0\4\21\1\337\25\21\1\46\22\21\7\0\1\45"+
    "\1\0\1\46\4\0\1\46\1\51\1\0\1\46\1\0"+
    "\1\300\31\21\1\46\22\21\7\0\1\45\1\0\1\46"+
    "\4\0\1\46\2\0\1\46\1\0\2\46\1\340\11\46"+
    "\1\341\40\46\7\0\1\45\1\0\1\46\4\0\1\46"+
    "\1\51\1\0\1\46\1\0\16\21\1\342\13\21\1\46"+
    "\22\21\7\0\1\45\1\0\1\46\4\0\1\46\2\0"+
    "\1\46\1\0\17\46\1\343\35\46\7\0\1\45\1\0"+
    "\1\46\4\0\1\46\2\0\1\46\1\0\14\46\1\344"+
    "\40\46\7\0\1\45\1\0\1\46\4\0\1\46\1\51"+
    "\1\0\1\46\1\0\21\21\1\345\10\21\1\46\22\21"+
    "\7\0\1\45\1\0\1\46\4\0\1\46\1\51\1\0"+
    "\1\46\1\0\10\21\1\346\21\21\1\46\22\21\7\0"+
    "\1\45\1\0\1\46\4\0\1\46\1\51\1\0\1\46"+
    "\1\0\32\21\1\347\22\21\7\0\1\45\1\0\1\46"+
    "\4\0\1\46\1\51\1\0\1\46\1\0\4\21\1\350"+
    "\25\21\1\46\22\21\7\0\1\45\1\0\1\46\4\0"+
    "\1\46\1\51\1\0\1\46\1\0\21\21\1\351\10\21"+
    "\1\46\22\21\7\0\1\45\1\0\1\46\4\0\1\46"+
    "\1\51\1\0\1\46\1\0\21\21\1\352\10\21\1\46"+
    "\22\21\7\0\1\45\1\0\1\46\4\0\1\46\1\51"+
    "\1\0\1\46\1\0\10\21\1\353\21\21\1\46\22\21"+
    "\7\0\1\45\1\0\1\46\4\0\1\46\2\0\1\46"+
    "\1\0\25\46\1\354\27\46\7\0\1\45\1\0\1\46"+
    "\4\0\1\46\1\51\1\0\1\46\1\0\16\21\1\355"+
    "\13\21\1\46\22\21\17\0\1\166\3\0\32\116\1\0"+
    "\12\116\1\356\7\116\17\0\1\166\3\0\32\116\1\0"+
    "\1\357\21\116\20\0\1\360\66\0\1\45\1\0\1\46"+
    "\4\0\1\46\2\0\1\361\1\0\55\46\20\0\1\362"+
    "\66\0\1\45\1\0\1\46\4\0\1\46\1\51\1\0"+
    "\1\46\1\0\10\21\1\363\21\21\1\46\22\21\7\0"+
    "\1\45\1\0\1\46\4\0\1\46\2\0\1\46\1\0"+
    "\27\46\1\364\25\46\7\0\1\45\1\0\1\46\4\0"+
    "\1\46\2\0\1\46\1\0\4\46\1\365\50\46\7\0"+
    "\1\45\1\0\1\46\4\0\1\46\1\51\1\0\1\46"+
    "\1\0\27\21\1\243\2\21\1\46\22\21\7\0\1\45"+
    "\1\0\1\46\4\0\1\46\1\51\1\0\1\46\1\0"+
    "\22\21\1\366\7\21\1\46\22\21\7\0\1\45\1\0"+
    "\1\46\4\0\1\46\1\51\1\0\1\46\1\0\15\21"+
    "\1\367\14\21\1\46\22\21\7\0\1\45\1\0\1\46"+
    "\4\0\1\46\2\0\1\46\1\0\21\46\1\370\33\46"+
    "\7\0\1\45\1\0\1\46\4\0\1\46\2\0\1\46"+
    "\1\0\16\46\1\371\36\46\7\0\1\45\1\0\1\46"+
    "\4\0\1\46\1\51\1\0\1\46\1\0\3\21\1\304"+
    "\26\21\1\46\22\21\7\0\1\45\1\0\1\46\4\0"+
    "\1\46\1\51\1\0\1\46\1\0\2\21\1\372\27\21"+
    "\1\46\22\21\7\0\1\45\1\0\1\46\4\0\1\46"+
    "\2\0\1\46\1\0\2\46\1\373\52\46\7\0\1\45"+
    "\1\0\1\46\4\0\1\46\1\51\1\0\1\46\1\0"+
    "\22\21\1\374\7\21\1\46\22\21\7\0\1\45\1\0"+
    "\1\46\4\0\1\46\1\51\1\0\1\46\1\0\3\21"+
    "\1\375\26\21\1\46\22\21\7\0\1\45\1\0\1\46"+
    "\4\0\1\46\1\51\1\0\1\46\1\0\16\21\1\376"+
    "\13\21\1\46\22\21\7\0\1\45\1\0\1\46\4\0"+
    "\1\46\1\51\1\0\1\46\1\0\3\21\1\377\26\21"+
    "\1\46\22\21\7\0\1\45\1\0\1\46\4\0\1\46"+
    "\2\0\1\46\1\0\10\46\1\u0100\44\46\7\0\1\45"+
    "\1\0\1\46\4\0\1\46\1\51\1\0\1\46\1\0"+
    "\32\21\1\u0101\22\21\17\0\1\166\3\0\32\116\1\0"+
    "\20\116\1\u0102\1\116\17\0\1\166\3\0\32\116\1\0"+
    "\15\116\1\u0103\4\116\20\0\1\u0104\70\0\1\362\4\0"+
    "\1\362\1\0\2\362\1\0\55\362\7\0\1\45\1\0"+
    "\1\46\4\0\1\46\1\51\1\0\1\46\1\0\16\21"+
    "\1\u0105\13\21\1\46\22\21\7\0\1\45\1\0\1\46"+
    "\4\0\1\46\2\0\1\46\1\0\23\46\1\u0106\31\46"+
    "\7\0\1\45\1\0\1\46\4\0\1\46\2\0\1\46"+
    "\1\0\27\46\1\u0107\25\46\7\0\1\45\1\0\1\46"+
    "\4\0\1\46\1\51\1\0\1\46\1\0\23\21\1\u0108"+
    "\6\21\1\46\22\21\7\0\1\45\1\0\1\46\4\0"+
    "\1\46\2\0\1\46\1\0\4\46\1\u0109\50\46\7\0"+
    "\1\45\1\0\1\46\4\0\1\46\2\0\1\46\1\0"+
    "\3\46\1\u010a\51\46\7\0\1\45\1\0\1\46\4\0"+
    "\1\46\1\51\1\0\1\46\1\0\1\u010b\31\21\1\46"+
    "\22\21\7\0\1\45\1\0\1\46\4\0\1\46\2\0"+
    "\1\46\1\0\1\u010c\54\46\7\0\1\45\1\0\1\46"+
    "\4\0\1\46\1\51\1\0\1\46\1\0\32\21\1\u010d"+
    "\22\21\7\0\1\45\1\0\1\46\4\0\1\46\1\51"+
    "\1\0\1\46\1\0\16\21\1\u010e\13\21\1\46\22\21"+
    "\7\0\1\45\1\0\1\46\4\0\1\46\2\0\1\46"+
    "\1\0\22\46\1\u010f\32\46\7\0\1\45\1\0\1\46"+
    "\4\0\1\46\2\0\1\46\1\0\2\46\1\u0110\52\46"+
    "\17\0\1\166\3\0\32\116\1\0\11\116\1\u0111\10\116"+
    "\17\0\1\166\3\0\32\116\1\0\7\116\1\u0112\12\116"+
    "\23\0\32\u0113\1\0\22\u0113\7\0\1\45\1\0\1\46"+
    "\4\0\1\46\1\51\1\0\1\46\1\0\15\21\1\u0114"+
    "\14\21\1\46\22\21\7\0\1\45\1\0\1\46\4\0"+
    "\1\46\2\0\1\46\1\0\16\46\1\u0115\36\46\7\0"+
    "\1\45\1\0\1\46\4\0\1\46\2\0\1\46\1\0"+
    "\23\46\1\u0116\31\46\7\0\1\45\1\0\1\46\4\0"+
    "\1\46\1\51\1\0\1\46\1\0\4\21\1\u0117\25\21"+
    "\1\46\22\21\7\0\1\45\1\0\1\46\4\0\1\46"+
    "\2\0\1\46\1\0\1\u0118\54\46\7\0\1\45\1\0"+
    "\1\46\4\0\1\46\2\0\1\46\1\0\10\46\1\u0119"+
    "\44\46\7\0\1\45\1\0\1\46\4\0\1\46\1\51"+
    "\1\0\1\46\1\0\21\21\1\300\10\21\1\46\22\21"+
    "\7\0\1\45\1\0\1\46\4\0\1\46\2\0\1\46"+
    "\1\0\14\46\1\u011a\40\46\7\0\1\45\1\0\1\46"+
    "\4\0\1\46\2\0\1\u011b\1\0\55\46\7\0\1\45"+
    "\1\0\1\46\4\0\1\46\2\0\1\46\1\0\10\46"+
    "\1\u011c\44\46\7\0\1\45\1\0\1\46\4\0\1\46"+
    "\2\0\1\46\1\0\21\46\1\u011d\33\46\17\0\1\166"+
    "\3\0\32\116\1\0\1\u011e\21\116\17\0\1\166\3\0"+
    "\32\116\1\0\13\116\1\u011f\6\116\17\0\1\51\3\0"+
    "\32\u0113\1\0\22\u0113\7\0\1\45\1\0\1\46\4\0"+
    "\1\46\2\0\1\46\1\0\16\46\1\u0120\36\46\7\0"+
    "\1\45\1\0\1\46\4\0\1\46\1\51\1\0\1\46"+
    "\1\0\22\21\1\u0121\7\21\1\46\22\21\7\0\1\45"+
    "\1\0\1\46\4\0\1\46\2\0\1\46\1\0\2\46"+
    "\1\u0122\52\46\7\0\1\45\1\0\1\46\4\0\1\46"+
    "\2\0\1\46\1\0\5\46\1\u0123\47\46\7\0\1\45"+
    "\1\0\1\46\4\0\1\46\2\0\1\46\1\0\17\46"+
    "\1\u0124\35\46\7\0\1\45\1\0\1\46\4\0\1\46"+
    "\2\0\1\46\1\0\1\46\1\u0125\53\46\7\0\1\45"+
    "\1\0\1\46\4\0\1\46\2\0\1\46\1\0\4\46"+
    "\1\u0126\50\46\17\0\1\166\3\0\32\116\1\0\15\116"+
    "\1\u0127\4\116\17\0\1\166\3\0\32\116\1\0\16\116"+
    "\1\u0128\3\116\7\0\1\45\1\0\1\46\4\0\1\46"+
    "\2\0\1\46\1\0\10\46\1\u0129\44\46\7\0\1\45"+
    "\1\0\1\46\4\0\1\46\2\0\1\46\1\0\10\46"+
    "\1\u012a\44\46\7\0\1\45\1\0\1\46\4\0\1\46"+
    "\2\0\1\46\1\0\16\46\1\u012b\36\46\7\0\1\45"+
    "\1\0\1\46\4\0\1\46\2\0\1\46\1\0\13\46"+
    "\1\u012c\41\46\7\0\1\45\1\0\1\46\4\0\1\46"+
    "\2\0\1\46\1\0\1\u012d\54\46\17\0\1\166\3\0"+
    "\32\116\1\0\7\116\1\u012e\12\116\7\0\1\45\1\0"+
    "\1\46\4\0\1\46\2\0\1\46\1\0\16\46\1\u012f"+
    "\36\46\7\0\1\45\1\0\1\46\4\0\1\46\2\0"+
    "\1\46\1\0\2\46\1\u0130\52\46\7\0\1\45\1\0"+
    "\1\46\4\0\1\46\2\0\1\46\1\0\4\46\1\u0131"+
    "\50\46\7\0\1\45\1\0\1\46\4\0\1\46\2\0"+
    "\1\46\1\0\2\46\1\u0132\52\46\17\0\1\166\3\0"+
    "\32\116\1\0\13\116\1\u0133\6\116\7\0\1\45\1\0"+
    "\1\46\4\0\1\46\2\0\1\46\1\0\15\46\1\u0134"+
    "\37\46\7\0\1\45\1\0\1\46\4\0\1\46\2\0"+
    "\1\46\1\0\1\u0135\54\46\7\0\1\45\1\0\1\46"+
    "\4\0\1\46\2\0\1\46\1\0\10\46\1\u0136\44\46"+
    "\17\0\1\166\3\0\32\116\1\0\16\116\1\u0137\3\116"+
    "\7\0\1\45\1\0\1\46\4\0\1\46\2\0\1\46"+
    "\1\0\2\46\1\u0138\52\46\7\0\1\45\1\0\1\46"+
    "\4\0\1\46\2\0\1\46\1\0\16\46\1\u0139\36\46"+
    "\7\0\1\45\1\0\1\46\4\0\1\46\2\0\1\46"+
    "\1\0\10\46\1\u013a\44\46\7\0\1\45\1\0\1\46"+
    "\4\0\1\46\2\0\1\46\1\0\15\46\1\u013b\37\46"+
    "\7\0\1\45\1\0\1\46\4\0\1\46\2\0\1\46"+
    "\1\0\16\46\1\u013c\36\46\7\0\1\45\1\0\1\46"+
    "\4\0\1\46\2\0\1\46\1\0\15\46\1\u013d\37\46"+
    "\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[17664];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\1\1\11\2\1\3\11\1\1\1\0\1\1"+
    "\1\11\24\1\1\11\1\1\1\11\3\1\1\0\1\1"+
    "\1\0\44\1\1\0\43\1\1\0\3\1\1\0\37\1"+
    "\2\0\2\1\1\0\35\1\2\0\2\1\1\0\30\1"+
    "\3\0\1\1\1\0\24\1\3\0\21\1\3\0\14\1"+
    "\3\0\12\1\2\0\7\1\1\0\6\1\1\0\4\1"+
    "\1\0\12\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[317];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    private Symbol symbol(int type, Object value){
        return new Symbol(type, yyline, yycolumn, value);
    }
    private Symbol symbol(int type){
        return new Symbol(type, yyline, yycolumn);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexerALM(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    return ZZ_CMAP[input];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { /*Ignore*/
            }
            // fall through
          case 49: break;
          case 2:
            { return new Symbol(symALM.COMILLAS, yycolumn, yyline, yytext());
            }
            // fall through
          case 50: break;
          case 3:
            { return new Symbol(symALM.USUARIO,yycolumn,yyline,yytext());
            }
            // fall through
          case 51: break;
          case 4:
            { return new Symbol(symALM.ID,yycolumn,yyline,yytext());
            }
            // fall through
          case 52: break;
          case 5:
            { return new Symbol(symALM.PARENTESISA, yycolumn, yyline, yytext());
            }
            // fall through
          case 53: break;
          case 6:
            { return new Symbol(symALM.PARENTESISC, yycolumn, yyline, yytext());
            }
            // fall through
          case 54: break;
          case 7:
            { return new Symbol(symALM.COMA, yycolumn, yyline, yytext());
            }
            // fall through
          case 55: break;
          case 8:
            { return new Symbol(symALM.NUMERO, yycolumn, yyline, yytext());
            }
            // fall through
          case 56: break;
          case 9:
            { return new Symbol(symALM.DOSP, yycolumn, yyline, yytext());
            }
            // fall through
          case 57: break;
          case 10:
            { return new Symbol(symALM.LLAVEA, yycolumn, yyline, yytext());
            }
            // fall through
          case 58: break;
          case 11:
            { return new Symbol(symALM.OR,yycolumn,yyline,yytext());
            }
            // fall through
          case 59: break;
          case 12:
            { return new Symbol(symALM.LLAVEC, yycolumn, yyline, yytext());
            }
            // fall through
          case 60: break;
          case 13:
            { return new Symbol(symALM.TITULO, yycolumn, yyline, yytext());
            }
            // fall through
          case 61: break;
          case 14:
            { return new Symbol(symALM.BOOL,yycolumn,yyline,yytext());
            }
            // fall through
          case 62: break;
          case 15:
            { return new Symbol(symALM.URLC,yycolumn,yyline,yytext());
            }
            // fall through
          case 63: break;
          case 16:
            { return new Symbol(symALM.TEMA,yycolumn,yyline,yytext());
            }
            // fall through
          case 64: break;
          case 17:
            { return new Symbol(symALM.TEMAP,yycolumn,yyline,yytext());
            }
            // fall through
          case 65: break;
          case 18:
            { return new Symbol(symALM.CLASEBOTON,yycolumn,yyline,yytext());
            }
            // fall through
          case 66: break;
          case 19:
            { return new Symbol(symALM.CLASE,yycolumn,yyline,yytext());
            }
            // fall through
          case 67: break;
          case 20:
            { return new Symbol(symALM.CLASEOPCIONES,yycolumn,yyline,yytext());
            }
            // fall through
          case 68: break;
          case 21:
            { return new Symbol(symALM.DATOS, yycolumn, yyline, yytext());
            }
            // fall through
          case 69: break;
          case 22:
            { return new Symbol(symALM.FILAS,yycolumn,yyline,yytext());
            }
            // fall through
          case 70: break;
          case 23:
            { return new Symbol(symALM.ALINEA,yycolumn,yyline,yytext());
            }
            // fall through
          case 71: break;
          case 24:
            { return new Symbol(symALM.CLASEIMAGEN,yycolumn,yyline,yytext());
            }
            // fall through
          case 72: break;
          case 25:
            { return new Symbol(symALM.INDICEC,yycolumn,yyline,yytext());
            }
            // fall through
          case 73: break;
          case 26:
            { return new Symbol(symALM.NOMBREP,yycolumn,yyline,yytext());
            }
            // fall through
          case 74: break;
          case 27:
            { return new Symbol(symALM.TITULOP,yycolumn,yyline,yytext());
            }
            // fall through
          case 75: break;
          case 28:
            { return new Symbol(symALM.CLASENORMAL,yycolumn,yyline,yytext());
            }
            // fall through
          case 76: break;
          case 29:
            { return new Symbol(symALM.IDC,yycolumn,yyline,yytext());
            }
            // fall through
          case 77: break;
          case 30:
            { return new Symbol(symALM.IDF,yycolumn,yyline,yytext());
            }
            // fall through
          case 78: break;
          case 31:
            { return new Symbol(symALM.USUARIOP,yycolumn,yyline,yytext());
            }
            // fall through
          case 79: break;
          case 32:
            { return new Symbol(symALM.FECHA,yycolumn,yyline,yytext());
            }
            // fall through
          case 80: break;
          case 33:
            { return new Symbol(symALM.URL, yycolumn,yyline,yytext());
            }
            // fall through
          case 81: break;
          case 34:
            { return new Symbol(symALM.COLUMNAS,yycolumn,yyline,yytext());
            }
            // fall through
          case 82: break;
          case 35:
            { return new Symbol(symALM.OPCIONES,yycolumn,yyline,yytext());
            }
            // fall through
          case 83: break;
          case 36:
            { return new Symbol(symALM.CONTRAP,yycolumn,yyline,yytext());
            }
            // fall through
          case 84: break;
          case 37:
            { return new Symbol(symALM.REQUERIDO,yycolumn,yyline,yytext());
            }
            // fall through
          case 85: break;
          case 38:
            { return new Symbol(symALM.ALINEAC,yycolumn,yyline,yytext());
            }
            // fall through
          case 86: break;
          case 39:
            { return new Symbol(symALM.CLASEAREA,yycolumn,yyline,yytext());
            }
            // fall through
          case 87: break;
          case 40:
            { return new Symbol(symALM.NOREGISTRO, yycolumn, yyline, yytext());
            }
            // fall through
          case 88: break;
          case 41:
            { return new Symbol(symALM.COMPS, yycolumn, yyline, yytext());
            }
            // fall through
          case 89: break;
          case 42:
            { return new Symbol(symALM.INICIOUSUARIOS, yycolumn, yyline, yytext());
            }
            // fall through
          case 90: break;
          case 43:
            { return new Symbol(symALM.NOMBREC,yycolumn,yyline,yytext());
            }
            // fall through
          case 91: break;
          case 44:
            { return new Symbol(symALM.TEXTOVC,yycolumn,yyline,yytext());
            }
            // fall through
          case 92: break;
          case 45:
            { return new Symbol(symALM.FECHACP,yycolumn,yyline,yytext());
            }
            // fall through
          case 93: break;
          case 46:
            { return new Symbol(symALM.INICIOFORM,yycolumn, yyline, yytext());
            }
            // fall through
          case 94: break;
          case 47:
            { return new Symbol(symALM.USUARIOCP,yycolumn,yyline,yytext());
            }
            // fall through
          case 95: break;
          case 48:
            { return new Symbol(symALM.FECHAMP,yycolumn,yyline,yytext());
            }
            // fall through
          case 96: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
