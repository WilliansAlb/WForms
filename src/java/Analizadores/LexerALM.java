// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/Analizadores/LexerALM.flex

package Analizadores;
import java_cup.runtime.Symbol;

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class LexerALM implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\2\22\0\1\4\1\0"+
    "\1\5\1\6\1\7\2\6\1\0\1\10\1\11\2\0"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\5\22\1\23\1\24\5\0\1\6\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\4\0"+
    "\1\57\1\0\1\60\1\61\1\62\1\63\1\64\1\65"+
    "\1\55\1\66\1\67\1\55\1\70\1\71\1\72\1\55"+
    "\1\73\1\74\1\55\1\75\1\76\1\77\1\100\1\55"+
    "\1\101\3\55\1\102\1\103\1\104\7\0\1\3\72\0"+
    "\100\105\u0128\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\3\1\0\2\10\1\11\25\3\1\12\1\13\1\14"+
    "\1\1\1\0\1\3\1\0\1\15\1\10\1\0\24\3"+
    "\1\16\4\3\1\16\11\3\2\10\1\0\37\3\1\17"+
    "\4\3\1\0\1\3\1\10\1\0\2\3\1\20\27\3"+
    "\1\21\4\3\3\0\2\3\1\0\2\3\1\22\3\3"+
    "\1\23\1\3\1\24\4\3\1\25\16\3\1\26\3\0"+
    "\3\3\1\0\3\3\1\27\10\3\1\30\1\31\2\3"+
    "\1\32\5\3\1\33\1\3\3\0\2\3\1\0\10\3"+
    "\1\34\1\35\1\36\10\3\1\37\4\0\1\3\1\40"+
    "\3\3\1\41\5\3\1\42\1\43\4\3\1\44\3\0"+
    "\13\3\1\45\1\3\1\46\2\3\3\0\1\47\1\50"+
    "\1\51\5\3\1\52\2\3\2\0\1\34\1\53\5\3"+
    "\1\0\1\54\2\3\1\55\2\3\1\0\2\3\1\56"+
    "\1\3\1\0\1\57\2\3\1\60\3\3\1\61\1\3"+
    "\1\62";

  private static int [] zzUnpackAction() {
    int [] result = new int[332];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\106\0\214\0\322\0\u0118\0\214\0\214\0\214"+
    "\0\u015e\0\u01a4\0\u01ea\0\u0230\0\322\0\u0276\0\u02bc\0\u0302"+
    "\0\u0348\0\u038e\0\u03d4\0\u041a\0\u0460\0\u04a6\0\u04ec\0\u0532"+
    "\0\u0578\0\u05be\0\u0604\0\u064a\0\u0690\0\u06d6\0\u071c\0\u0762"+
    "\0\u07a8\0\u07ee\0\214\0\106\0\214\0\u0834\0\u087a\0\u08c0"+
    "\0\u0906\0\u087a\0\u094c\0\u0992\0\u09d8\0\u0a1e\0\u0a64\0\u0aaa"+
    "\0\u0af0\0\u0b36\0\u0b7c\0\u0bc2\0\u0c08\0\u0c4e\0\u0c94\0\u0cda"+
    "\0\u0d20\0\u0d66\0\u0dac\0\u0df2\0\u0e38\0\u0e7e\0\u0ec4\0\u0f0a"+
    "\0\u0f50\0\u0f96\0\u0fdc\0\u1022\0\u1068\0\u038e\0\u10ae\0\u10f4"+
    "\0\u113a\0\u1180\0\u11c6\0\u120c\0\u1252\0\u1298\0\u12de\0\u0906"+
    "\0\u1324\0\u136a\0\u13b0\0\u13f6\0\u143c\0\u1482\0\u14c8\0\u150e"+
    "\0\u1554\0\u159a\0\u15e0\0\u1626\0\u166c\0\u16b2\0\u16f8\0\u173e"+
    "\0\u1784\0\u17ca\0\u1810\0\u1856\0\u189c\0\u18e2\0\u1928\0\u196e"+
    "\0\u19b4\0\u19fa\0\u1a40\0\u1a86\0\u1acc\0\u1b12\0\u1b58\0\u1b9e"+
    "\0\u1be4\0\u038e\0\u1c2a\0\u1c70\0\u1cb6\0\u1cfc\0\u1d42\0\u1d88"+
    "\0\u1dce\0\u1e14\0\u1e5a\0\u1ea0\0\u038e\0\u1ee6\0\u1f2c\0\u1f72"+
    "\0\u1fb8\0\u1ffe\0\u2044\0\u208a\0\u20d0\0\u2116\0\u215c\0\u21a2"+
    "\0\u21e8\0\u222e\0\u2274\0\u22ba\0\u2300\0\u2346\0\u238c\0\u23d2"+
    "\0\u2418\0\u245e\0\u24a4\0\u24ea\0\u038e\0\u2530\0\u2576\0\u25bc"+
    "\0\u2602\0\u2648\0\u268e\0\u26d4\0\u271a\0\u2760\0\u27a6\0\u27ec"+
    "\0\u2832\0\u038e\0\u2878\0\u28be\0\u2904\0\u038e\0\u294a\0\u038e"+
    "\0\u2990\0\u29d6\0\u2a1c\0\u2a62\0\u038e\0\u2aa8\0\u2aee\0\u2b34"+
    "\0\u2b7a\0\u2bc0\0\u2c06\0\u2c4c\0\u2c92\0\u2cd8\0\u2d1e\0\u2d64"+
    "\0\u2daa\0\u2df0\0\u2e36\0\u038e\0\u2e7c\0\u2ec2\0\u2f08\0\u2f4e"+
    "\0\u2f94\0\u2fda\0\u3020\0\u3066\0\u30ac\0\u30f2\0\u038e\0\u3138"+
    "\0\u317e\0\u31c4\0\u320a\0\u3250\0\u3296\0\u32dc\0\u3322\0\u038e"+
    "\0\u038e\0\u3368\0\u33ae\0\u33f4\0\u343a\0\u3480\0\u34c6\0\u350c"+
    "\0\u3552\0\u038e\0\u3598\0\u35de\0\u3624\0\u366a\0\u36b0\0\u36f6"+
    "\0\u373c\0\u3782\0\u37c8\0\u380e\0\u3854\0\u389a\0\u38e0\0\u3926"+
    "\0\u396c\0\u038e\0\u08c0\0\u08c0\0\u39b2\0\u39f8\0\u3a3e\0\u3a84"+
    "\0\u3aca\0\u3b10\0\u3b56\0\u3b9c\0\u3be2\0\u3c28\0\u3c6e\0\u3cb4"+
    "\0\u3cfa\0\u3d40\0\u3d86\0\u3dcc\0\u3e12\0\u3e58\0\u038e\0\u3e9e"+
    "\0\u3ee4\0\u3f2a\0\u3f70\0\u3fb6\0\u038e\0\u038e\0\u3ffc\0\u4042"+
    "\0\u4088\0\u40ce\0\u136a\0\u4114\0\u415a\0\u41a0\0\u41e6\0\u422c"+
    "\0\u4272\0\u42b8\0\u42fe\0\u4344\0\u438a\0\u43d0\0\u4416\0\u445c"+
    "\0\u44a2\0\u038e\0\u44e8\0\u038e\0\u452e\0\u4574\0\u45ba\0\u4600"+
    "\0\u4646\0\u08c0\0\u038e\0\u08c0\0\u468c\0\u46d2\0\u4718\0\u475e"+
    "\0\u47a4\0\u44e8\0\u47ea\0\u4830\0\u4876\0\u48bc\0\u08c0\0\u038e"+
    "\0\u4902\0\u4948\0\u498e\0\u49d4\0\u4a1a\0\u4a60\0\u136a\0\u4aa6"+
    "\0\u4aec\0\u08c0\0\u4b32\0\u4b78\0\u4bbe\0\u4c04\0\u4c4a\0\u08c0"+
    "\0\u4c90\0\u4cd6\0\u08c0\0\u4d1c\0\u4d62\0\u136a\0\u4da8\0\u4dee"+
    "\0\u4e34\0\u08c0\0\u4e7a\0\u08c0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[332];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\2\2\1\0\1\2\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\0\1\12\1\13\2\14\3\13"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\2\22"+
    "\1\24\1\25\3\22\1\26\1\27\1\30\1\22\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\3\22\1\11\1\22"+
    "\1\37\1\22\1\40\2\22\1\41\12\22\1\42\1\43"+
    "\1\44\1\45\2\0\2\2\1\0\1\2\76\0\1\2"+
    "\116\0\1\4\4\0\1\4\2\0\64\4\13\0\1\5"+
    "\3\0\1\5\2\0\6\5\1\0\55\5\12\0\1\4"+
    "\1\5\3\0\1\11\2\0\6\11\1\4\55\11\21\0"+
    "\1\46\74\0\1\47\1\0\1\50\4\0\1\50\1\51"+
    "\1\0\6\13\56\50\3\0\1\52\4\0\1\47\1\0"+
    "\1\50\4\0\1\50\1\51\1\0\1\53\4\13\1\53"+
    "\56\50\3\0\1\52\4\0\1\47\1\0\1\50\4\0"+
    "\1\50\1\54\1\0\7\50\13\22\1\55\5\22\1\56"+
    "\10\22\1\50\22\22\3\0\1\52\4\0\1\47\1\0"+
    "\1\50\4\0\1\50\1\54\1\0\7\50\13\22\1\57"+
    "\2\22\1\60\13\22\1\50\11\22\1\61\10\22\3\0"+
    "\1\52\4\0\1\47\1\0\1\50\4\0\1\50\1\54"+
    "\1\0\7\50\1\62\3\22\1\63\2\22\1\64\3\22"+
    "\1\65\2\22\1\66\13\22\1\50\22\22\3\0\1\52"+
    "\4\0\1\47\1\0\1\50\4\0\1\50\1\54\1\0"+
    "\7\50\1\67\3\22\1\70\25\22\1\50\1\71\21\22"+
    "\3\0\1\52\4\0\1\47\1\0\1\50\4\0\1\50"+
    "\1\54\1\0\7\50\32\22\1\50\22\22\3\0\1\52"+
    "\4\0\1\47\1\0\1\50\4\0\1\50\1\54\1\0"+
    "\7\50\4\22\1\72\3\22\1\73\21\22\1\50\22\22"+
    "\3\0\1\52\4\0\1\47\1\0\1\50\4\0\1\50"+
    "\1\54\1\0\7\50\3\22\1\74\10\22\1\75\1\76"+
    "\13\22\1\77\1\50\22\22\3\0\1\52\4\0\1\47"+
    "\1\0\1\50\4\0\1\50\1\54\1\0\7\50\24\22"+
    "\1\100\5\22\1\50\22\22\3\0\1\52\4\0\1\47"+
    "\1\0\1\50\4\0\1\50\1\54\1\0\7\50\16\22"+
    "\1\101\13\22\1\50\22\22\3\0\1\52\4\0\1\47"+
    "\1\0\1\50\4\0\1\50\1\54\1\0\7\50\17\22"+
    "\1\102\12\22\1\50\22\22\3\0\1\52\4\0\1\47"+
    "\1\0\1\50\4\0\1\50\1\54\1\0\7\50\1\103"+
    "\31\22\1\50\22\22\3\0\1\52\4\0\1\47\1\0"+
    "\1\50\4\0\1\50\1\54\1\0\7\50\1\104\3\22"+
    "\1\105\25\22\1\50\22\22\3\0\1\52\4\0\1\47"+
    "\1\0\1\50\4\0\1\50\1\54\1\0\7\50\10\22"+
    "\1\106\21\22\1\50\22\22\3\0\1\52\4\0\1\47"+
    "\1\0\1\50\4\0\1\50\1\54\1\0\7\50\4\22"+
    "\1\107\3\22\1\110\21\22\1\50\22\22\3\0\1\52"+
    "\4\0\1\47\1\0\1\50\4\0\1\50\1\54\1\0"+
    "\7\50\21\22\1\111\1\112\7\22\1\50\22\22\3\0"+
    "\1\52\4\0\1\47\1\0\1\50\4\0\1\50\1\54"+
    "\1\0\7\50\1\113\31\22\1\50\22\22\3\0\1\52"+
    "\4\0\1\47\1\0\1\50\4\0\1\50\1\54\1\0"+
    "\7\50\7\22\1\114\22\22\1\50\6\22\1\115\13\22"+
    "\3\0\1\52\4\0\1\47\1\0\1\50\4\0\1\50"+
    "\1\54\1\0\7\50\32\22\1\50\11\22\1\61\10\22"+
    "\3\0\1\52\4\0\1\47\1\0\1\50\4\0\1\50"+
    "\1\54\1\0\7\50\32\22\1\50\1\71\1\116\20\22"+
    "\3\0\1\52\4\0\1\47\1\0\1\50\4\0\1\50"+
    "\1\54\1\0\7\50\32\22\1\50\17\22\1\117\2\22"+
    "\3\0\1\52\4\0\1\47\1\0\1\50\4\0\1\50"+
    "\1\54\1\0\7\50\32\22\1\50\6\22\1\115\13\22"+
    "\3\0\1\52\2\46\2\0\102\46\4\0\1\47\1\0"+
    "\1\52\4\0\1\47\2\0\64\52\3\0\1\52\4\0"+
    "\1\47\1\0\1\50\4\0\1\50\2\0\64\50\3\0"+
    "\1\52\16\0\6\120\66\0\1\47\1\0\1\50\4\0"+
    "\1\50\1\51\1\0\6\121\56\50\3\0\1\52\25\0"+
    "\32\122\1\0\22\122\10\0\1\47\1\0\1\50\4\0"+
    "\1\50\1\54\1\0\7\50\10\22\1\123\21\22\1\50"+
    "\22\22\3\0\1\52\4\0\1\47\1\0\1\50\4\0"+
    "\1\50\1\54\1\0\7\50\4\22\1\124\25\22\1\50"+
    "\22\22\3\0\1\52\4\0\1\47\1\0\1\50\4\0"+
    "\1\50\1\54\1\0\7\50\24\22\1\125\5\22\1\50"+
    "\22\22\3\0\1\52\4\0\1\47\1\0\1\50\4\0"+
    "\1\50\1\54\1\0\7\50\23\22\1\126\6\22\1\50"+
    "\22\22\3\0\1\52\4\0\1\47\1\0\1\50\4\0"+
    "\1\50\1\54\1\0\7\50\32\22\1\50\20\22\1\127"+
    "\1\22\3\0\1\52\4\0\1\47\1\0\1\50\4\0"+
    "\1\50\1\54\1\0\7\50\14\22\1\130\15\22\1\50"+
    "\22\22\3\0\1\52\4\0\1\47\1\0\1\50\4\0"+
    "\1\50\1\54\1\0\7\50\15\22\1\131\14\22\1\50"+
    "\22\22\3\0\1\52\4\0\1\47\1\0\1\50\4\0"+
    "\1\50\1\54\1\0\7\50\4\22\1\132\25\22\1\50"+
    "\22\22\3\0\1\52\4\0\1\47\1\0\1\50\4\0"+
    "\1\50\1\54\1\0\7\50\1\133\31\22\1\50\22\22"+
    "\3\0\1\52\4\0\1\47\1\0\1\50\4\0\1\50"+
    "\1\54\1\0\7\50\13\22\1\134\1\135\15\22\1\50"+
    "\22\22\3\0\1\52\4\0\1\47\1\0\1\50\4\0"+
    "\1\50\1\54\1\0\7\50\21\22\1\136\10\22\1\50"+
    "\22\22\3\0\1\52\4\0\1\47\1\0\1\50\4\0"+
    "\1\50\1\54\1\0\7\50\21\22\1\137\10\22\1\50"+
    "\22\22\3\0\1\52\4\0\1\47\1\0\1\50\4\0"+
    "\1\50\1\54\1\0\7\50\32\22\1\50\15\22\1\140"+
    "\4\22\3\0\1\52\4\0\1\47\1\0\1\50\4\0"+
    "\1\50\1\54\1\0\7\50\2\22\1\141\27\22\1\50"+
    "\22\22\3\0\1\52\4\0\1\47\1\0\1\50\4\0"+
    "\1\50\1\54\1\0\7\50\2\22\1\142\10\22\1\143"+
    "\16\22\1\50\22\22\3\0\1\52\4\0\1\47\1\0"+
    "\1\50\4\0\1\50\1\54\1\0\7\50\32\22\1\144"+
    "\22\22\3\0\1\52\4\0\1\47\1\0\1\50\4\0"+
    "\1\50\1\54\1\0\7\50\1\145\31\22\1\50\22\22"+
    "\3\0\1\52\4\0\1\47\1\0\1\50\4\0\1\50"+
    "\1\54\1\0\7\50\3\22\1\146\26\22\1\50\22\22"+
    "\3\0\1\52\4\0\1\47\1\0\1\50\4\0\1\50"+
    "\1\54\1\0\7\50\20\22\1\147\11\22\1\50\22\22"+
    "\3\0\1\52\4\0\1\47\1\0\1\50\4\0\1\50"+
    "\1\54\1\0\7\50\22\22\1\150\7\22\1\50\22\22"+
    "\3\0\1\52\4\0\1\47\1\0\1\50\4\0\1\50"+
    "\1\54\1\0\7\50\14\22\1\151\15\22\1\50\22\22"+
    "\3\0\1\52\4\0\1\47\1\0\1\50\4\0\1\50"+
    "\1\54\1\0\7\50\2\22\1\152\27\22\1\50\22\22"+
    "\3\0\1\52\4\0\1\47\1\0\1\50\4\0\1\50"+
    "\1\54\1\0\7\50\22\22\1\153\7\22\1\50\22\22"+
    "\3\0\1\52\4\0\1\47\1\0\1\50\4\0\1\50"+
    "\1\54\1\0\7\50\3\22\1\154\26\22\1\50\22\22"+
    "\3\0\1\52\4\0\1\47\1\0\1\50\4\0\1\50"+
    "\1\54\1\0\7\50\6\22\1\155\11\22\1\156\11\22"+
    "\1\50\22\22\3\0\1\52\4\0\1\47\1\0\1\50"+
    "\4\0\1\50\1\54\1\0\7\50\14\22\1\157\12\22"+
    "\1\160\2\22\1\50\22\22\3\0\1\52\4\0\1\47"+
    "\1\0\1\50\4\0\1\50\1\54\1\0\7\50\23\22"+
    "\1\161\6\22\1\50\22\22\3\0\1\52\4\0\1\47"+
    "\1\0\1\50\4\0\1\50\1\54\1\0\7\50\13\22"+
    "\1\162\16\22\1\50\22\22\3\0\1\52\4\0\1\47"+
    "\1\0\1\50\4\0\1\50\1\54\1\0\7\50\24\22"+
    "\1\163\5\22\1\50\22\22\3\0\1\52\4\0\1\47"+
    "\1\0\1\50\4\0\1\50\1\54\1\0\7\50\13\22"+
    "\1\164\16\22\1\50\22\22\3\0\1\52\4\0\1\47"+
    "\1\0\1\50\4\0\1\50\1\54\1\0\7\50\10\22"+
    "\1\165\21\22\1\50\22\22\3\0\1\52\4\0\1\47"+
    "\1\0\1\50\4\0\1\50\1\54\1\0\7\50\32\22"+
    "\1\50\7\22\1\166\12\22\3\0\1\52\4\0\1\47"+
    "\1\0\1\50\4\0\1\50\1\167\1\0\7\50\32\22"+
    "\1\50\22\22\3\0\1\52\4\0\1\47\1\0\1\50"+
    "\4\0\1\50\1\54\1\0\7\50\32\22\1\50\17\22"+
    "\1\170\2\22\3\0\1\52\4\0\1\47\1\0\1\50"+
    "\4\0\1\50\1\51\1\0\6\171\56\50\3\0\1\52"+
    "\14\0\1\172\10\0\32\122\1\0\22\122\10\0\1\47"+
    "\1\0\1\50\4\0\1\50\1\54\1\0\7\50\15\22"+
    "\1\173\14\22\1\50\22\22\3\0\1\52\4\0\1\47"+
    "\1\0\1\50\4\0\1\50\1\54\1\0\7\50\1\174"+
    "\31\22\1\50\22\22\3\0\1\52\4\0\1\47\1\0"+
    "\1\50\4\0\1\50\1\54\1\0\7\50\4\22\1\175"+
    "\25\22\1\50\22\22\3\0\1\52\4\0\1\47\1\0"+
    "\1\50\4\0\1\50\1\54\1\0\7\50\16\22\1\176"+
    "\13\22\1\50\22\22\3\0\1\52\4\0\1\47\1\0"+
    "\1\50\4\0\1\50\1\54\1\0\7\50\32\22\1\50"+
    "\4\22\1\175\15\22\3\0\1\52\4\0\1\47\1\0"+
    "\1\50\4\0\1\50\1\54\1\0\7\50\17\22\1\177"+
    "\12\22\1\50\22\22\3\0\1\52\4\0\1\47\1\0"+
    "\1\50\4\0\1\50\1\54\1\0\7\50\23\22\1\200"+
    "\6\22\1\50\22\22\3\0\1\52\4\0\1\47\1\0"+
    "\1\50\4\0\1\50\1\54\1\0\7\50\2\22\1\201"+
    "\27\22\1\50\22\22\3\0\1\52\4\0\1\47\1\0"+
    "\1\50\4\0\1\50\1\54\1\0\7\50\22\22\1\202"+
    "\7\22\1\50\22\22\3\0\1\52\4\0\1\47\1\0"+
    "\1\50\4\0\1\50\1\54\1\0\7\50\24\22\1\203"+
    "\5\22\1\50\22\22\3\0\1\52\4\0\1\47\1\0"+
    "\1\50\4\0\1\50\1\54\1\0\7\50\1\22\1\204"+
    "\15\22\1\205\12\22\1\50\22\22\3\0\1\52\4\0"+
    "\1\47\1\0\1\50\4\0\1\50\1\54\1\0\7\50"+
    "\12\22\1\175\17\22\1\50\22\22\3\0\1\52\4\0"+
    "\1\47\1\0\1\50\4\0\1\50\1\54\1\0\7\50"+
    "\4\22\1\206\25\22\1\50\22\22\3\0\1\52\4\0"+
    "\1\47\1\0\1\50\4\0\1\50\1\54\1\0\7\50"+
    "\32\22\1\50\10\22\1\175\11\22\3\0\1\52\4\0"+
    "\1\47\1\0\1\50\4\0\1\50\1\54\1\0\7\50"+
    "\7\22\1\207\22\22\1\50\22\22\3\0\1\52\4\0"+
    "\1\47\1\0\1\50\4\0\1\50\1\54\1\0\7\50"+
    "\7\22\1\210\22\22\1\50\22\22\3\0\1\52\4\0"+
    "\1\47\1\0\1\50\4\0\1\50\1\54\1\0\7\50"+
    "\1\211\31\22\1\50\22\22\3\0\1\52\4\0\1\47"+
    "\1\0\1\50\4\0\1\50\2\0\11\50\1\212\2\50"+
    "\1\213\47\50\3\0\1\52\4\0\1\47\1\0\1\50"+
    "\4\0\1\50\1\54\1\0\7\50\6\22\1\214\23\22"+
    "\1\50\22\22\3\0\1\52\4\0\1\47\1\0\1\50"+
    "\4\0\1\50\1\54\1\0\7\50\10\22\1\215\21\22"+
    "\1\50\22\22\3\0\1\52\4\0\1\47\1\0\1\50"+
    "\4\0\1\50\1\54\1\0\7\50\24\22\1\216\5\22"+
    "\1\50\22\22\3\0\1\52\4\0\1\47\1\0\1\50"+
    "\4\0\1\50\1\54\1\0\7\50\23\22\1\217\6\22"+
    "\1\50\22\22\3\0\1\52\4\0\1\47\1\0\1\50"+
    "\4\0\1\50\1\54\1\0\7\50\1\22\1\220\30\22"+
    "\1\50\22\22\3\0\1\52\4\0\1\47\1\0\1\50"+
    "\4\0\1\50\1\54\1\0\7\50\10\22\1\221\21\22"+
    "\1\50\22\22\3\0\1\52\4\0\1\47\1\0\1\50"+
    "\4\0\1\50\1\54\1\0\7\50\22\22\1\222\7\22"+
    "\1\50\22\22\3\0\1\52\4\0\1\47\1\0\1\50"+
    "\4\0\1\50\1\54\1\0\7\50\10\22\1\204\21\22"+
    "\1\50\22\22\3\0\1\52\4\0\1\47\1\0\1\50"+
    "\4\0\1\50\1\54\1\0\7\50\10\22\1\223\21\22"+
    "\1\50\22\22\3\0\1\52\4\0\1\47\1\0\1\50"+
    "\4\0\1\50\1\54\1\0\7\50\24\22\1\224\5\22"+
    "\1\50\22\22\3\0\1\52\4\0\1\47\1\0\1\50"+
    "\4\0\1\50\1\54\1\0\7\50\1\225\31\22\1\50"+
    "\22\22\3\0\1\52\4\0\1\47\1\0\1\50\4\0"+
    "\1\50\1\54\1\0\7\50\23\22\1\226\6\22\1\50"+
    "\22\22\3\0\1\52\4\0\1\47\1\0\1\50\4\0"+
    "\1\50\1\54\1\0\7\50\24\22\1\227\5\22\1\50"+
    "\22\22\3\0\1\52\4\0\1\47\1\0\1\50\4\0"+
    "\1\50\1\54\1\0\7\50\1\230\31\22\1\50\22\22"+
    "\3\0\1\52\4\0\1\47\1\0\1\50\4\0\1\50"+
    "\1\54\1\0\7\50\16\22\1\231\13\22\1\50\22\22"+
    "\3\0\1\52\4\0\1\47\1\0\1\50\4\0\1\50"+
    "\1\54\1\0\7\50\23\22\1\125\6\22\1\50\22\22"+
    "\3\0\1\52\4\0\1\47\1\0\1\50\4\0\1\50"+
    "\1\54\1\0\7\50\32\22\1\50\17\22\1\127\2\22"+
    "\3\0\1\52\25\0\32\122\1\0\3\122\1\232\1\122"+
    "\1\233\12\122\1\234\1\122\10\0\1\47\1\0\1\50"+
    "\4\0\1\50\1\54\1\0\7\50\32\22\1\50\14\22"+
    "\1\235\5\22\3\0\1\52\4\0\1\47\1\0\1\50"+
    "\4\0\1\236\1\51\1\0\6\13\56\50\3\0\1\52"+
    "\62\0\1\237\27\0\1\47\1\0\1\50\4\0\1\50"+
    "\1\54\1\0\7\50\4\22\1\240\25\22\1\50\22\22"+
    "\3\0\1\52\4\0\1\47\1\0\1\50\4\0\1\50"+
    "\1\54\1\0\7\50\32\22\1\241\22\22\3\0\1\52"+
    "\4\0\1\47\1\0\1\50\4\0\1\50\1\54\1\0"+
    "\7\50\15\22\1\242\14\22\1\50\22\22\3\0\1\52"+
    "\4\0\1\47\1\0\1\50\4\0\1\50\1\54\1\0"+
    "\7\50\16\22\1\243\13\22\1\50\22\22\3\0\1\52"+
    "\4\0\1\47\1\0\1\50\4\0\1\50\1\54\1\0"+
    "\7\50\21\22\1\244\10\22\1\50\22\22\3\0\1\52"+
    "\4\0\1\47\1\0\1\50\4\0\1\50\1\54\1\0"+
    "\7\50\12\22\1\245\17\22\1\50\22\22\3\0\1\52"+
    "\4\0\1\47\1\0\1\50\4\0\1\50\1\54\1\0"+
    "\7\50\4\22\1\246\25\22\1\50\22\22\3\0\1\52"+
    "\4\0\1\47\1\0\1\50\4\0\1\50\1\54\1\0"+
    "\7\50\14\22\1\247\15\22\1\50\22\22\3\0\1\52"+
    "\4\0\1\47\1\0\1\50\4\0\1\50\1\54\1\0"+
    "\7\50\16\22\1\250\13\22\1\50\22\22\3\0\1\52"+
    "\4\0\1\47\1\0\1\50\4\0\1\50\1\54\1\0"+
    "\7\50\16\22\1\251\13\22\1\50\22\22\3\0\1\52"+
    "\4\0\1\47\1\0\1\50\4\0\1\50\1\54\1\0"+
    "\7\50\2\22\1\252\27\22\1\50\22\22\3\0\1\52"+
    "\4\0\1\47\1\0\1\50\4\0\1\50\1\54\1\0"+
    "\7\50\1\253\31\22\1\50\22\22\3\0\1\52\4\0"+
    "\1\47\1\0\1\50\4\0\1\50\1\54\1\0\7\50"+
    "\4\22\1\254\25\22\1\50\22\22\3\0\1\52\4\0"+
    "\1\47\1\0\1\50\4\0\1\50\1\54\1\0\7\50"+
    "\22\22\1\255\7\22\1\50\22\22\3\0\1\52\4\0"+
    "\1\47\1\0\1\50\4\0\1\50\2\0\25\50\1\256"+
    "\36\50\3\0\1\52\4\0\1\47\1\0\1\50\4\0"+
    "\1\50\2\0\25\50\1\257\36\50\3\0\1\52\4\0"+
    "\1\47\1\0\1\50\4\0\1\50\1\54\1\0\7\50"+
    "\4\22\1\260\25\22\1\50\22\22\3\0\1\52\4\0"+
    "\1\47\1\0\1\50\4\0\1\50\1\54\1\0\7\50"+
    "\2\22\1\261\27\22\1\50\22\22\3\0\1\52\4\0"+
    "\1\47\1\0\1\50\4\0\1\50\1\54\1\0\7\50"+
    "\10\22\1\262\21\22\1\50\22\22\3\0\1\52\4\0"+
    "\1\47\1\0\1\50\4\0\1\50\1\54\1\0\7\50"+
    "\10\22\1\263\21\22\1\50\22\22\3\0\1\52\4\0"+
    "\1\47\1\0\1\50\4\0\1\50\1\54\1\0\7\50"+
    "\21\22\1\264\10\22\1\50\22\22\3\0\1\52\4\0"+
    "\1\47\1\0\1\50\4\0\1\50\1\54\1\0\7\50"+
    "\16\22\1\265\13\22\1\50\22\22\3\0\1\52\4\0"+
    "\1\47\1\0\1\50\4\0\1\50\1\54\1\0\7\50"+
    "\26\22\1\266\3\22\1\50\22\22\3\0\1\52\4\0"+
    "\1\47\1\0\1\50\4\0\1\50\1\54\1\0\7\50"+
    "\22\22\1\267\7\22\1\50\22\22\3\0\1\52\4\0"+
    "\1\47\1\0\1\50\4\0\1\50\1\54\1\0\7\50"+
    "\4\22\1\270\25\22\1\50\22\22\3\0\1\52\4\0"+
    "\1\47\1\0\1\50\4\0\1\50\1\54\1\0\7\50"+
    "\16\22\1\271\13\22\1\50\22\22\3\0\1\52\4\0"+
    "\1\47\1\0\1\50\4\0\1\50\1\54\1\0\7\50"+
    "\13\22\1\272\16\22\1\50\22\22\3\0\1\52\4\0"+
    "\1\47\1\0\1\50\4\0\1\50\1\54\1\0\7\50"+
    "\21\22\1\273\10\22\1\50\22\22\3\0\1\52\4\0"+
    "\1\47\1\0\1\50\4\0\1\50\1\54\1\0\7\50"+
    "\21\22\1\274\10\22\1\50\22\22\3\0\1\52\14\0"+
    "\1\172\10\0\32\122\1\0\1\275\21\122\20\0\1\172"+
    "\10\0\32\122\1\0\13\122\1\276\6\122\20\0\1\172"+
    "\10\0\32\122\1\0\16\122\1\277\3\122\10\0\1\47"+
    "\1\0\1\50\4\0\1\50\1\54\1\0\7\50\32\22"+
    "\1\50\16\22\1\300\3\22\3\0\1\52\4\0\1\47"+
    "\1\0\1\50\4\0\1\50\2\0\1\301\1\302\62\50"+
    "\3\0\1\52\73\0\1\303\16\0\1\47\1\0\1\50"+
    "\4\0\1\50\1\54\1\0\7\50\1\304\31\22\1\50"+
    "\22\22\3\0\1\52\4\0\1\47\1\0\1\50\4\0"+
    "\1\50\2\0\32\50\1\305\31\50\3\0\1\52\4\0"+
    "\1\47\1\0\1\50\4\0\1\50\1\54\1\0\7\50"+
    "\32\22\1\306\22\22\3\0\1\52\4\0\1\47\1\0"+
    "\1\50\4\0\1\50\1\54\1\0\7\50\16\22\1\307"+
    "\13\22\1\50\22\22\3\0\1\52\4\0\1\47\1\0"+
    "\1\50\4\0\1\50\1\54\1\0\7\50\1\22\1\310"+
    "\30\22\1\50\22\22\3\0\1\52\4\0\1\47\1\0"+
    "\1\50\4\0\1\50\1\54\1\0\7\50\15\22\1\311"+
    "\14\22\1\50\22\22\3\0\1\52\4\0\1\47\1\0"+
    "\1\50\4\0\1\50\1\54\1\0\7\50\15\22\1\312"+
    "\14\22\1\50\22\22\3\0\1\52\4\0\1\47\1\0"+
    "\1\50\4\0\1\50\1\54\1\0\7\50\7\22\1\313"+
    "\22\22\1\50\22\22\3\0\1\52\4\0\1\47\1\0"+
    "\1\50\4\0\1\50\1\54\1\0\7\50\32\22\1\314"+
    "\22\22\3\0\1\52\4\0\1\47\1\0\1\50\4\0"+
    "\1\50\1\54\1\0\7\50\21\22\1\315\10\22\1\50"+
    "\22\22\3\0\1\52\4\0\1\47\1\0\1\50\4\0"+
    "\1\50\2\0\23\50\1\316\40\50\3\0\1\52\4\0"+
    "\1\47\1\0\1\50\4\0\1\50\2\0\30\50\1\317"+
    "\33\50\3\0\1\52\4\0\1\47\1\0\1\50\4\0"+
    "\1\50\1\54\1\0\7\50\15\22\1\320\14\22\1\50"+
    "\22\22\3\0\1\52\4\0\1\47\1\0\1\50\4\0"+
    "\1\50\1\54\1\0\7\50\4\22\1\321\25\22\1\50"+
    "\22\22\3\0\1\52\4\0\1\47\1\0\1\50\4\0"+
    "\1\50\1\54\1\0\7\50\4\22\1\322\25\22\1\50"+
    "\22\22\3\0\1\52\4\0\1\47\1\0\1\50\4\0"+
    "\1\50\1\54\1\0\7\50\5\22\1\323\24\22\1\50"+
    "\22\22\3\0\1\52\4\0\1\47\1\0\1\50\4\0"+
    "\1\50\1\54\1\0\7\50\4\22\1\324\25\22\1\50"+
    "\22\22\3\0\1\52\4\0\1\47\1\0\1\50\4\0"+
    "\1\50\1\54\1\0\7\50\15\22\1\325\14\22\1\50"+
    "\22\22\3\0\1\52\4\0\1\47\1\0\1\50\4\0"+
    "\1\50\1\54\1\0\7\50\16\22\1\326\13\22\1\50"+
    "\22\22\3\0\1\52\4\0\1\47\1\0\1\50\4\0"+
    "\1\50\1\54\1\0\7\50\23\22\1\327\6\22\1\50"+
    "\22\22\3\0\1\52\4\0\1\47\1\0\1\50\4\0"+
    "\1\50\1\54\1\0\7\50\21\22\1\330\10\22\1\50"+
    "\22\22\3\0\1\52\4\0\1\47\1\0\1\50\4\0"+
    "\1\50\1\54\1\0\7\50\32\22\1\331\22\22\3\0"+
    "\1\52\4\0\1\47\1\0\1\50\4\0\1\50\1\54"+
    "\1\0\7\50\16\22\1\332\13\22\1\50\22\22\3\0"+
    "\1\52\4\0\1\47\1\0\1\50\4\0\1\50\1\54"+
    "\1\0\7\50\10\22\1\333\21\22\1\50\22\22\3\0"+
    "\1\52\14\0\1\172\10\0\32\122\1\0\17\122\1\334"+
    "\2\122\20\0\1\172\10\0\32\122\1\0\15\122\1\335"+
    "\4\122\20\0\1\172\10\0\32\122\1\0\20\122\1\336"+
    "\1\122\10\0\1\47\1\0\1\50\4\0\1\50\1\54"+
    "\1\0\6\50\1\337\32\22\1\50\22\22\3\0\1\52"+
    "\4\0\1\47\1\0\1\50\4\0\1\50\2\0\1\50"+
    "\5\340\56\50\3\0\1\52\4\0\1\47\1\0\1\50"+
    "\4\0\1\50\2\0\3\340\61\50\3\0\1\52\72\0"+
    "\1\341\17\0\1\47\1\0\1\50\4\0\1\50\1\54"+
    "\1\0\7\50\2\22\1\342\27\22\1\50\22\22\3\0"+
    "\1\52\4\0\1\47\1\0\1\50\4\0\1\50\2\0"+
    "\13\50\1\343\50\50\3\0\1\52\4\0\1\47\1\0"+
    "\1\50\4\0\1\50\2\0\32\50\1\344\31\50\3\0"+
    "\1\52\4\0\1\47\1\0\1\50\4\0\1\50\1\54"+
    "\1\0\7\50\16\22\1\345\13\22\1\50\22\22\3\0"+
    "\1\52\4\0\1\47\1\0\1\50\4\0\1\50\1\54"+
    "\1\0\7\50\1\346\31\22\1\50\22\22\3\0\1\52"+
    "\4\0\1\47\1\0\1\50\4\0\1\50\1\54\1\0"+
    "\7\50\4\22\1\347\25\22\1\50\22\22\3\0\1\52"+
    "\4\0\1\47\1\0\1\50\4\0\1\50\1\54\1\0"+
    "\7\50\1\307\31\22\1\50\22\22\3\0\1\52\4\0"+
    "\1\47\1\0\1\50\4\0\1\50\2\0\11\50\1\350"+
    "\11\50\1\351\40\50\3\0\1\52\4\0\1\47\1\0"+
    "\1\50\4\0\1\50\1\54\1\0\7\50\16\22\1\352"+
    "\13\22\1\50\22\22\3\0\1\52\4\0\1\47\1\0"+
    "\1\50\4\0\1\50\2\0\26\50\1\353\35\50\3\0"+
    "\1\52\4\0\1\47\1\0\1\50\4\0\1\50\2\0"+
    "\23\50\1\354\40\50\3\0\1\52\4\0\1\47\1\0"+
    "\1\50\4\0\1\50\1\54\1\0\7\50\21\22\1\355"+
    "\10\22\1\50\22\22\3\0\1\52\4\0\1\47\1\0"+
    "\1\50\4\0\1\50\1\54\1\0\7\50\10\22\1\356"+
    "\21\22\1\50\22\22\3\0\1\52\4\0\1\47\1\0"+
    "\1\50\4\0\1\50\1\54\1\0\7\50\32\22\1\357"+
    "\22\22\3\0\1\52\4\0\1\47\1\0\1\50\4\0"+
    "\1\50\1\54\1\0\7\50\4\22\1\360\25\22\1\50"+
    "\22\22\3\0\1\52\4\0\1\47\1\0\1\50\4\0"+
    "\1\50\1\54\1\0\7\50\21\22\1\361\10\22\1\50"+
    "\22\22\3\0\1\52\4\0\1\47\1\0\1\50\4\0"+
    "\1\50\1\54\1\0\7\50\21\22\1\362\10\22\1\50"+
    "\22\22\3\0\1\52\4\0\1\47\1\0\1\50\4\0"+
    "\1\50\1\54\1\0\7\50\10\22\1\363\21\22\1\50"+
    "\22\22\3\0\1\52\4\0\1\47\1\0\1\50\4\0"+
    "\1\50\2\0\34\50\1\364\27\50\3\0\1\52\4\0"+
    "\1\47\1\0\1\50\4\0\1\50\1\54\1\0\7\50"+
    "\16\22\1\365\13\22\1\50\22\22\3\0\1\52\14\0"+
    "\1\172\10\0\32\122\1\0\13\122\1\366\6\122\20\0"+
    "\1\172\10\0\32\122\1\0\12\122\1\367\7\122\20\0"+
    "\1\172\10\0\32\122\1\0\1\370\21\122\10\0\1\47"+
    "\1\0\1\50\4\0\1\50\1\0\1\371\64\50\3\0"+
    "\1\52\4\0\1\47\1\0\1\50\4\0\1\372\2\0"+
    "\64\50\3\0\1\52\15\0\1\373\74\0\1\47\1\0"+
    "\1\50\4\0\1\50\1\54\1\0\7\50\10\22\1\374"+
    "\21\22\1\50\22\22\3\0\1\52\4\0\1\47\1\0"+
    "\1\50\4\0\1\50\2\0\36\50\1\375\25\50\3\0"+
    "\1\52\4\0\1\47\1\0\1\50\4\0\1\50\2\0"+
    "\13\50\1\376\50\50\3\0\1\52\4\0\1\47\1\0"+
    "\1\50\4\0\1\50\1\54\1\0\7\50\27\22\1\250"+
    "\2\22\1\50\22\22\3\0\1\52\4\0\1\47\1\0"+
    "\1\50\4\0\1\50\1\54\1\0\7\50\22\22\1\377"+
    "\7\22\1\50\22\22\3\0\1\52\4\0\1\47\1\0"+
    "\1\50\4\0\1\50\1\54\1\0\7\50\15\22\1\u0100"+
    "\14\22\1\50\22\22\3\0\1\52\4\0\1\47\1\0"+
    "\1\50\4\0\1\50\2\0\30\50\1\u0101\33\50\3\0"+
    "\1\52\4\0\1\47\1\0\1\50\4\0\1\50\2\0"+
    "\25\50\1\u0102\36\50\3\0\1\52\4\0\1\47\1\0"+
    "\1\50\4\0\1\50\1\54\1\0\7\50\3\22\1\313"+
    "\26\22\1\50\22\22\3\0\1\52\4\0\1\47\1\0"+
    "\1\50\4\0\1\50\1\54\1\0\7\50\2\22\1\u0103"+
    "\27\22\1\50\22\22\3\0\1\52\4\0\1\47\1\0"+
    "\1\50\4\0\1\50\2\0\11\50\1\u0104\52\50\3\0"+
    "\1\52\4\0\1\47\1\0\1\50\4\0\1\50\1\54"+
    "\1\0\7\50\22\22\1\u0105\7\22\1\50\22\22\3\0"+
    "\1\52\4\0\1\47\1\0\1\50\4\0\1\50\1\54"+
    "\1\0\7\50\3\22\1\u0106\26\22\1\50\22\22\3\0"+
    "\1\52\4\0\1\47\1\0\1\50\4\0\1\50\1\54"+
    "\1\0\7\50\16\22\1\u0107\13\22\1\50\22\22\3\0"+
    "\1\52\4\0\1\47\1\0\1\50\4\0\1\50\1\54"+
    "\1\0\7\50\3\22\1\u0108\26\22\1\50\22\22\3\0"+
    "\1\52\4\0\1\47\1\0\1\50\4\0\1\50\2\0"+
    "\17\50\1\u0109\44\50\3\0\1\52\4\0\1\47\1\0"+
    "\1\50\4\0\1\50\1\54\1\0\7\50\32\22\1\u010a"+
    "\22\22\3\0\1\52\14\0\1\172\10\0\32\122\1\0"+
    "\16\122\1\u010b\3\122\20\0\1\172\10\0\32\122\1\0"+
    "\20\122\1\u010c\1\122\20\0\1\172\10\0\32\122\1\0"+
    "\15\122\1\u010d\4\122\21\0\1\u010e\74\0\1\47\1\0"+
    "\1\50\4\0\1\50\2\0\1\u010f\2\u0110\1\u0111\60\50"+
    "\3\0\1\52\6\0\1\373\4\0\1\373\1\0\65\373"+
    "\10\0\1\47\1\0\1\50\4\0\1\50\1\54\1\0"+
    "\7\50\16\22\1\u0112\13\22\1\50\22\22\3\0\1\52"+
    "\4\0\1\47\1\0\1\50\4\0\1\50\2\0\32\50"+
    "\1\u0113\31\50\3\0\1\52\4\0\1\47\1\0\1\50"+
    "\4\0\1\50\2\0\36\50\1\u0114\25\50\3\0\1\52"+
    "\4\0\1\47\1\0\1\50\4\0\1\50\1\54\1\0"+
    "\7\50\23\22\1\u0115\6\22\1\50\22\22\3\0\1\52"+
    "\4\0\1\47\1\0\1\50\4\0\1\50\2\0\13\50"+
    "\1\u0116\50\50\3\0\1\52\4\0\1\47\1\0\1\50"+
    "\4\0\1\50\2\0\12\50\1\u0117\51\50\3\0\1\52"+
    "\4\0\1\47\1\0\1\50\4\0\1\50\1\54\1\0"+
    "\7\50\1\u0118\31\22\1\50\22\22\3\0\1\52\4\0"+
    "\1\47\1\0\1\50\4\0\1\50\2\0\7\50\1\u0119"+
    "\54\50\3\0\1\52\4\0\1\47\1\0\1\50\4\0"+
    "\1\50\1\54\1\0\7\50\22\22\1\u011a\7\22\1\u011b"+
    "\22\22\3\0\1\52\4\0\1\47\1\0\1\50\4\0"+
    "\1\50\1\54\1\0\7\50\16\22\1\u011c\13\22\1\50"+
    "\22\22\3\0\1\52\4\0\1\47\1\0\1\50\4\0"+
    "\1\50\2\0\31\50\1\u011d\32\50\3\0\1\52\4\0"+
    "\1\47\1\0\1\50\4\0\1\50\2\0\11\50\1\u011e"+
    "\52\50\3\0\1\52\14\0\1\172\10\0\32\122\1\0"+
    "\11\122\1\u011f\10\122\20\0\1\172\10\0\32\122\1\0"+
    "\7\122\1\u0120\12\122\31\0\32\u0121\1\0\22\u0121\10\0"+
    "\1\47\1\0\1\50\4\0\1\50\2\0\1\50\5\u0122"+
    "\56\50\3\0\1\52\4\0\1\47\1\0\1\50\4\0"+
    "\1\50\2\0\6\u0122\56\50\3\0\1\52\4\0\1\47"+
    "\1\0\1\50\4\0\1\50\2\0\2\u0122\62\50\3\0"+
    "\1\52\4\0\1\47\1\0\1\50\4\0\1\50\1\54"+
    "\1\0\7\50\15\22\1\u0123\14\22\1\50\22\22\3\0"+
    "\1\52\4\0\1\47\1\0\1\50\4\0\1\50\2\0"+
    "\25\50\1\u0124\36\50\3\0\1\52\4\0\1\47\1\0"+
    "\1\50\4\0\1\50\2\0\32\50\1\u0125\31\50\3\0"+
    "\1\52\4\0\1\47\1\0\1\50\4\0\1\50\1\54"+
    "\1\0\7\50\4\22\1\u0126\25\22\1\50\22\22\3\0"+
    "\1\52\4\0\1\47\1\0\1\50\4\0\1\50\2\0"+
    "\7\50\1\u0127\54\50\3\0\1\52\4\0\1\47\1\0"+
    "\1\50\4\0\1\50\2\0\17\50\1\u0128\44\50\3\0"+
    "\1\52\4\0\1\47\1\0\1\50\4\0\1\50\1\54"+
    "\1\0\7\50\21\22\1\307\10\22\1\50\22\22\3\0"+
    "\1\52\4\0\1\47\1\0\1\50\4\0\1\50\2\0"+
    "\23\50\1\u0129\40\50\3\0\1\52\4\0\1\47\1\0"+
    "\1\50\4\0\1\50\2\0\6\u012a\56\50\3\0\1\52"+
    "\4\0\1\47\1\0\1\50\4\0\1\50\2\0\17\50"+
    "\1\u012b\44\50\3\0\1\52\4\0\1\47\1\0\1\50"+
    "\4\0\1\50\2\0\30\50\1\u012c\33\50\3\0\1\52"+
    "\14\0\1\172\10\0\32\122\1\0\1\u012d\21\122\20\0"+
    "\1\172\10\0\32\122\1\0\13\122\1\u012e\6\122\20\0"+
    "\1\54\10\0\32\u0121\1\0\22\u0121\10\0\1\47\1\0"+
    "\1\50\4\0\1\50\2\0\25\50\1\u012f\36\50\3\0"+
    "\1\52\4\0\1\47\1\0\1\50\4\0\1\50\1\54"+
    "\1\0\7\50\22\22\1\u0130\7\22\1\50\22\22\3\0"+
    "\1\52\4\0\1\47\1\0\1\50\4\0\1\50\2\0"+
    "\11\50\1\u0131\52\50\3\0\1\52\4\0\1\47\1\0"+
    "\1\50\4\0\1\50\2\0\14\50\1\u0132\47\50\3\0"+
    "\1\52\4\0\1\47\1\0\1\50\4\0\1\50\2\0"+
    "\26\50\1\u0133\35\50\3\0\1\52\4\0\1\47\1\0"+
    "\1\50\4\0\1\50\2\0\10\50\1\u0134\53\50\3\0"+
    "\1\52\4\0\1\47\1\0\1\50\4\0\1\50\2\0"+
    "\13\50\1\u0135\50\50\3\0\1\52\14\0\1\172\10\0"+
    "\32\122\1\0\15\122\1\u0136\4\122\20\0\1\172\10\0"+
    "\32\122\1\0\16\122\1\u0137\3\122\10\0\1\47\1\0"+
    "\1\50\4\0\1\50\2\0\17\50\1\u0138\44\50\3\0"+
    "\1\52\4\0\1\47\1\0\1\50\4\0\1\50\2\0"+
    "\17\50\1\u0139\44\50\3\0\1\52\4\0\1\47\1\0"+
    "\1\50\4\0\1\50\2\0\25\50\1\u013a\36\50\3\0"+
    "\1\52\4\0\1\47\1\0\1\50\4\0\1\50\2\0"+
    "\22\50\1\u013b\41\50\3\0\1\52\4\0\1\47\1\0"+
    "\1\50\4\0\1\50\2\0\7\50\1\u013c\54\50\3\0"+
    "\1\52\14\0\1\172\10\0\32\122\1\0\7\122\1\u013d"+
    "\12\122\10\0\1\47\1\0\1\50\4\0\1\50\2\0"+
    "\25\50\1\u013e\36\50\3\0\1\52\4\0\1\47\1\0"+
    "\1\50\4\0\1\50\2\0\11\50\1\u013f\52\50\3\0"+
    "\1\52\4\0\1\47\1\0\1\50\4\0\1\50\2\0"+
    "\13\50\1\u0140\50\50\3\0\1\52\4\0\1\47\1\0"+
    "\1\50\4\0\1\50\2\0\11\50\1\u0141\52\50\3\0"+
    "\1\52\14\0\1\172\10\0\32\122\1\0\13\122\1\u0142"+
    "\6\122\10\0\1\47\1\0\1\50\4\0\1\50\2\0"+
    "\24\50\1\u0143\37\50\3\0\1\52\4\0\1\47\1\0"+
    "\1\50\4\0\1\50\2\0\7\50\1\u0144\54\50\3\0"+
    "\1\52\4\0\1\47\1\0\1\50\4\0\1\50\2\0"+
    "\17\50\1\u0145\44\50\3\0\1\52\14\0\1\172\10\0"+
    "\32\122\1\0\16\122\1\u0146\3\122\10\0\1\47\1\0"+
    "\1\50\4\0\1\50\2\0\11\50\1\u0147\52\50\3\0"+
    "\1\52\4\0\1\47\1\0\1\50\4\0\1\50\2\0"+
    "\25\50\1\u0148\36\50\3\0\1\52\4\0\1\47\1\0"+
    "\1\50\4\0\1\50\2\0\17\50\1\u0149\44\50\3\0"+
    "\1\52\4\0\1\47\1\0\1\50\4\0\1\50\2\0"+
    "\24\50\1\u014a\37\50\3\0\1\52\4\0\1\47\1\0"+
    "\1\50\4\0\1\50\2\0\25\50\1\u014b\36\50\3\0"+
    "\1\52\4\0\1\47\1\0\1\50\4\0\1\50\2\0"+
    "\24\50\1\u014c\37\50\3\0\1\52";

  private static int [] zzUnpackTrans() {
    int [] result = new int[20160];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\1\1\11\2\1\3\11\1\1\1\0\30\1"+
    "\1\11\1\1\1\11\1\1\1\0\1\1\1\0\2\1"+
    "\1\0\45\1\1\0\44\1\1\0\2\1\1\0\37\1"+
    "\3\0\2\1\1\0\35\1\3\0\3\1\1\0\30\1"+
    "\3\0\2\1\1\0\24\1\4\0\22\1\3\0\20\1"+
    "\3\0\13\1\2\0\7\1\1\0\6\1\1\0\4\1"+
    "\1\0\12\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[332];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    private Symbol symbol(int type, Object value){
        return new Symbol(type, yyline, yycolumn, value);
    }
    private Symbol symbol(int type){
        return new Symbol(type, yyline, yycolumn);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexerALM(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { /*Ignore*/
            }
            // fall through
          case 51: break;
          case 2:
            { return new Symbol(symALM.COMILLAS, yycolumn, yyline, yytext());
            }
            // fall through
          case 52: break;
          case 3:
            { return new Symbol(symALM.USUARIO,yycolumn,yyline,yytext());
            }
            // fall through
          case 53: break;
          case 4:
            { return new Symbol(symALM.ID,yycolumn,yyline,yytext());
            }
            // fall through
          case 54: break;
          case 5:
            { return new Symbol(symALM.PARENTESISA, yycolumn, yyline, yytext());
            }
            // fall through
          case 55: break;
          case 6:
            { return new Symbol(symALM.PARENTESISC, yycolumn, yyline, yytext());
            }
            // fall through
          case 56: break;
          case 7:
            { return new Symbol(symALM.COMA, yycolumn, yyline, yytext());
            }
            // fall through
          case 57: break;
          case 8:
            { return new Symbol(symALM.NUMERO, yycolumn, yyline, yytext());
            }
            // fall through
          case 58: break;
          case 9:
            { return new Symbol(symALM.DOSP, yycolumn, yyline, yytext());
            }
            // fall through
          case 59: break;
          case 10:
            { return new Symbol(symALM.LLAVEA, yycolumn, yyline, yytext());
            }
            // fall through
          case 60: break;
          case 11:
            { return new Symbol(symALM.OR,yycolumn,yyline,yytext());
            }
            // fall through
          case 61: break;
          case 12:
            { return new Symbol(symALM.LLAVEC, yycolumn, yyline, yytext());
            }
            // fall through
          case 62: break;
          case 13:
            { return new Symbol(symALM.TITULO, yycolumn, yyline, yytext());
            }
            // fall through
          case 63: break;
          case 14:
            { return new Symbol(symALM.BOOL,yycolumn,yyline,yytext());
            }
            // fall through
          case 64: break;
          case 15:
            { return new Symbol(symALM.URLC,yycolumn,yyline,yytext());
            }
            // fall through
          case 65: break;
          case 16:
            { return new Symbol(symALM.TEMA,yycolumn,yyline,yytext());
            }
            // fall through
          case 66: break;
          case 17:
            { return new Symbol(symALM.TEMAP,yycolumn,yyline,yytext());
            }
            // fall through
          case 67: break;
          case 18:
            { return new Symbol(symALM.CLASEBOTON,yycolumn,yyline,yytext());
            }
            // fall through
          case 68: break;
          case 19:
            { return new Symbol(symALM.CLASE,yycolumn,yyline,yytext());
            }
            // fall through
          case 69: break;
          case 20:
            { return new Symbol(symALM.CLASEOPCIONES,yycolumn,yyline,yytext());
            }
            // fall through
          case 70: break;
          case 21:
            { return new Symbol(symALM.FILAS,yycolumn,yyline,yytext());
            }
            // fall through
          case 71: break;
          case 22:
            { return new Symbol(symALM.VALOR, yycolumn, yyline, yytext());
            }
            // fall through
          case 72: break;
          case 23:
            { return new Symbol(symALM.ALINEA,yycolumn,yyline,yytext());
            }
            // fall through
          case 73: break;
          case 24:
            { return new Symbol(symALM.CLASEIMAGEN,yycolumn,yyline,yytext());
            }
            // fall through
          case 74: break;
          case 25:
            { return new Symbol(symALM.INDICEC,yycolumn,yyline,yytext());
            }
            // fall through
          case 75: break;
          case 26:
            { return new Symbol(symALM.NOMBREP,yycolumn,yyline,yytext());
            }
            // fall through
          case 76: break;
          case 27:
            { return new Symbol(symALM.TITULOP,yycolumn,yyline,yytext());
            }
            // fall through
          case 77: break;
          case 28:
            { return new Symbol(symALM.CLASENORMAL,yycolumn,yyline,yytext());
            }
            // fall through
          case 78: break;
          case 29:
            { return new Symbol(symALM.IDC,yycolumn,yyline,yytext());
            }
            // fall through
          case 79: break;
          case 30:
            { return new Symbol(symALM.IDF,yycolumn,yyline,yytext());
            }
            // fall through
          case 80: break;
          case 31:
            { return new Symbol(symALM.USUARIOP,yycolumn,yyline,yytext());
            }
            // fall through
          case 81: break;
          case 32:
            { return new Symbol(symALM.URL, yycolumn,yyline,yytext());
            }
            // fall through
          case 82: break;
          case 33:
            { return new Symbol(symALM.COLUMNAS,yycolumn,yyline,yytext());
            }
            // fall through
          case 83: break;
          case 34:
            { return new Symbol(symALM.OPCIONES,yycolumn,yyline,yytext());
            }
            // fall through
          case 84: break;
          case 35:
            { return new Symbol(symALM.CONTRAP,yycolumn,yyline,yytext());
            }
            // fall through
          case 85: break;
          case 36:
            { return new Symbol(symALM.INICIODATOS, yycolumn, yyline, yytext());
            }
            // fall through
          case 86: break;
          case 37:
            { return new Symbol(symALM.REGISTROS, yycolumn, yyline, yytext());
            }
            // fall through
          case 87: break;
          case 38:
            { return new Symbol(symALM.REQUERIDO,yycolumn,yyline,yytext());
            }
            // fall through
          case 88: break;
          case 39:
            { return new Symbol(symALM.FECHA,yycolumn,yyline,yytext());
            }
            // fall through
          case 89: break;
          case 40:
            { return new Symbol(symALM.ALINEAC,yycolumn,yyline,yytext());
            }
            // fall through
          case 90: break;
          case 41:
            { return new Symbol(symALM.CLASEAREA,yycolumn,yyline,yytext());
            }
            // fall through
          case 91: break;
          case 42:
            { return new Symbol(symALM.NOREGISTRO, yycolumn, yyline, yytext());
            }
            // fall through
          case 92: break;
          case 43:
            { return new Symbol(symALM.COMPS, yycolumn, yyline, yytext());
            }
            // fall through
          case 93: break;
          case 44:
            { return new Symbol(symALM.INICIOUSUARIOS, yycolumn, yyline, yytext());
            }
            // fall through
          case 94: break;
          case 45:
            { return new Symbol(symALM.NOMBREC,yycolumn,yyline,yytext());
            }
            // fall through
          case 95: break;
          case 46:
            { return new Symbol(symALM.TEXTOVC,yycolumn,yyline,yytext());
            }
            // fall through
          case 96: break;
          case 47:
            { return new Symbol(symALM.FECHACP,yycolumn,yyline,yytext());
            }
            // fall through
          case 97: break;
          case 48:
            { return new Symbol(symALM.INICIOFORM,yycolumn, yyline, yytext());
            }
            // fall through
          case 98: break;
          case 49:
            { return new Symbol(symALM.USUARIOCP,yycolumn,yyline,yytext());
            }
            // fall through
          case 99: break;
          case 50:
            { return new Symbol(symALM.FECHAMP,yycolumn,yyline,yytext());
            }
            // fall through
          case 100: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
