// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/Analizadores/LexerALM.flex

package Analizadores;
import java_cup.runtime.Symbol;

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class LexerALM implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\2\22\0\1\4\1\5"+
    "\1\6\1\7\1\10\2\7\1\5\1\11\1\12\2\5"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\5\23\1\24\1\25\1\5\1\0\1\5\1\0\1\5"+
    "\1\7\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\5\1\0\1\5\1\0\1\60"+
    "\1\0\1\61\1\62\1\63\1\64\1\65\1\66\1\56"+
    "\1\67\1\70\1\56\1\71\1\72\1\73\1\74\1\75"+
    "\1\76\1\56\1\77\1\100\1\101\1\102\1\56\1\103"+
    "\3\56\1\104\1\105\1\106\1\5\6\0\1\3\72\0"+
    "\100\107\u0128\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\2\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\3\1\0\2\10\1\11\26\3\1\12\1\13\1\14"+
    "\1\15\1\1\1\0\1\3\1\15\1\10\1\15\24\3"+
    "\1\16\4\3\1\16\12\3\2\10\1\15\37\3\1\17"+
    "\4\3\1\15\2\3\1\10\1\15\2\3\1\20\27\3"+
    "\1\21\4\3\3\15\1\3\1\15\1\3\1\15\2\3"+
    "\1\22\3\3\1\23\1\3\1\24\4\3\1\25\16\3"+
    "\1\26\3\15\1\3\1\15\2\3\1\15\3\3\1\27"+
    "\10\3\1\30\1\31\2\3\1\32\5\3\1\33\1\3"+
    "\3\15\1\3\1\15\1\3\1\15\10\3\1\34\1\35"+
    "\1\36\10\3\1\37\3\15\1\0\1\15\1\3\1\40"+
    "\3\3\1\41\5\3\1\42\1\43\4\3\1\44\2\15"+
    "\1\0\1\15\13\3\1\45\1\3\1\46\2\3\2\15"+
    "\1\0\1\15\1\47\1\50\1\51\5\3\1\52\2\3"+
    "\2\15\1\0\1\15\1\34\1\53\5\3\1\15\1\54"+
    "\1\0\1\15\2\3\1\55\2\3\1\15\1\0\1\15"+
    "\2\3\1\56\1\3\1\15\1\0\1\15\1\57\2\3"+
    "\1\60\1\0\1\61\2\3\1\0\1\3\1\62\1\3"+
    "\1\63";

  private static int [] zzUnpackAction() {
    int [] result = new int[353];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\110\0\220\0\330\0\u0120\0\u0168\0\330\0\330"+
    "\0\330\0\u01b0\0\u01f8\0\u0240\0\u0288\0\u0120\0\u02d0\0\u0318"+
    "\0\u0360\0\u03a8\0\u03f0\0\u0438\0\u0480\0\u04c8\0\u0510\0\u0558"+
    "\0\u05a0\0\u05e8\0\u0630\0\u0678\0\u06c0\0\u0708\0\u0750\0\u0798"+
    "\0\u07e0\0\u0828\0\u0870\0\u08b8\0\330\0\110\0\330\0\u0900"+
    "\0\u0948\0\u0900\0\u0990\0\u09d8\0\u0a20\0\u0a68\0\u0ab0\0\u0af8"+
    "\0\u0b40\0\u0b88\0\u0bd0\0\u0c18\0\u0c60\0\u0ca8\0\u0cf0\0\u0d38"+
    "\0\u0d80\0\u0dc8\0\u0e10\0\u0e58\0\u0ea0\0\u0ee8\0\u0f30\0\u0f78"+
    "\0\u0fc0\0\u1008\0\u1050\0\u1098\0\u10e0\0\u1128\0\u1170\0\u03f0"+
    "\0\u11b8\0\u1200\0\u1248\0\u1290\0\u12d8\0\u1320\0\u1368\0\u13b0"+
    "\0\u13f8\0\u1440\0\u09d8\0\u1488\0\u14d0\0\u1518\0\u1560\0\u15a8"+
    "\0\u15f0\0\u1638\0\u1680\0\u16c8\0\u1710\0\u1758\0\u17a0\0\u17e8"+
    "\0\u1830\0\u1878\0\u18c0\0\u1908\0\u1950\0\u1998\0\u19e0\0\u1a28"+
    "\0\u1a70\0\u1ab8\0\u1b00\0\u1b48\0\u1b90\0\u1bd8\0\u1c20\0\u1c68"+
    "\0\u1cb0\0\u1cf8\0\u1d40\0\u1d88\0\u03f0\0\u1dd0\0\u1e18\0\u1e60"+
    "\0\u1ea8\0\u1ef0\0\u1f38\0\u1f80\0\u1fc8\0\u2010\0\u2058\0\u20a0"+
    "\0\u03f0\0\u20e8\0\u2130\0\u2178\0\u21c0\0\u2208\0\u2250\0\u2298"+
    "\0\u22e0\0\u2328\0\u2370\0\u23b8\0\u2400\0\u2448\0\u2490\0\u24d8"+
    "\0\u2520\0\u2568\0\u25b0\0\u25f8\0\u2640\0\u2688\0\u26d0\0\u2718"+
    "\0\u03f0\0\u2760\0\u27a8\0\u27f0\0\u2838\0\u2880\0\u28c8\0\u2910"+
    "\0\u2958\0\u29a0\0\u29e8\0\u2a30\0\u2a78\0\u2ac0\0\u03f0\0\u2b08"+
    "\0\u2b50\0\u2b98\0\u03f0\0\u2be0\0\u03f0\0\u2c28\0\u2c70\0\u2cb8"+
    "\0\u2d00\0\u03f0\0\u2d48\0\u2d90\0\u2dd8\0\u2e20\0\u2e68\0\u2eb0"+
    "\0\u2ef8\0\u2f40\0\u2f88\0\u2fd0\0\u3018\0\u3060\0\u30a8\0\u30f0"+
    "\0\u03f0\0\u3138\0\u3180\0\u31c8\0\u3210\0\u3258\0\u32a0\0\u32e8"+
    "\0\u3330\0\u3378\0\u33c0\0\u3408\0\u03f0\0\u3450\0\u3498\0\u34e0"+
    "\0\u3528\0\u3570\0\u35b8\0\u3600\0\u3648\0\u03f0\0\u03f0\0\u3690"+
    "\0\u36d8\0\u3720\0\u3768\0\u37b0\0\u37f8\0\u3840\0\u3888\0\u03f0"+
    "\0\u38d0\0\u3918\0\u3960\0\u39a8\0\u39f0\0\u3a38\0\u3a80\0\u3ac8"+
    "\0\u3b10\0\u3b58\0\u3ba0\0\u3be8\0\u3c30\0\u3c78\0\u3cc0\0\u3d08"+
    "\0\u03f0\0\u0990\0\u0990\0\u3d50\0\u3d98\0\u3de0\0\u3e28\0\u3e70"+
    "\0\u3eb8\0\u3f00\0\u3f48\0\u3f90\0\u3fd8\0\u4020\0\u4068\0\u40b0"+
    "\0\u40f8\0\u4140\0\u4188\0\u41d0\0\u4218\0\u4260\0\u03f0\0\u42a8"+
    "\0\u42f0\0\u4338\0\u4380\0\u43c8\0\u03f0\0\u03f0\0\u4410\0\u4458"+
    "\0\u44a0\0\u44e8\0\u14d0\0\u4530\0\u4578\0\u45c0\0\u4608\0\u4650"+
    "\0\u4698\0\u46e0\0\u4728\0\u4770\0\u47b8\0\u4800\0\u4848\0\u4890"+
    "\0\u48d8\0\u4920\0\u03f0\0\u4968\0\u03f0\0\u49b0\0\u49f8\0\u4a40"+
    "\0\u4a88\0\u4ad0\0\u4b18\0\u0990\0\u03f0\0\u0990\0\u4b60\0\u4ba8"+
    "\0\u4bf0\0\u4c38\0\u4c80\0\u4968\0\u4cc8\0\u4d10\0\u4d58\0\u4da0"+
    "\0\u4de8\0\u4e30\0\u0990\0\u03f0\0\u4e78\0\u4ec0\0\u4f08\0\u4f50"+
    "\0\u4f98\0\u4fe0\0\u14d0\0\u5028\0\u5070\0\u50b8\0\u5100\0\u0990"+
    "\0\u5148\0\u5190\0\u51d8\0\u5220\0\u5268\0\u52b0\0\u52f8\0\u0990"+
    "\0\u5340\0\u5388\0\u53d0\0\u5418\0\u0990\0\u5460\0\u54a8\0\u14d0"+
    "\0\u54f0\0\u14d0\0\u5538\0\u5580\0\u55c8\0\u5610\0\u0990\0\u5658"+
    "\0\u0990";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[353];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\2\2\1\0\1\3\1\0\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\0\1\13\1\14\2\15"+
    "\3\14\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\2\23\1\25\1\26\3\23\1\27\1\30\1\31\1\23"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\3\23\1\12"+
    "\1\23\1\40\1\23\1\41\2\23\1\42\4\23\1\43"+
    "\6\23\1\44\1\45\1\46\1\47\1\50\1\0\2\2"+
    "\102\0\1\2\6\0\1\3\222\0\1\5\4\0\1\5"+
    "\2\0\65\5\14\0\1\6\3\0\1\6\2\0\6\6"+
    "\1\0\56\6\13\0\1\5\1\6\3\0\1\12\2\0"+
    "\6\12\1\5\56\12\22\0\1\51\75\0\1\52\2\0"+
    "\1\53\4\0\1\53\1\54\1\0\6\14\57\53\3\0"+
    "\1\50\4\0\1\52\2\0\1\53\4\0\1\53\1\54"+
    "\1\0\1\55\4\14\1\55\57\53\3\0\1\50\4\0"+
    "\1\52\2\0\1\53\4\0\1\53\1\56\1\0\7\53"+
    "\13\23\1\57\5\23\1\60\10\23\1\53\23\23\3\0"+
    "\1\50\4\0\1\52\2\0\1\53\4\0\1\53\1\56"+
    "\1\0\7\53\13\23\1\61\2\23\1\62\13\23\1\53"+
    "\11\23\1\63\11\23\3\0\1\50\4\0\1\52\2\0"+
    "\1\53\4\0\1\53\1\56\1\0\7\53\1\64\3\23"+
    "\1\65\2\23\1\66\3\23\1\67\2\23\1\70\13\23"+
    "\1\53\23\23\3\0\1\50\4\0\1\52\2\0\1\53"+
    "\4\0\1\53\1\56\1\0\7\53\1\71\3\23\1\72"+
    "\25\23\1\53\1\73\22\23\3\0\1\50\4\0\1\52"+
    "\2\0\1\53\4\0\1\53\1\56\1\0\7\53\32\23"+
    "\1\53\23\23\3\0\1\50\4\0\1\52\2\0\1\53"+
    "\4\0\1\53\1\56\1\0\7\53\4\23\1\74\3\23"+
    "\1\75\21\23\1\53\23\23\3\0\1\50\4\0\1\52"+
    "\2\0\1\53\4\0\1\53\1\56\1\0\7\53\3\23"+
    "\1\76\10\23\1\77\1\100\13\23\1\101\1\53\23\23"+
    "\3\0\1\50\4\0\1\52\2\0\1\53\4\0\1\53"+
    "\1\56\1\0\7\53\24\23\1\102\5\23\1\53\23\23"+
    "\3\0\1\50\4\0\1\52\2\0\1\53\4\0\1\53"+
    "\1\56\1\0\7\53\16\23\1\103\13\23\1\53\23\23"+
    "\3\0\1\50\4\0\1\52\2\0\1\53\4\0\1\53"+
    "\1\56\1\0\7\53\17\23\1\104\12\23\1\53\23\23"+
    "\3\0\1\50\4\0\1\52\2\0\1\53\4\0\1\53"+
    "\1\56\1\0\7\53\1\105\31\23\1\53\23\23\3\0"+
    "\1\50\4\0\1\52\2\0\1\53\4\0\1\53\1\56"+
    "\1\0\7\53\1\106\3\23\1\107\25\23\1\53\23\23"+
    "\3\0\1\50\4\0\1\52\2\0\1\53\4\0\1\53"+
    "\1\56\1\0\7\53\10\23\1\110\21\23\1\53\23\23"+
    "\3\0\1\50\4\0\1\52\2\0\1\53\4\0\1\53"+
    "\1\56\1\0\7\53\4\23\1\111\3\23\1\112\21\23"+
    "\1\53\23\23\3\0\1\50\4\0\1\52\2\0\1\53"+
    "\4\0\1\53\1\56\1\0\7\53\21\23\1\113\1\114"+
    "\7\23\1\53\23\23\3\0\1\50\4\0\1\52\2\0"+
    "\1\53\4\0\1\53\1\56\1\0\7\53\1\115\31\23"+
    "\1\53\23\23\3\0\1\50\4\0\1\52\2\0\1\53"+
    "\4\0\1\53\1\56\1\0\7\53\7\23\1\116\22\23"+
    "\1\53\6\23\1\117\14\23\3\0\1\50\4\0\1\52"+
    "\2\0\1\53\4\0\1\53\1\56\1\0\7\53\32\23"+
    "\1\53\11\23\1\63\11\23\3\0\1\50\4\0\1\52"+
    "\2\0\1\53\4\0\1\53\1\56\1\0\7\53\32\23"+
    "\1\53\1\73\1\120\21\23\3\0\1\50\4\0\1\52"+
    "\2\0\1\53\4\0\1\53\1\56\1\0\7\53\32\23"+
    "\1\53\20\23\1\121\2\23\3\0\1\50\4\0\1\52"+
    "\2\0\1\53\4\0\1\53\1\56\1\0\7\53\32\23"+
    "\1\53\4\23\1\122\16\23\3\0\1\50\4\0\1\52"+
    "\2\0\1\53\4\0\1\53\1\56\1\0\7\53\32\23"+
    "\1\53\6\23\1\117\14\23\3\0\1\50\4\0\1\52"+
    "\2\0\1\50\4\0\1\52\1\50\1\0\65\50\3\0"+
    "\1\50\2\51\2\0\104\51\4\0\1\52\2\0\1\53"+
    "\4\0\1\53\1\50\1\0\65\53\3\0\1\50\4\0"+
    "\1\52\2\0\1\50\4\0\1\52\1\50\1\0\6\123"+
    "\57\50\3\0\1\50\4\0\1\52\2\0\1\53\4\0"+
    "\1\53\1\54\1\0\6\124\57\53\3\0\1\50\4\0"+
    "\1\52\2\0\1\50\4\0\1\52\1\50\1\0\7\50"+
    "\32\125\1\50\23\125\3\0\1\50\4\0\1\52\2\0"+
    "\1\53\4\0\1\53\1\56\1\0\7\53\10\23\1\126"+
    "\21\23\1\53\23\23\3\0\1\50\4\0\1\52\2\0"+
    "\1\53\4\0\1\53\1\56\1\0\7\53\4\23\1\127"+
    "\25\23\1\53\23\23\3\0\1\50\4\0\1\52\2\0"+
    "\1\53\4\0\1\53\1\56\1\0\7\53\24\23\1\130"+
    "\5\23\1\53\23\23\3\0\1\50\4\0\1\52\2\0"+
    "\1\53\4\0\1\53\1\56\1\0\7\53\23\23\1\131"+
    "\6\23\1\53\23\23\3\0\1\50\4\0\1\52\2\0"+
    "\1\53\4\0\1\53\1\56\1\0\7\53\32\23\1\53"+
    "\21\23\1\132\1\23\3\0\1\50\4\0\1\52\2\0"+
    "\1\53\4\0\1\53\1\56\1\0\7\53\14\23\1\133"+
    "\15\23\1\53\23\23\3\0\1\50\4\0\1\52\2\0"+
    "\1\53\4\0\1\53\1\56\1\0\7\53\15\23\1\134"+
    "\14\23\1\53\23\23\3\0\1\50\4\0\1\52\2\0"+
    "\1\53\4\0\1\53\1\56\1\0\7\53\4\23\1\135"+
    "\25\23\1\53\23\23\3\0\1\50\4\0\1\52\2\0"+
    "\1\53\4\0\1\53\1\56\1\0\7\53\1\136\31\23"+
    "\1\53\23\23\3\0\1\50\4\0\1\52\2\0\1\53"+
    "\4\0\1\53\1\56\1\0\7\53\13\23\1\137\1\140"+
    "\15\23\1\53\23\23\3\0\1\50\4\0\1\52\2\0"+
    "\1\53\4\0\1\53\1\56\1\0\7\53\21\23\1\141"+
    "\10\23\1\53\23\23\3\0\1\50\4\0\1\52\2\0"+
    "\1\53\4\0\1\53\1\56\1\0\7\53\21\23\1\142"+
    "\10\23\1\53\23\23\3\0\1\50\4\0\1\52\2\0"+
    "\1\53\4\0\1\53\1\56\1\0\7\53\32\23\1\53"+
    "\16\23\1\143\4\23\3\0\1\50\4\0\1\52\2\0"+
    "\1\53\4\0\1\53\1\56\1\0\7\53\2\23\1\144"+
    "\27\23\1\53\23\23\3\0\1\50\4\0\1\52\2\0"+
    "\1\53\4\0\1\53\1\56\1\0\7\53\2\23\1\145"+
    "\10\23\1\146\16\23\1\53\23\23\3\0\1\50\4\0"+
    "\1\52\2\0\1\53\4\0\1\53\1\56\1\0\7\53"+
    "\32\23\1\147\23\23\3\0\1\50\4\0\1\52\2\0"+
    "\1\53\4\0\1\53\1\56\1\0\7\53\1\150\31\23"+
    "\1\53\23\23\3\0\1\50\4\0\1\52\2\0\1\53"+
    "\4\0\1\53\1\56\1\0\7\53\3\23\1\151\26\23"+
    "\1\53\23\23\3\0\1\50\4\0\1\52\2\0\1\53"+
    "\4\0\1\53\1\56\1\0\7\53\20\23\1\152\11\23"+
    "\1\53\23\23\3\0\1\50\4\0\1\52\2\0\1\53"+
    "\4\0\1\53\1\56\1\0\7\53\22\23\1\153\7\23"+
    "\1\53\23\23\3\0\1\50\4\0\1\52\2\0\1\53"+
    "\4\0\1\53\1\56\1\0\7\53\14\23\1\154\15\23"+
    "\1\53\23\23\3\0\1\50\4\0\1\52\2\0\1\53"+
    "\4\0\1\53\1\56\1\0\7\53\2\23\1\155\27\23"+
    "\1\53\23\23\3\0\1\50\4\0\1\52\2\0\1\53"+
    "\4\0\1\53\1\56\1\0\7\53\22\23\1\156\7\23"+
    "\1\53\23\23\3\0\1\50\4\0\1\52\2\0\1\53"+
    "\4\0\1\53\1\56\1\0\7\53\3\23\1\157\26\23"+
    "\1\53\23\23\3\0\1\50\4\0\1\52\2\0\1\53"+
    "\4\0\1\53\1\56\1\0\7\53\6\23\1\160\11\23"+
    "\1\161\11\23\1\53\23\23\3\0\1\50\4\0\1\52"+
    "\2\0\1\53\4\0\1\53\1\56\1\0\7\53\14\23"+
    "\1\162\12\23\1\163\2\23\1\53\23\23\3\0\1\50"+
    "\4\0\1\52\2\0\1\53\4\0\1\53\1\56\1\0"+
    "\7\53\23\23\1\164\6\23\1\53\23\23\3\0\1\50"+
    "\4\0\1\52\2\0\1\53\4\0\1\53\1\56\1\0"+
    "\7\53\13\23\1\165\16\23\1\53\23\23\3\0\1\50"+
    "\4\0\1\52\2\0\1\53\4\0\1\53\1\56\1\0"+
    "\7\53\24\23\1\166\5\23\1\53\23\23\3\0\1\50"+
    "\4\0\1\52\2\0\1\53\4\0\1\53\1\56\1\0"+
    "\7\53\13\23\1\167\16\23\1\53\23\23\3\0\1\50"+
    "\4\0\1\52\2\0\1\53\4\0\1\53\1\56\1\0"+
    "\7\53\10\23\1\170\21\23\1\53\23\23\3\0\1\50"+
    "\4\0\1\52\2\0\1\53\4\0\1\53\1\56\1\0"+
    "\7\53\32\23\1\53\7\23\1\171\13\23\3\0\1\50"+
    "\4\0\1\52\2\0\1\53\4\0\1\53\1\172\1\0"+
    "\7\53\32\23\1\53\23\23\3\0\1\50\4\0\1\52"+
    "\2\0\1\53\4\0\1\53\1\56\1\0\7\53\32\23"+
    "\1\53\20\23\1\173\2\23\3\0\1\50\4\0\1\52"+
    "\2\0\1\53\4\0\1\53\1\56\1\0\7\53\32\23"+
    "\1\53\22\23\1\174\3\0\1\50\4\0\1\52\2\0"+
    "\1\53\4\0\1\53\1\54\1\0\6\175\57\53\3\0"+
    "\1\50\4\0\1\52\2\0\1\50\4\0\1\52\1\176"+
    "\1\0\7\50\32\125\1\50\23\125\3\0\1\50\4\0"+
    "\1\52\2\0\1\53\4\0\1\53\1\56\1\0\7\53"+
    "\15\23\1\177\14\23\1\53\23\23\3\0\1\50\4\0"+
    "\1\52\2\0\1\53\4\0\1\53\1\56\1\0\7\53"+
    "\1\200\31\23\1\53\23\23\3\0\1\50\4\0\1\52"+
    "\2\0\1\53\4\0\1\53\1\56\1\0\7\53\4\23"+
    "\1\201\25\23\1\53\23\23\3\0\1\50\4\0\1\52"+
    "\2\0\1\53\4\0\1\53\1\56\1\0\7\53\16\23"+
    "\1\202\13\23\1\53\23\23\3\0\1\50\4\0\1\52"+
    "\2\0\1\53\4\0\1\53\1\56\1\0\7\53\32\23"+
    "\1\53\4\23\1\201\16\23\3\0\1\50\4\0\1\52"+
    "\2\0\1\53\4\0\1\53\1\56\1\0\7\53\17\23"+
    "\1\203\12\23\1\53\23\23\3\0\1\50\4\0\1\52"+
    "\2\0\1\53\4\0\1\53\1\56\1\0\7\53\23\23"+
    "\1\204\6\23\1\53\23\23\3\0\1\50\4\0\1\52"+
    "\2\0\1\53\4\0\1\53\1\56\1\0\7\53\2\23"+
    "\1\205\27\23\1\53\23\23\3\0\1\50\4\0\1\52"+
    "\2\0\1\53\4\0\1\53\1\56\1\0\7\53\22\23"+
    "\1\206\7\23\1\53\23\23\3\0\1\50\4\0\1\52"+
    "\2\0\1\53\4\0\1\53\1\56\1\0\7\53\24\23"+
    "\1\207\5\23\1\53\23\23\3\0\1\50\4\0\1\52"+
    "\2\0\1\53\4\0\1\53\1\56\1\0\7\53\1\23"+
    "\1\210\15\23\1\211\12\23\1\53\23\23\3\0\1\50"+
    "\4\0\1\52\2\0\1\53\4\0\1\53\1\56\1\0"+
    "\7\53\12\23\1\201\17\23\1\53\23\23\3\0\1\50"+
    "\4\0\1\52\2\0\1\53\4\0\1\53\1\56\1\0"+
    "\7\53\4\23\1\212\25\23\1\53\23\23\3\0\1\50"+
    "\4\0\1\52\2\0\1\53\4\0\1\53\1\56\1\0"+
    "\7\53\32\23\1\53\10\23\1\201\12\23\3\0\1\50"+
    "\4\0\1\52\2\0\1\53\4\0\1\53\1\56\1\0"+
    "\7\53\7\23\1\213\22\23\1\53\23\23\3\0\1\50"+
    "\4\0\1\52\2\0\1\53\4\0\1\53\1\56\1\0"+
    "\7\53\7\23\1\214\22\23\1\53\23\23\3\0\1\50"+
    "\4\0\1\52\2\0\1\53\4\0\1\53\1\56\1\0"+
    "\7\53\1\215\31\23\1\53\23\23\3\0\1\50\4\0"+
    "\1\52\2\0\1\53\4\0\1\53\1\50\1\0\11\53"+
    "\1\216\2\53\1\217\50\53\3\0\1\50\4\0\1\52"+
    "\2\0\1\53\4\0\1\53\1\56\1\0\7\53\6\23"+
    "\1\220\23\23\1\53\23\23\3\0\1\50\4\0\1\52"+
    "\2\0\1\53\4\0\1\53\1\56\1\0\7\53\10\23"+
    "\1\221\21\23\1\53\23\23\3\0\1\50\4\0\1\52"+
    "\2\0\1\53\4\0\1\53\1\56\1\0\7\53\24\23"+
    "\1\222\5\23\1\53\23\23\3\0\1\50\4\0\1\52"+
    "\2\0\1\53\4\0\1\53\1\56\1\0\7\53\23\23"+
    "\1\223\6\23\1\53\23\23\3\0\1\50\4\0\1\52"+
    "\2\0\1\53\4\0\1\53\1\56\1\0\7\53\1\23"+
    "\1\224\30\23\1\53\23\23\3\0\1\50\4\0\1\52"+
    "\2\0\1\53\4\0\1\53\1\56\1\0\7\53\10\23"+
    "\1\225\21\23\1\53\23\23\3\0\1\50\4\0\1\52"+
    "\2\0\1\53\4\0\1\53\1\56\1\0\7\53\22\23"+
    "\1\226\7\23\1\53\23\23\3\0\1\50\4\0\1\52"+
    "\2\0\1\53\4\0\1\53\1\56\1\0\7\53\10\23"+
    "\1\210\21\23\1\53\23\23\3\0\1\50\4\0\1\52"+
    "\2\0\1\53\4\0\1\53\1\56\1\0\7\53\10\23"+
    "\1\227\21\23\1\53\23\23\3\0\1\50\4\0\1\52"+
    "\2\0\1\53\4\0\1\53\1\56\1\0\7\53\24\23"+
    "\1\230\5\23\1\53\23\23\3\0\1\50\4\0\1\52"+
    "\2\0\1\53\4\0\1\53\1\56\1\0\7\53\1\231"+
    "\31\23\1\53\23\23\3\0\1\50\4\0\1\52\2\0"+
    "\1\53\4\0\1\53\1\56\1\0\7\53\23\23\1\232"+
    "\6\23\1\53\23\23\3\0\1\50\4\0\1\52\2\0"+
    "\1\53\4\0\1\53\1\56\1\0\7\53\24\23\1\233"+
    "\5\23\1\53\23\23\3\0\1\50\4\0\1\52\2\0"+
    "\1\53\4\0\1\53\1\56\1\0\7\53\1\234\31\23"+
    "\1\53\23\23\3\0\1\50\4\0\1\52\2\0\1\53"+
    "\4\0\1\53\1\56\1\0\7\53\16\23\1\235\13\23"+
    "\1\53\23\23\3\0\1\50\4\0\1\52\2\0\1\53"+
    "\4\0\1\53\1\56\1\0\7\53\23\23\1\130\6\23"+
    "\1\53\23\23\3\0\1\50\4\0\1\52\2\0\1\53"+
    "\4\0\1\53\1\56\1\0\7\53\32\23\1\53\20\23"+
    "\1\132\2\23\3\0\1\50\4\0\1\52\2\0\1\50"+
    "\4\0\1\52\1\50\1\0\7\50\32\125\1\50\3\125"+
    "\1\236\1\125\1\237\13\125\1\240\1\125\3\0\1\50"+
    "\4\0\1\52\2\0\1\53\4\0\1\53\1\56\1\0"+
    "\7\53\32\23\1\53\15\23\1\241\5\23\3\0\1\50"+
    "\4\0\1\52\2\0\1\53\4\0\1\53\1\242\1\0"+
    "\7\53\32\23\1\53\23\23\3\0\1\50\4\0\1\52"+
    "\2\0\1\53\4\0\1\243\1\54\1\0\6\14\57\53"+
    "\3\0\1\50\4\0\1\52\2\0\1\50\4\0\1\52"+
    "\1\50\1\0\44\50\1\244\20\50\3\0\1\50\4\0"+
    "\1\52\2\0\1\53\4\0\1\53\1\56\1\0\7\53"+
    "\4\23\1\245\25\23\1\53\23\23\3\0\1\50\4\0"+
    "\1\52\2\0\1\53\4\0\1\53\1\56\1\0\7\53"+
    "\32\23\1\246\23\23\3\0\1\50\4\0\1\52\2\0"+
    "\1\53\4\0\1\53\1\56\1\0\7\53\15\23\1\247"+
    "\14\23\1\53\23\23\3\0\1\50\4\0\1\52\2\0"+
    "\1\53\4\0\1\53\1\56\1\0\7\53\16\23\1\250"+
    "\13\23\1\53\23\23\3\0\1\50\4\0\1\52\2\0"+
    "\1\53\4\0\1\53\1\56\1\0\7\53\21\23\1\251"+
    "\10\23\1\53\23\23\3\0\1\50\4\0\1\52\2\0"+
    "\1\53\4\0\1\53\1\56\1\0\7\53\12\23\1\252"+
    "\17\23\1\53\23\23\3\0\1\50\4\0\1\52\2\0"+
    "\1\53\4\0\1\53\1\56\1\0\7\53\4\23\1\253"+
    "\25\23\1\53\23\23\3\0\1\50\4\0\1\52\2\0"+
    "\1\53\4\0\1\53\1\56\1\0\7\53\14\23\1\254"+
    "\15\23\1\53\23\23\3\0\1\50\4\0\1\52\2\0"+
    "\1\53\4\0\1\53\1\56\1\0\7\53\16\23\1\255"+
    "\13\23\1\53\23\23\3\0\1\50\4\0\1\52\2\0"+
    "\1\53\4\0\1\53\1\56\1\0\7\53\16\23\1\256"+
    "\13\23\1\53\23\23\3\0\1\50\4\0\1\52\2\0"+
    "\1\53\4\0\1\53\1\56\1\0\7\53\2\23\1\257"+
    "\27\23\1\53\23\23\3\0\1\50\4\0\1\52\2\0"+
    "\1\53\4\0\1\53\1\56\1\0\7\53\1\260\31\23"+
    "\1\53\23\23\3\0\1\50\4\0\1\52\2\0\1\53"+
    "\4\0\1\53\1\56\1\0\7\53\4\23\1\261\25\23"+
    "\1\53\23\23\3\0\1\50\4\0\1\52\2\0\1\53"+
    "\4\0\1\53\1\56\1\0\7\53\22\23\1\262\7\23"+
    "\1\53\23\23\3\0\1\50\4\0\1\52\2\0\1\53"+
    "\4\0\1\53\1\50\1\0\25\53\1\263\37\53\3\0"+
    "\1\50\4\0\1\52\2\0\1\53\4\0\1\53\1\50"+
    "\1\0\25\53\1\264\37\53\3\0\1\50\4\0\1\52"+
    "\2\0\1\53\4\0\1\53\1\56\1\0\7\53\4\23"+
    "\1\265\25\23\1\53\23\23\3\0\1\50\4\0\1\52"+
    "\2\0\1\53\4\0\1\53\1\56\1\0\7\53\2\23"+
    "\1\266\27\23\1\53\23\23\3\0\1\50\4\0\1\52"+
    "\2\0\1\53\4\0\1\53\1\56\1\0\7\53\10\23"+
    "\1\267\21\23\1\53\23\23\3\0\1\50\4\0\1\52"+
    "\2\0\1\53\4\0\1\53\1\56\1\0\7\53\10\23"+
    "\1\270\21\23\1\53\23\23\3\0\1\50\4\0\1\52"+
    "\2\0\1\53\4\0\1\53\1\56\1\0\7\53\21\23"+
    "\1\271\10\23\1\53\23\23\3\0\1\50\4\0\1\52"+
    "\2\0\1\53\4\0\1\53\1\56\1\0\7\53\16\23"+
    "\1\272\13\23\1\53\23\23\3\0\1\50\4\0\1\52"+
    "\2\0\1\53\4\0\1\53\1\56\1\0\7\53\26\23"+
    "\1\273\3\23\1\53\23\23\3\0\1\50\4\0\1\52"+
    "\2\0\1\53\4\0\1\53\1\56\1\0\7\53\22\23"+
    "\1\274\7\23\1\53\23\23\3\0\1\50\4\0\1\52"+
    "\2\0\1\53\4\0\1\53\1\56\1\0\7\53\4\23"+
    "\1\275\25\23\1\53\23\23\3\0\1\50\4\0\1\52"+
    "\2\0\1\53\4\0\1\53\1\56\1\0\7\53\16\23"+
    "\1\276\13\23\1\53\23\23\3\0\1\50\4\0\1\52"+
    "\2\0\1\53\4\0\1\53\1\56\1\0\7\53\13\23"+
    "\1\277\16\23\1\53\23\23\3\0\1\50\4\0\1\52"+
    "\2\0\1\53\4\0\1\53\1\56\1\0\7\53\21\23"+
    "\1\300\10\23\1\53\23\23\3\0\1\50\4\0\1\52"+
    "\2\0\1\53\4\0\1\53\1\56\1\0\7\53\21\23"+
    "\1\301\10\23\1\53\23\23\3\0\1\50\4\0\1\52"+
    "\2\0\1\50\4\0\1\52\1\176\1\0\7\50\32\125"+
    "\1\50\1\302\22\125\3\0\1\50\4\0\1\52\2\0"+
    "\1\50\4\0\1\52\1\176\1\0\7\50\32\125\1\50"+
    "\14\125\1\303\6\125\3\0\1\50\4\0\1\52\2\0"+
    "\1\50\4\0\1\52\1\176\1\0\7\50\32\125\1\50"+
    "\17\125\1\304\3\125\3\0\1\50\4\0\1\52\2\0"+
    "\1\53\4\0\1\53\1\56\1\0\7\53\32\23\1\53"+
    "\17\23\1\305\3\23\3\0\1\50\4\0\1\52\2\0"+
    "\1\50\4\0\1\52\1\50\1\0\7\50\32\125\1\50"+
    "\5\125\1\306\15\125\3\0\1\50\4\0\1\52\2\0"+
    "\1\53\4\0\1\53\1\50\1\0\1\307\1\310\63\53"+
    "\3\0\1\50\4\0\1\52\2\0\1\50\4\0\1\52"+
    "\1\50\1\0\56\50\1\311\6\50\3\0\1\50\4\0"+
    "\1\52\2\0\1\53\4\0\1\53\1\56\1\0\7\53"+
    "\1\312\31\23\1\53\23\23\3\0\1\50\4\0\1\52"+
    "\2\0\1\53\4\0\1\53\1\50\1\0\32\53\1\313"+
    "\32\53\3\0\1\50\4\0\1\52\2\0\1\53\4\0"+
    "\1\53\1\56\1\0\7\53\32\23\1\314\23\23\3\0"+
    "\1\50\4\0\1\52\2\0\1\53\4\0\1\53\1\56"+
    "\1\0\7\53\16\23\1\315\13\23\1\53\23\23\3\0"+
    "\1\50\4\0\1\52\2\0\1\53\4\0\1\53\1\56"+
    "\1\0\7\53\1\23\1\316\30\23\1\53\23\23\3\0"+
    "\1\50\4\0\1\52\2\0\1\53\4\0\1\53\1\56"+
    "\1\0\7\53\15\23\1\317\14\23\1\53\23\23\3\0"+
    "\1\50\4\0\1\52\2\0\1\53\4\0\1\53\1\56"+
    "\1\0\7\53\15\23\1\320\14\23\1\53\23\23\3\0"+
    "\1\50\4\0\1\52\2\0\1\53\4\0\1\53\1\56"+
    "\1\0\7\53\7\23\1\321\22\23\1\53\23\23\3\0"+
    "\1\50\4\0\1\52\2\0\1\53\4\0\1\53\1\56"+
    "\1\0\7\53\32\23\1\322\23\23\3\0\1\50\4\0"+
    "\1\52\2\0\1\53\4\0\1\53\1\56\1\0\7\53"+
    "\21\23\1\323\10\23\1\53\23\23\3\0\1\50\4\0"+
    "\1\52\2\0\1\53\4\0\1\53\1\50\1\0\23\53"+
    "\1\324\41\53\3\0\1\50\4\0\1\52\2\0\1\53"+
    "\4\0\1\53\1\50\1\0\30\53\1\325\34\53\3\0"+
    "\1\50\4\0\1\52\2\0\1\53\4\0\1\53\1\56"+
    "\1\0\7\53\15\23\1\326\14\23\1\53\23\23\3\0"+
    "\1\50\4\0\1\52\2\0\1\53\4\0\1\53\1\56"+
    "\1\0\7\53\4\23\1\327\25\23\1\53\23\23\3\0"+
    "\1\50\4\0\1\52\2\0\1\53\4\0\1\53\1\56"+
    "\1\0\7\53\4\23\1\330\25\23\1\53\23\23\3\0"+
    "\1\50\4\0\1\52\2\0\1\53\4\0\1\53\1\56"+
    "\1\0\7\53\5\23\1\331\24\23\1\53\23\23\3\0"+
    "\1\50\4\0\1\52\2\0\1\53\4\0\1\53\1\56"+
    "\1\0\7\53\4\23\1\332\25\23\1\53\23\23\3\0"+
    "\1\50\4\0\1\52\2\0\1\53\4\0\1\53\1\56"+
    "\1\0\7\53\15\23\1\333\14\23\1\53\23\23\3\0"+
    "\1\50\4\0\1\52\2\0\1\53\4\0\1\53\1\56"+
    "\1\0\7\53\16\23\1\334\13\23\1\53\23\23\3\0"+
    "\1\50\4\0\1\52\2\0\1\53\4\0\1\53\1\56"+
    "\1\0\7\53\23\23\1\335\6\23\1\53\23\23\3\0"+
    "\1\50\4\0\1\52\2\0\1\53\4\0\1\53\1\56"+
    "\1\0\7\53\21\23\1\336\10\23\1\53\23\23\3\0"+
    "\1\50\4\0\1\52\2\0\1\53\4\0\1\53\1\56"+
    "\1\0\7\53\32\23\1\337\23\23\3\0\1\50\4\0"+
    "\1\52\2\0\1\53\4\0\1\53\1\56\1\0\7\53"+
    "\16\23\1\340\13\23\1\53\23\23\3\0\1\50\4\0"+
    "\1\52\2\0\1\53\4\0\1\53\1\56\1\0\7\53"+
    "\10\23\1\341\21\23\1\53\23\23\3\0\1\50\4\0"+
    "\1\52\2\0\1\50\4\0\1\52\1\176\1\0\7\50"+
    "\32\125\1\50\20\125\1\342\2\125\3\0\1\50\4\0"+
    "\1\52\2\0\1\50\4\0\1\52\1\176\1\0\7\50"+
    "\32\125\1\50\16\125\1\343\4\125\3\0\1\50\4\0"+
    "\1\52\2\0\1\50\4\0\1\52\1\176\1\0\7\50"+
    "\32\125\1\50\21\125\1\344\1\125\3\0\1\50\4\0"+
    "\1\52\2\0\1\53\4\0\1\53\1\56\1\0\6\53"+
    "\1\345\32\23\1\53\23\23\3\0\1\50\4\0\1\52"+
    "\2\0\1\50\4\0\1\52\1\176\1\0\7\50\32\125"+
    "\1\50\14\125\1\346\6\125\3\0\1\50\4\0\1\52"+
    "\2\0\1\53\4\0\1\53\1\50\1\0\1\53\5\347"+
    "\57\53\3\0\1\50\4\0\1\52\2\0\1\53\4\0"+
    "\1\53\1\50\1\0\3\347\62\53\3\0\1\50\4\0"+
    "\1\52\2\0\1\50\4\0\1\52\1\50\1\0\54\50"+
    "\1\350\10\50\3\0\1\50\4\0\1\52\2\0\1\53"+
    "\4\0\1\53\1\56\1\0\7\53\2\23\1\351\27\23"+
    "\1\53\23\23\3\0\1\50\4\0\1\52\2\0\1\53"+
    "\4\0\1\53\1\50\1\0\13\53\1\352\51\53\3\0"+
    "\1\50\4\0\1\52\2\0\1\53\4\0\1\53\1\50"+
    "\1\0\32\53\1\353\32\53\3\0\1\50\4\0\1\52"+
    "\2\0\1\53\4\0\1\53\1\56\1\0\7\53\16\23"+
    "\1\354\13\23\1\53\23\23\3\0\1\50\4\0\1\52"+
    "\2\0\1\53\4\0\1\53\1\56\1\0\7\53\1\355"+
    "\31\23\1\53\23\23\3\0\1\50\4\0\1\52\2\0"+
    "\1\53\4\0\1\53\1\56\1\0\7\53\4\23\1\356"+
    "\25\23\1\53\23\23\3\0\1\50\4\0\1\52\2\0"+
    "\1\53\4\0\1\53\1\56\1\0\7\53\1\315\31\23"+
    "\1\53\23\23\3\0\1\50\4\0\1\52\2\0\1\53"+
    "\4\0\1\53\1\50\1\0\11\53\1\357\11\53\1\360"+
    "\41\53\3\0\1\50\4\0\1\52\2\0\1\53\4\0"+
    "\1\53\1\56\1\0\7\53\16\23\1\361\13\23\1\53"+
    "\23\23\3\0\1\50\4\0\1\52\2\0\1\53\4\0"+
    "\1\53\1\50\1\0\26\53\1\362\36\53\3\0\1\50"+
    "\4\0\1\52\2\0\1\53\4\0\1\53\1\50\1\0"+
    "\23\53\1\363\41\53\3\0\1\50\4\0\1\52\2\0"+
    "\1\53\4\0\1\53\1\56\1\0\7\53\21\23\1\364"+
    "\10\23\1\53\23\23\3\0\1\50\4\0\1\52\2\0"+
    "\1\53\4\0\1\53\1\56\1\0\7\53\10\23\1\365"+
    "\21\23\1\53\23\23\3\0\1\50\4\0\1\52\2\0"+
    "\1\53\4\0\1\53\1\56\1\0\7\53\32\23\1\366"+
    "\23\23\3\0\1\50\4\0\1\52\2\0\1\53\4\0"+
    "\1\53\1\56\1\0\7\53\4\23\1\367\25\23\1\53"+
    "\23\23\3\0\1\50\4\0\1\52\2\0\1\53\4\0"+
    "\1\53\1\56\1\0\7\53\21\23\1\370\10\23\1\53"+
    "\23\23\3\0\1\50\4\0\1\52\2\0\1\53\4\0"+
    "\1\53\1\56\1\0\7\53\21\23\1\371\10\23\1\53"+
    "\23\23\3\0\1\50\4\0\1\52\2\0\1\53\4\0"+
    "\1\53\1\56\1\0\7\53\10\23\1\372\21\23\1\53"+
    "\23\23\3\0\1\50\4\0\1\52\2\0\1\53\4\0"+
    "\1\53\1\50\1\0\34\53\1\373\30\53\3\0\1\50"+
    "\4\0\1\52\2\0\1\53\4\0\1\53\1\56\1\0"+
    "\7\53\16\23\1\374\13\23\1\53\23\23\3\0\1\50"+
    "\4\0\1\52\2\0\1\50\4\0\1\52\1\176\1\0"+
    "\7\50\32\125\1\50\14\125\1\375\6\125\3\0\1\50"+
    "\4\0\1\52\2\0\1\50\4\0\1\52\1\176\1\0"+
    "\7\50\32\125\1\50\12\125\1\376\10\125\3\0\1\50"+
    "\4\0\1\52\2\0\1\50\4\0\1\52\1\176\1\0"+
    "\7\50\32\125\1\50\1\377\22\125\3\0\1\50\4\0"+
    "\1\52\2\0\1\53\4\0\1\53\1\50\1\u0100\65\53"+
    "\3\0\1\50\4\0\1\52\2\0\1\50\4\0\1\52"+
    "\1\176\1\0\7\50\32\125\1\50\16\125\1\u0101\4\125"+
    "\3\0\1\50\4\0\1\52\2\0\1\53\4\0\1\u0102"+
    "\1\50\1\0\65\53\3\0\1\50\4\0\1\52\2\0"+
    "\1\50\4\0\1\52\1\50\1\u0103\65\50\3\0\1\50"+
    "\4\0\1\52\2\0\1\53\4\0\1\53\1\56\1\0"+
    "\7\53\10\23\1\u0104\21\23\1\53\23\23\3\0\1\50"+
    "\4\0\1\52\2\0\1\53\4\0\1\53\1\50\1\0"+
    "\36\53\1\u0105\26\53\3\0\1\50\4\0\1\52\2\0"+
    "\1\53\4\0\1\53\1\50\1\0\13\53\1\u0106\51\53"+
    "\3\0\1\50\4\0\1\52\2\0\1\53\4\0\1\53"+
    "\1\56\1\0\7\53\27\23\1\255\2\23\1\53\23\23"+
    "\3\0\1\50\4\0\1\52\2\0\1\53\4\0\1\53"+
    "\1\56\1\0\7\53\22\23\1\u0107\7\23\1\53\23\23"+
    "\3\0\1\50\4\0\1\52\2\0\1\53\4\0\1\53"+
    "\1\56\1\0\7\53\15\23\1\u0108\14\23\1\53\23\23"+
    "\3\0\1\50\4\0\1\52\2\0\1\53\4\0\1\53"+
    "\1\50\1\0\30\53\1\u0109\34\53\3\0\1\50\4\0"+
    "\1\52\2\0\1\53\4\0\1\53\1\50\1\0\25\53"+
    "\1\u010a\37\53\3\0\1\50\4\0\1\52\2\0\1\53"+
    "\4\0\1\53\1\56\1\0\7\53\3\23\1\321\26\23"+
    "\1\53\23\23\3\0\1\50\4\0\1\52\2\0\1\53"+
    "\4\0\1\53\1\56\1\0\7\53\2\23\1\u010b\27\23"+
    "\1\53\23\23\3\0\1\50\4\0\1\52\2\0\1\53"+
    "\4\0\1\53\1\50\1\0\11\53\1\u010c\53\53\3\0"+
    "\1\50\4\0\1\52\2\0\1\53\4\0\1\53\1\56"+
    "\1\0\7\53\22\23\1\u010d\7\23\1\53\23\23\3\0"+
    "\1\50\4\0\1\52\2\0\1\53\4\0\1\53\1\56"+
    "\1\0\7\53\3\23\1\u010e\26\23\1\53\23\23\3\0"+
    "\1\50\4\0\1\52\2\0\1\53\4\0\1\53\1\56"+
    "\1\0\7\53\16\23\1\u010f\13\23\1\53\23\23\3\0"+
    "\1\50\4\0\1\52\2\0\1\53\4\0\1\53\1\56"+
    "\1\0\7\53\3\23\1\u0110\26\23\1\53\23\23\3\0"+
    "\1\50\4\0\1\52\2\0\1\53\4\0\1\53\1\50"+
    "\1\0\17\53\1\u0111\45\53\3\0\1\50\4\0\1\52"+
    "\2\0\1\53\4\0\1\53\1\56\1\0\7\53\32\23"+
    "\1\u0112\23\23\3\0\1\50\4\0\1\52\2\0\1\50"+
    "\4\0\1\52\1\176\1\0\7\50\32\125\1\50\17\125"+
    "\1\u0113\3\125\3\0\1\50\4\0\1\52\2\0\1\50"+
    "\4\0\1\52\1\176\1\0\7\50\32\125\1\50\21\125"+
    "\1\u0114\1\125\3\0\1\50\4\0\1\52\2\0\1\50"+
    "\4\0\1\52\1\176\1\0\7\50\32\125\1\50\16\125"+
    "\1\u0115\4\125\3\0\1\50\16\0\1\u0116\75\0\1\52"+
    "\2\0\1\50\4\0\1\52\1\176\1\0\7\50\32\125"+
    "\1\50\12\125\1\u0117\10\125\3\0\1\50\4\0\1\52"+
    "\2\0\1\53\4\0\1\53\1\50\1\0\1\u0118\2\u0119"+
    "\1\u011a\61\53\3\0\1\50\5\0\1\u0103\1\0\75\u0103"+
    "\10\0\1\52\2\0\1\53\4\0\1\53\1\56\1\0"+
    "\7\53\16\23\1\u011b\13\23\1\53\23\23\3\0\1\50"+
    "\4\0\1\52\2\0\1\53\4\0\1\53\1\50\1\0"+
    "\32\53\1\u011c\32\53\3\0\1\50\4\0\1\52\2\0"+
    "\1\53\4\0\1\53\1\50\1\0\36\53\1\u011d\26\53"+
    "\3\0\1\50\4\0\1\52\2\0\1\53\4\0\1\53"+
    "\1\56\1\0\7\53\23\23\1\u011e\6\23\1\53\23\23"+
    "\3\0\1\50\4\0\1\52\2\0\1\53\4\0\1\53"+
    "\1\50\1\0\13\53\1\u011f\51\53\3\0\1\50\4\0"+
    "\1\52\2\0\1\53\4\0\1\53\1\50\1\0\12\53"+
    "\1\u0120\52\53\3\0\1\50\4\0\1\52\2\0\1\53"+
    "\4\0\1\53\1\56\1\0\7\53\1\u0121\31\23\1\53"+
    "\23\23\3\0\1\50\4\0\1\52\2\0\1\53\4\0"+
    "\1\53\1\50\1\0\7\53\1\u0122\55\53\3\0\1\50"+
    "\4\0\1\52\2\0\1\53\4\0\1\53\1\56\1\0"+
    "\7\53\22\23\1\u0123\7\23\1\u0124\23\23\3\0\1\50"+
    "\4\0\1\52\2\0\1\53\4\0\1\53\1\56\1\0"+
    "\7\53\16\23\1\u0125\13\23\1\53\23\23\3\0\1\50"+
    "\4\0\1\52\2\0\1\53\4\0\1\53\1\50\1\0"+
    "\31\53\1\u0126\33\53\3\0\1\50\4\0\1\52\2\0"+
    "\1\53\4\0\1\53\1\50\1\0\11\53\1\u0127\53\53"+
    "\3\0\1\50\4\0\1\52\2\0\1\50\4\0\1\52"+
    "\1\176\1\0\7\50\32\125\1\50\11\125\1\u0128\11\125"+
    "\3\0\1\50\4\0\1\52\2\0\1\50\4\0\1\52"+
    "\1\176\1\0\7\50\32\125\1\50\7\125\1\u0129\13\125"+
    "\3\0\1\50\26\0\32\u012a\1\0\23\u012a\10\0\1\52"+
    "\2\0\1\50\4\0\1\52\1\176\1\0\7\50\32\125"+
    "\1\50\21\125\1\u012b\1\125\3\0\1\50\4\0\1\52"+
    "\2\0\1\53\4\0\1\53\1\50\1\0\1\53\5\u012c"+
    "\57\53\3\0\1\50\4\0\1\52\2\0\1\53\4\0"+
    "\1\53\1\50\1\0\6\u012c\57\53\3\0\1\50\4\0"+
    "\1\52\2\0\1\53\4\0\1\53\1\50\1\0\2\u012c"+
    "\63\53\3\0\1\50\4\0\1\52\2\0\1\53\4\0"+
    "\1\53\1\56\1\0\7\53\15\23\1\u012d\14\23\1\53"+
    "\23\23\3\0\1\50\4\0\1\52\2\0\1\53\4\0"+
    "\1\53\1\50\1\0\25\53\1\u012e\37\53\3\0\1\50"+
    "\4\0\1\52\2\0\1\53\4\0\1\53\1\50\1\0"+
    "\32\53\1\u012f\32\53\3\0\1\50\4\0\1\52\2\0"+
    "\1\53\4\0\1\53\1\56\1\0\7\53\4\23\1\u0130"+
    "\25\23\1\53\23\23\3\0\1\50\4\0\1\52\2\0"+
    "\1\53\4\0\1\53\1\50\1\0\7\53\1\u0131\55\53"+
    "\3\0\1\50\4\0\1\52\2\0\1\53\4\0\1\53"+
    "\1\50\1\0\17\53\1\u0132\45\53\3\0\1\50\4\0"+
    "\1\52\2\0\1\53\4\0\1\53\1\56\1\0\7\53"+
    "\21\23\1\315\10\23\1\53\23\23\3\0\1\50\4\0"+
    "\1\52\2\0\1\53\4\0\1\53\1\50\1\0\23\53"+
    "\1\u0133\41\53\3\0\1\50\4\0\1\52\2\0\1\53"+
    "\4\0\1\53\1\50\1\0\6\u0134\57\53\3\0\1\50"+
    "\4\0\1\52\2\0\1\53\4\0\1\53\1\50\1\0"+
    "\17\53\1\u0135\45\53\3\0\1\50\4\0\1\52\2\0"+
    "\1\53\4\0\1\53\1\50\1\0\30\53\1\u0136\34\53"+
    "\3\0\1\50\4\0\1\52\2\0\1\50\4\0\1\52"+
    "\1\176\1\0\7\50\32\125\1\50\1\u0137\22\125\3\0"+
    "\1\50\4\0\1\52\2\0\1\50\4\0\1\52\1\176"+
    "\1\0\7\50\32\125\1\50\14\125\1\u0138\6\125\3\0"+
    "\1\50\15\0\1\u0139\10\0\32\u012a\1\0\23\u012a\10\0"+
    "\1\52\2\0\1\50\4\0\1\52\1\176\1\0\7\50"+
    "\32\125\1\50\11\125\1\u013a\11\125\3\0\1\50\4\0"+
    "\1\52\2\0\1\53\4\0\1\53\1\50\1\0\25\53"+
    "\1\u013b\37\53\3\0\1\50\4\0\1\52\2\0\1\53"+
    "\4\0\1\53\1\56\1\0\7\53\22\23\1\u013c\7\23"+
    "\1\53\23\23\3\0\1\50\4\0\1\52\2\0\1\53"+
    "\4\0\1\53\1\50\1\0\11\53\1\u013d\53\53\3\0"+
    "\1\50\4\0\1\52\2\0\1\53\4\0\1\53\1\50"+
    "\1\0\14\53\1\u013e\50\53\3\0\1\50\4\0\1\52"+
    "\2\0\1\53\4\0\1\53\1\50\1\0\26\53\1\u013f"+
    "\36\53\3\0\1\50\4\0\1\52\2\0\1\53\4\0"+
    "\1\53\1\50\1\0\10\53\1\u0140\54\53\3\0\1\50"+
    "\4\0\1\52\2\0\1\53\4\0\1\53\1\50\1\0"+
    "\13\53\1\u0141\51\53\3\0\1\50\4\0\1\52\2\0"+
    "\1\50\4\0\1\52\1\176\1\0\7\50\32\125\1\50"+
    "\16\125\1\u0142\4\125\3\0\1\50\4\0\1\52\2\0"+
    "\1\50\4\0\1\52\1\176\1\0\7\50\32\125\1\50"+
    "\17\125\1\u0143\3\125\3\0\1\50\26\0\32\u0144\1\0"+
    "\23\u0144\10\0\1\52\2\0\1\50\4\0\1\52\1\176"+
    "\1\0\7\50\32\125\1\50\1\u0145\22\125\3\0\1\50"+
    "\4\0\1\52\2\0\1\53\4\0\1\53\1\50\1\0"+
    "\17\53\1\u0146\45\53\3\0\1\50\4\0\1\52\2\0"+
    "\1\53\4\0\1\53\1\50\1\0\17\53\1\u0147\45\53"+
    "\3\0\1\50\4\0\1\52\2\0\1\53\4\0\1\53"+
    "\1\50\1\0\25\53\1\u0148\37\53\3\0\1\50\4\0"+
    "\1\52\2\0\1\53\4\0\1\53\1\50\1\0\22\53"+
    "\1\u0149\42\53\3\0\1\50\4\0\1\52\2\0\1\53"+
    "\4\0\1\53\1\50\1\0\7\53\1\u014a\55\53\3\0"+
    "\1\50\4\0\1\52\2\0\1\50\4\0\1\52\1\176"+
    "\1\0\7\50\32\125\1\50\7\125\1\u014b\13\125\3\0"+
    "\1\50\15\0\1\u014c\10\0\32\u0144\1\0\23\u0144\10\0"+
    "\1\52\2\0\1\50\4\0\1\52\1\176\1\0\7\50"+
    "\32\125\1\50\16\125\1\u014d\4\125\3\0\1\50\4\0"+
    "\1\52\2\0\1\53\4\0\1\53\1\50\1\0\25\53"+
    "\1\u014e\37\53\3\0\1\50\4\0\1\52\2\0\1\53"+
    "\4\0\1\53\1\50\1\0\11\53\1\u014f\53\53\3\0"+
    "\1\50\4\0\1\52\2\0\1\53\4\0\1\53\1\50"+
    "\1\0\13\53\1\u0150\51\53\3\0\1\50\4\0\1\52"+
    "\2\0\1\53\4\0\1\53\1\50\1\0\11\53\1\u0151"+
    "\53\53\3\0\1\50\4\0\1\52\2\0\1\50\4\0"+
    "\1\52\1\176\1\0\7\50\32\125\1\50\14\125\1\u0152"+
    "\6\125\3\0\1\50\63\0\1\u0153\30\0\1\52\2\0"+
    "\1\50\4\0\1\52\1\176\1\0\7\50\32\125\1\50"+
    "\7\125\1\u0154\13\125\3\0\1\50\4\0\1\52\2\0"+
    "\1\53\4\0\1\53\1\50\1\0\24\53\1\u0155\40\53"+
    "\3\0\1\50\4\0\1\52\2\0\1\53\4\0\1\53"+
    "\1\50\1\0\7\53\1\u0156\55\53\3\0\1\50\4\0"+
    "\1\52\2\0\1\53\4\0\1\53\1\50\1\0\17\53"+
    "\1\u0157\45\53\3\0\1\50\4\0\1\52\2\0\1\50"+
    "\4\0\1\52\1\176\1\0\7\50\32\125\1\50\17\125"+
    "\1\u0158\3\125\3\0\1\50\75\0\1\u0159\16\0\1\52"+
    "\2\0\1\50\4\0\1\52\1\176\1\0\7\50\32\125"+
    "\1\50\14\125\1\u015a\6\125\3\0\1\50\4\0\1\52"+
    "\2\0\1\53\4\0\1\53\1\50\1\0\11\53\1\u015b"+
    "\53\53\3\0\1\50\4\0\1\52\2\0\1\53\4\0"+
    "\1\53\1\50\1\0\25\53\1\u015c\37\53\3\0\1\50"+
    "\73\0\1\u015d\20\0\1\52\2\0\1\53\4\0\1\53"+
    "\1\50\1\0\17\53\1\u015e\45\53\3\0\1\50\4\0"+
    "\1\52\2\0\1\53\4\0\1\53\1\50\1\0\24\53"+
    "\1\u015f\40\53\3\0\1\50\16\0\1\u0103\75\0\1\52"+
    "\2\0\1\53\4\0\1\53\1\50\1\0\25\53\1\u0160"+
    "\37\53\3\0\1\50\4\0\1\52\2\0\1\53\4\0"+
    "\1\53\1\50\1\0\24\53\1\u0161\40\53\3\0\1\50";

  private static int [] zzUnpackTrans() {
    int [] result = new int[22176];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\1\1\11\2\1\3\11\1\1\1\0\31\1"+
    "\1\11\1\1\1\11\2\1\1\0\325\1\1\0\25\1"+
    "\1\0\23\1\1\0\16\1\1\0\12\1\1\0\7\1"+
    "\1\0\6\1\1\0\5\1\1\0\3\1\1\0\4\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[353];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    private Symbol symbol(int type, Object value){
        return new Symbol(type, yyline, yycolumn, value);
    }
    private Symbol symbol(int type){
        return new Symbol(type, yyline, yycolumn);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexerALM(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { /*Ignore*/
            }
            // fall through
          case 52: break;
          case 2:
            { return new Symbol(symALM.COMILLAS, yycolumn, yyline, yytext());
            }
            // fall through
          case 53: break;
          case 3:
            { return new Symbol(symALM.USUARIO,yycolumn,yyline,yytext());
            }
            // fall through
          case 54: break;
          case 4:
            { return new Symbol(symALM.ID,yycolumn,yyline,yytext());
            }
            // fall through
          case 55: break;
          case 5:
            { return new Symbol(symALM.PARENTESISA, yycolumn, yyline, yytext());
            }
            // fall through
          case 56: break;
          case 6:
            { return new Symbol(symALM.PARENTESISC, yycolumn, yyline, yytext());
            }
            // fall through
          case 57: break;
          case 7:
            { return new Symbol(symALM.COMA, yycolumn, yyline, yytext());
            }
            // fall through
          case 58: break;
          case 8:
            { return new Symbol(symALM.NUMERO, yycolumn, yyline, yytext());
            }
            // fall through
          case 59: break;
          case 9:
            { return new Symbol(symALM.DOSP, yycolumn, yyline, yytext());
            }
            // fall through
          case 60: break;
          case 10:
            { return new Symbol(symALM.LLAVEA, yycolumn, yyline, yytext());
            }
            // fall through
          case 61: break;
          case 11:
            { return new Symbol(symALM.OR,yycolumn,yyline,yytext());
            }
            // fall through
          case 62: break;
          case 12:
            { return new Symbol(symALM.LLAVEC, yycolumn, yyline, yytext());
            }
            // fall through
          case 63: break;
          case 13:
            { return new Symbol(symALM.TITULO, yycolumn, yyline, yytext());
            }
            // fall through
          case 64: break;
          case 14:
            { return new Symbol(symALM.BOOL,yycolumn,yyline,yytext());
            }
            // fall through
          case 65: break;
          case 15:
            { return new Symbol(symALM.URLC,yycolumn,yyline,yytext());
            }
            // fall through
          case 66: break;
          case 16:
            { return new Symbol(symALM.TEMA,yycolumn,yyline,yytext());
            }
            // fall through
          case 67: break;
          case 17:
            { return new Symbol(symALM.TEMAP,yycolumn,yyline,yytext());
            }
            // fall through
          case 68: break;
          case 18:
            { return new Symbol(symALM.CLASEBOTON,yycolumn,yyline,yytext());
            }
            // fall through
          case 69: break;
          case 19:
            { return new Symbol(symALM.CLASE,yycolumn,yyline,yytext());
            }
            // fall through
          case 70: break;
          case 20:
            { return new Symbol(symALM.CLASEOPCIONES,yycolumn,yyline,yytext());
            }
            // fall through
          case 71: break;
          case 21:
            { return new Symbol(symALM.FILAS,yycolumn,yyline,yytext());
            }
            // fall through
          case 72: break;
          case 22:
            { return new Symbol(symALM.VALOR, yycolumn, yyline, yytext());
            }
            // fall through
          case 73: break;
          case 23:
            { return new Symbol(symALM.ALINEA,yycolumn,yyline,yytext());
            }
            // fall through
          case 74: break;
          case 24:
            { return new Symbol(symALM.CLASEIMAGEN,yycolumn,yyline,yytext());
            }
            // fall through
          case 75: break;
          case 25:
            { return new Symbol(symALM.INDICEC,yycolumn,yyline,yytext());
            }
            // fall through
          case 76: break;
          case 26:
            { return new Symbol(symALM.NOMBREP,yycolumn,yyline,yytext());
            }
            // fall through
          case 77: break;
          case 27:
            { return new Symbol(symALM.TITULOP,yycolumn,yyline,yytext());
            }
            // fall through
          case 78: break;
          case 28:
            { return new Symbol(symALM.CLASENORMAL,yycolumn,yyline,yytext());
            }
            // fall through
          case 79: break;
          case 29:
            { return new Symbol(symALM.IDC,yycolumn,yyline,yytext());
            }
            // fall through
          case 80: break;
          case 30:
            { return new Symbol(symALM.IDF,yycolumn,yyline,yytext());
            }
            // fall through
          case 81: break;
          case 31:
            { return new Symbol(symALM.USUARIOP,yycolumn,yyline,yytext());
            }
            // fall through
          case 82: break;
          case 32:
            { return new Symbol(symALM.URL, yycolumn,yyline,yytext());
            }
            // fall through
          case 83: break;
          case 33:
            { return new Symbol(symALM.COLUMNAS,yycolumn,yyline,yytext());
            }
            // fall through
          case 84: break;
          case 34:
            { return new Symbol(symALM.OPCIONES,yycolumn,yyline,yytext());
            }
            // fall through
          case 85: break;
          case 35:
            { return new Symbol(symALM.CONTRAP,yycolumn,yyline,yytext());
            }
            // fall through
          case 86: break;
          case 36:
            { return new Symbol(symALM.INICIODATOS, yycolumn, yyline, yytext());
            }
            // fall through
          case 87: break;
          case 37:
            { return new Symbol(symALM.REGISTROS, yycolumn, yyline, yytext());
            }
            // fall through
          case 88: break;
          case 38:
            { return new Symbol(symALM.REQUERIDO,yycolumn,yyline,yytext());
            }
            // fall through
          case 89: break;
          case 39:
            { return new Symbol(symALM.FECHA,yycolumn,yyline,yytext());
            }
            // fall through
          case 90: break;
          case 40:
            { return new Symbol(symALM.ALINEAC,yycolumn,yyline,yytext());
            }
            // fall through
          case 91: break;
          case 41:
            { return new Symbol(symALM.CLASEAREA,yycolumn,yyline,yytext());
            }
            // fall through
          case 92: break;
          case 42:
            { return new Symbol(symALM.NOREGISTRO, yycolumn, yyline, yytext());
            }
            // fall through
          case 93: break;
          case 43:
            { return new Symbol(symALM.COMPS, yycolumn, yyline, yytext());
            }
            // fall through
          case 94: break;
          case 44:
            { return new Symbol(symALM.INICIOUSUARIOS, yycolumn, yyline, yytext());
            }
            // fall through
          case 95: break;
          case 45:
            { return new Symbol(symALM.NOMBREC,yycolumn,yyline,yytext());
            }
            // fall through
          case 96: break;
          case 46:
            { return new Symbol(symALM.TEXTOVC,yycolumn,yyline,yytext());
            }
            // fall through
          case 97: break;
          case 47:
            { return new Symbol(symALM.FECHACP,yycolumn,yyline,yytext());
            }
            // fall through
          case 98: break;
          case 48:
            { return new Symbol(symALM.INICIOFORM,yycolumn, yyline, yytext());
            }
            // fall through
          case 99: break;
          case 49:
            { return new Symbol(symALM.INICIONEW, yycolumn, yyline, yytext());
            }
            // fall through
          case 100: break;
          case 50:
            { return new Symbol(symALM.USUARIOCP,yycolumn,yyline,yytext());
            }
            // fall through
          case 101: break;
          case 51:
            { return new Symbol(symALM.FECHAMP,yycolumn,yyline,yytext());
            }
            // fall through
          case 102: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
