// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/Analizadores/Lexer.flex

package Analizadores;
import java_cup.runtime.Symbol;

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  0,  0,  1,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     2,  3,  4,  5,  6,  5,  5,  0,  7,  8,  0,  0,  9, 10, 11, 12, 
    13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 14,  0, 15,  0, 16,  0, 
     5, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 
    32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43,  0, 44,  0, 45, 
     0, 46, 47, 48, 49, 50, 51, 41, 52, 53, 41, 54, 55, 56, 57, 58, 
    59, 41, 60, 61, 62, 63, 41, 64, 41, 41, 41, 65, 66, 67,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\0\1\2\1\3\1\4\1\5\1\6"+
    "\1\7\1\3\1\10\1\11\1\12\1\13\23\3\1\14"+
    "\1\15\6\3\1\16\1\17\1\20\1\21\1\0\1\3"+
    "\1\0\1\10\1\22\1\0\23\3\1\23\6\3\1\24"+
    "\5\3\1\24\11\3\1\25\2\10\1\0\45\3\1\26"+
    "\6\3\1\10\1\0\3\3\1\27\33\3\1\30\7\3"+
    "\1\0\3\3\1\31\3\3\1\32\1\3\1\33\6\3"+
    "\1\34\24\3\1\0\4\3\1\35\11\3\1\36\1\37"+
    "\4\3\1\40\6\3\1\41\5\3\1\0\13\3\1\42"+
    "\15\3\1\43\1\3\1\0\1\3\1\44\1\45\4\3"+
    "\1\46\14\3\1\47\1\3\1\50\4\3\1\0\22\3"+
    "\1\51\5\3\1\0\2\3\1\52\1\53\10\3\1\54"+
    "\15\3\1\42\41\3\1\55\13\3\1\56\6\3\1\57"+
    "\7\3\1\60\2\3\1\61\1\62\6\3\1\63\5\3"+
    "\1\64\5\3\1\65\15\3\1\66\1\3\1\67\1\70"+
    "\4\3\1\71\4\3\1\72\2\3\1\73\7\3\1\74"+
    "\2\3\1\75\3\3\1\76\5\3\1\77\1\100\4\3"+
    "\1\101\1\102\1\103\2\3\1\104\1\105";

  private static int [] zzUnpackAction() {
    int [] result = new int[510];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\104\0\210\0\314\0\u0110\0\u0154\0\314\0\314"+
    "\0\314\0\u0198\0\u01dc\0\u0110\0\u0220\0\314\0\u0264\0\u02a8"+
    "\0\u02ec\0\u0330\0\u0374\0\u03b8\0\u03fc\0\u0440\0\u0484\0\u04c8"+
    "\0\u050c\0\u0550\0\u0594\0\u05d8\0\u061c\0\u0660\0\u06a4\0\u06e8"+
    "\0\u072c\0\314\0\314\0\u0770\0\u07b4\0\u07f8\0\u083c\0\u0880"+
    "\0\u08c4\0\314\0\104\0\314\0\314\0\u0908\0\u094c\0\u0990"+
    "\0\u09d4\0\314\0\u0a18\0\u0a5c\0\u0aa0\0\u0ae4\0\u0b28\0\u0b6c"+
    "\0\u0bb0\0\u0bf4\0\u0c38\0\u0c7c\0\u0cc0\0\u0d04\0\u0d48\0\u0d8c"+
    "\0\u0dd0\0\u0e14\0\u0e58\0\u0e9c\0\u0ee0\0\u0f24\0\u03fc\0\u0f68"+
    "\0\u0fac\0\u0ff0\0\u1034\0\u1078\0\u10bc\0\u1100\0\u1144\0\u1188"+
    "\0\u11cc\0\u1210\0\u1254\0\u03fc\0\u1298\0\u12dc\0\u1320\0\u1364"+
    "\0\u13a8\0\u13ec\0\u1430\0\u1474\0\u14b8\0\u0908\0\u0990\0\u14fc"+
    "\0\u1540\0\u1584\0\u15c8\0\u160c\0\u1650\0\u1694\0\u16d8\0\u171c"+
    "\0\u1760\0\u17a4\0\u17e8\0\u182c\0\u1870\0\u18b4\0\u18f8\0\u193c"+
    "\0\u1980\0\u19c4\0\u1a08\0\u1a4c\0\u1a90\0\u1ad4\0\u1b18\0\u1b5c"+
    "\0\u1ba0\0\u1be4\0\u1c28\0\u1c6c\0\u1cb0\0\u1cf4\0\u1d38\0\u1d7c"+
    "\0\u1dc0\0\u1e04\0\u1e48\0\u1e8c\0\u1ed0\0\u1f14\0\u03fc\0\u1f58"+
    "\0\u1f9c\0\u1fe0\0\u2024\0\u2068\0\u20ac\0\u20f0\0\u2134\0\u2178"+
    "\0\u21bc\0\u2200\0\u03fc\0\u2244\0\u2288\0\u22cc\0\u2310\0\u2354"+
    "\0\u2398\0\u23dc\0\u2420\0\u2464\0\u24a8\0\u24ec\0\u2530\0\u2574"+
    "\0\u25b8\0\u25fc\0\u2640\0\u2684\0\u26c8\0\u270c\0\u2750\0\u2794"+
    "\0\u27d8\0\u281c\0\u2860\0\u28a4\0\u28e8\0\u292c\0\u03fc\0\u2970"+
    "\0\u29b4\0\u29f8\0\u2a3c\0\u2a80\0\u2ac4\0\u2b08\0\u2b4c\0\u2b90"+
    "\0\u2bd4\0\u2c18\0\u03fc\0\u2c5c\0\u2ca0\0\u2ce4\0\u03fc\0\u2d28"+
    "\0\u03fc\0\u2d6c\0\u2db0\0\u2df4\0\u2e38\0\u2e7c\0\u2ec0\0\u03fc"+
    "\0\u2f04\0\u2f48\0\u2f8c\0\u2fd0\0\u3014\0\u3058\0\u309c\0\u30e0"+
    "\0\u3124\0\u3168\0\u31ac\0\u31f0\0\u3234\0\u3278\0\u32bc\0\u3300"+
    "\0\u3344\0\u3388\0\u33cc\0\u3410\0\u3454\0\u3498\0\u34dc\0\u3520"+
    "\0\u3564\0\u03fc\0\u35a8\0\u35ec\0\u3630\0\u3674\0\u36b8\0\u36fc"+
    "\0\u3740\0\u3784\0\u37c8\0\u03fc\0\u03fc\0\u380c\0\u3850\0\u3894"+
    "\0\u38d8\0\u391c\0\u3960\0\u39a4\0\u39e8\0\u3a2c\0\u3a70\0\u3ab4"+
    "\0\u03fc\0\u3af8\0\u3b3c\0\u3b80\0\u3bc4\0\u3c08\0\u3c4c\0\u3c90"+
    "\0\u3cd4\0\u3d18\0\u3d5c\0\u3da0\0\u3de4\0\u3e28\0\u3e6c\0\u3eb0"+
    "\0\u3ef4\0\u3f38\0\u03fc\0\u3f7c\0\u3fc0\0\u4004\0\u4048\0\u408c"+
    "\0\u40d0\0\u4114\0\u4158\0\u419c\0\u41e0\0\u4224\0\u4268\0\u42ac"+
    "\0\u42f0\0\u4334\0\u4378\0\u43bc\0\u3c08\0\u4400\0\u4444\0\u4488"+
    "\0\u44cc\0\u4510\0\u03fc\0\u4554\0\u4598\0\u45dc\0\u4620\0\u4664"+
    "\0\u46a8\0\u46ec\0\u4730\0\u4774\0\u47b8\0\u47fc\0\u4840\0\u03fc"+
    "\0\u4884\0\u03fc\0\u48c8\0\u490c\0\u4950\0\u4994\0\u49d8\0\u4a1c"+
    "\0\u4a60\0\u4aa4\0\u4ae8\0\u4b2c\0\u4b70\0\u4bb4\0\u4bf8\0\u4c3c"+
    "\0\u4c80\0\u4cc4\0\u4d08\0\u4d4c\0\u4d90\0\u4dd4\0\u4e18\0\u4e5c"+
    "\0\u4ea0\0\u03fc\0\u4ee4\0\u4f28\0\u4f6c\0\u4fb0\0\u4ff4\0\u5038"+
    "\0\u507c\0\u50c0\0\u03fc\0\u094c\0\u5104\0\u5148\0\u518c\0\u51d0"+
    "\0\u5214\0\u5258\0\u529c\0\u52e0\0\u03fc\0\u5324\0\u5368\0\u53ac"+
    "\0\u53f0\0\u5434\0\u5478\0\u54bc\0\u5500\0\u5544\0\u5588\0\u55cc"+
    "\0\u5610\0\u5654\0\u094c\0\u5698\0\u56dc\0\u5720\0\u5764\0\u57a8"+
    "\0\u57ec\0\u5830\0\u5874\0\u58b8\0\u58fc\0\u5940\0\u5984\0\u59c8"+
    "\0\u5a0c\0\u5a50\0\u5a94\0\u5ad8\0\u5b1c\0\u5b60\0\u5ba4\0\u5be8"+
    "\0\u5c2c\0\u5c70\0\u5cb4\0\u5cf8\0\u5d3c\0\u5d80\0\u5dc4\0\u5e08"+
    "\0\u5e4c\0\u5e90\0\u5ed4\0\u5f18\0\u094c\0\u5f5c\0\u5fa0\0\u5fe4"+
    "\0\u6028\0\u606c\0\u60b0\0\u60f4\0\u6138\0\u617c\0\u61c0\0\u6204"+
    "\0\u094c\0\u6248\0\u628c\0\u62d0\0\u6314\0\u6358\0\u639c\0\u094c"+
    "\0\u63e0\0\u6424\0\u6468\0\u64ac\0\u64f0\0\u6534\0\u6578\0\u094c"+
    "\0\u65bc\0\u6600\0\u094c\0\u6644\0\u6688\0\u66cc\0\u6710\0\u6754"+
    "\0\u6798\0\u67dc\0\u094c\0\u6820\0\u6864\0\u68a8\0\u68ec\0\u6930"+
    "\0\u094c\0\u6974\0\u69b8\0\u69fc\0\u6a40\0\u6a84\0\u094c\0\u6ac8"+
    "\0\u6b0c\0\u6b50\0\u6b94\0\u6bd8\0\u6c1c\0\u6c60\0\u6ca4\0\u6ce8"+
    "\0\u6d2c\0\u6d70\0\u6db4\0\u6df8\0\u094c\0\u6e3c\0\u094c\0\u094c"+
    "\0\u6e80\0\u6ec4\0\u6f08\0\u6f4c\0\u094c\0\u6f90\0\u6fd4\0\u7018"+
    "\0\u705c\0\u094c\0\u70a0\0\u70e4\0\u094c\0\u7128\0\u716c\0\u71b0"+
    "\0\u71f4\0\u7238\0\u727c\0\u72c0\0\u094c\0\u7304\0\u7348\0\u094c"+
    "\0\u738c\0\u73d0\0\u7414\0\u094c\0\u7458\0\u749c\0\u74e0\0\u7524"+
    "\0\u7568\0\u094c\0\u094c\0\u75ac\0\u75f0\0\u7634\0\u7678\0\u094c"+
    "\0\u094c\0\u094c\0\u76bc\0\u7700\0\u094c\0\u094c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[510];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\2\2\1\3\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\2\0\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\2\25\1\26\1\27"+
    "\1\25\1\30\1\31\1\32\1\33\1\34\1\25\1\35"+
    "\1\36\1\37\1\40\1\25\1\41\3\25\1\42\1\43"+
    "\1\12\1\25\1\44\1\25\1\45\1\25\1\46\1\47"+
    "\1\50\12\25\1\51\1\52\1\53\1\54\1\0\2\2"+
    "\77\0\1\2\21\0\1\55\174\0\1\5\4\0\1\5"+
    "\2\0\2\5\2\0\32\5\2\0\24\5\11\0\1\6"+
    "\3\0\1\6\2\0\1\6\3\0\32\6\2\0\24\6"+
    "\10\0\1\5\1\6\3\0\1\12\2\0\1\12\1\5"+
    "\2\0\32\12\2\0\24\12\5\0\1\56\2\0\1\57"+
    "\4\0\1\57\1\60\1\0\1\61\1\57\2\0\32\57"+
    "\2\0\24\57\6\0\1\62\102\0\1\56\2\0\1\57"+
    "\4\0\1\57\1\63\1\0\2\57\2\0\6\25\1\64"+
    "\4\25\1\65\5\25\1\66\10\25\2\0\1\57\23\25"+
    "\5\0\1\56\2\0\1\57\4\0\1\57\1\63\1\0"+
    "\2\57\2\0\13\25\1\67\2\25\1\70\13\25\2\0"+
    "\1\57\11\25\1\71\11\25\5\0\1\56\2\0\1\57"+
    "\4\0\1\57\1\63\1\0\2\57\2\0\1\72\3\25"+
    "\1\73\2\25\1\74\3\25\1\75\2\25\1\76\2\25"+
    "\1\77\10\25\2\0\1\57\23\25\5\0\1\56\2\0"+
    "\1\57\4\0\1\57\1\63\1\0\2\57\2\0\1\100"+
    "\3\25\1\101\25\25\2\0\1\57\1\102\22\25\5\0"+
    "\1\56\2\0\1\57\4\0\1\57\1\63\1\0\2\57"+
    "\2\0\13\25\1\103\16\25\2\0\1\57\23\25\5\0"+
    "\1\56\2\0\1\57\4\0\1\57\1\63\1\0\2\57"+
    "\2\0\4\25\1\104\3\25\1\105\5\25\1\106\13\25"+
    "\2\0\1\57\23\25\5\0\1\56\2\0\1\57\4\0"+
    "\1\57\1\63\1\0\2\57\2\0\32\25\2\0\1\57"+
    "\23\25\5\0\1\56\2\0\1\57\4\0\1\57\1\63"+
    "\1\0\2\57\2\0\3\25\1\107\10\25\1\110\1\111"+
    "\13\25\1\112\2\0\1\57\23\25\5\0\1\56\2\0"+
    "\1\57\4\0\1\57\1\63\1\0\2\57\2\0\24\25"+
    "\1\113\5\25\2\0\1\57\23\25\5\0\1\56\2\0"+
    "\1\57\4\0\1\57\1\63\1\0\2\57\2\0\16\25"+
    "\1\114\13\25\2\0\1\57\23\25\5\0\1\56\2\0"+
    "\1\57\4\0\1\57\1\63\1\0\2\57\2\0\16\25"+
    "\1\115\13\25\2\0\1\57\23\25\5\0\1\56\2\0"+
    "\1\57\4\0\1\57\1\63\1\0\2\57\2\0\16\25"+
    "\1\116\5\25\1\117\5\25\2\0\1\57\23\25\5\0"+
    "\1\56\2\0\1\57\4\0\1\57\1\63\1\0\2\57"+
    "\2\0\17\25\1\120\12\25\2\0\1\57\23\25\5\0"+
    "\1\56\2\0\1\57\4\0\1\57\1\63\1\0\2\57"+
    "\2\0\1\121\31\25\2\0\1\57\23\25\5\0\1\56"+
    "\2\0\1\57\4\0\1\57\1\63\1\0\2\57\2\0"+
    "\1\122\3\25\1\123\25\25\2\0\1\57\23\25\5\0"+
    "\1\56\2\0\1\57\4\0\1\57\1\63\1\0\2\57"+
    "\2\0\10\25\1\124\21\25\2\0\1\57\23\25\5\0"+
    "\1\56\2\0\1\57\4\0\1\57\1\63\1\0\2\57"+
    "\2\0\4\25\1\125\3\25\1\126\21\25\2\0\1\57"+
    "\23\25\5\0\1\56\2\0\1\57\4\0\1\57\1\63"+
    "\1\0\2\57\2\0\21\25\1\127\1\130\7\25\2\0"+
    "\1\57\23\25\5\0\1\56\2\0\1\57\4\0\1\57"+
    "\1\63\1\0\2\57\2\0\7\25\1\131\22\25\2\0"+
    "\1\57\6\25\1\132\14\25\5\0\1\56\2\0\1\57"+
    "\4\0\1\57\1\63\1\0\2\57\2\0\32\25\2\0"+
    "\1\57\11\25\1\71\11\25\5\0\1\56\2\0\1\57"+
    "\4\0\1\57\1\63\1\0\2\57\2\0\32\25\2\0"+
    "\1\57\1\102\22\25\5\0\1\56\2\0\1\57\4\0"+
    "\1\57\1\63\1\0\2\57\2\0\32\25\2\0\1\57"+
    "\7\25\1\133\13\25\5\0\1\56\2\0\1\57\4\0"+
    "\1\57\1\63\1\0\2\57\2\0\32\25\2\0\1\57"+
    "\20\25\1\134\2\25\5\0\1\56\2\0\1\57\4\0"+
    "\1\57\1\63\1\0\2\57\2\0\32\25\2\0\1\57"+
    "\13\25\1\135\7\25\5\0\1\56\2\0\1\57\4\0"+
    "\1\57\1\63\1\0\2\57\2\0\32\25\2\0\1\57"+
    "\6\25\1\132\14\25\5\0\1\56\2\0\1\136\4\0"+
    "\1\136\2\0\2\136\2\0\32\136\2\0\24\136\5\0"+
    "\1\56\2\0\1\57\4\0\1\57\2\0\2\57\2\0"+
    "\32\57\2\0\24\57\20\0\1\137\70\0\1\56\2\0"+
    "\1\57\4\0\1\57\1\60\1\0\1\140\1\57\2\0"+
    "\32\57\2\0\24\57\24\0\32\141\3\0\23\141\5\0"+
    "\1\56\2\0\1\57\4\0\1\57\1\63\1\0\2\57"+
    "\2\0\21\25\1\142\10\25\2\0\1\57\23\25\5\0"+
    "\1\56\2\0\1\57\4\0\1\57\1\63\1\0\2\57"+
    "\2\0\10\25\1\143\21\25\2\0\1\57\23\25\5\0"+
    "\1\56\2\0\1\57\4\0\1\57\1\63\1\0\2\57"+
    "\2\0\4\25\1\144\25\25\2\0\1\57\23\25\5\0"+
    "\1\56\2\0\1\57\4\0\1\57\1\63\1\0\2\57"+
    "\2\0\24\25\1\145\5\25\2\0\1\57\23\25\5\0"+
    "\1\56\2\0\1\57\4\0\1\57\1\63\1\0\2\57"+
    "\2\0\23\25\1\146\6\25\2\0\1\57\23\25\5\0"+
    "\1\56\2\0\1\57\4\0\1\57\1\63\1\0\2\57"+
    "\2\0\32\25\2\0\1\57\21\25\1\147\1\25\5\0"+
    "\1\56\2\0\1\57\4\0\1\57\1\63\1\0\2\57"+
    "\2\0\14\25\1\150\15\25\2\0\1\57\23\25\5\0"+
    "\1\56\2\0\1\57\4\0\1\57\1\63\1\0\2\57"+
    "\2\0\15\25\1\151\14\25\2\0\1\57\23\25\5\0"+
    "\1\56\2\0\1\57\4\0\1\57\1\63\1\0\2\57"+
    "\2\0\4\25\1\152\25\25\2\0\1\57\23\25\5\0"+
    "\1\56\2\0\1\57\4\0\1\57\1\63\1\0\2\57"+
    "\2\0\1\153\31\25\2\0\1\57\23\25\5\0\1\56"+
    "\2\0\1\57\4\0\1\57\1\63\1\0\2\57\2\0"+
    "\13\25\1\154\1\155\15\25\2\0\1\57\23\25\5\0"+
    "\1\56\2\0\1\57\4\0\1\57\1\63\1\0\2\57"+
    "\2\0\4\25\1\156\25\25\2\0\1\57\23\25\5\0"+
    "\1\56\2\0\1\57\4\0\1\57\1\63\1\0\2\57"+
    "\2\0\21\25\1\157\10\25\2\0\1\57\23\25\5\0"+
    "\1\56\2\0\1\57\4\0\1\57\1\63\1\0\2\57"+
    "\2\0\21\25\1\160\10\25\2\0\1\57\23\25\5\0"+
    "\1\56\2\0\1\57\4\0\1\57\1\63\1\0\2\57"+
    "\2\0\32\25\2\0\1\57\16\25\1\161\4\25\5\0"+
    "\1\56\2\0\1\57\4\0\1\57\1\63\1\0\2\57"+
    "\2\0\10\25\1\162\21\25\2\0\1\57\23\25\5\0"+
    "\1\56\2\0\1\57\4\0\1\57\1\63\1\0\2\57"+
    "\2\0\2\25\1\163\27\25\2\0\1\57\23\25\5\0"+
    "\1\56\2\0\1\57\4\0\1\57\1\63\1\0\2\57"+
    "\2\0\2\25\1\164\10\25\1\165\16\25\2\0\1\57"+
    "\23\25\5\0\1\56\2\0\1\57\4\0\1\57\1\63"+
    "\1\0\2\57\2\0\21\25\1\166\10\25\2\0\1\57"+
    "\23\25\5\0\1\56\2\0\1\57\4\0\1\57\1\63"+
    "\1\0\2\57\2\0\1\167\31\25\2\0\1\57\23\25"+
    "\5\0\1\56\2\0\1\57\4\0\1\57\1\63\1\0"+
    "\2\57\2\0\3\25\1\170\26\25\2\0\1\57\23\25"+
    "\5\0\1\56\2\0\1\57\4\0\1\57\1\63\1\0"+
    "\2\57\2\0\20\25\1\171\11\25\2\0\1\57\23\25"+
    "\5\0\1\56\2\0\1\57\4\0\1\57\1\63\1\0"+
    "\2\57\2\0\22\25\1\172\7\25\2\0\1\57\23\25"+
    "\5\0\1\56\2\0\1\57\4\0\1\57\1\63\1\0"+
    "\2\57\2\0\6\25\1\173\23\25\2\0\1\57\23\25"+
    "\5\0\1\56\2\0\1\57\4\0\1\57\1\63\1\0"+
    "\2\57\2\0\3\25\1\174\26\25\2\0\1\57\23\25"+
    "\5\0\1\56\2\0\1\57\4\0\1\57\1\63\1\0"+
    "\2\57\2\0\14\25\1\175\15\25\2\0\1\57\23\25"+
    "\5\0\1\56\2\0\1\57\4\0\1\57\1\63\1\0"+
    "\2\57\2\0\4\25\1\176\25\25\2\0\1\57\23\25"+
    "\5\0\1\56\2\0\1\57\4\0\1\57\1\63\1\0"+
    "\2\57\2\0\2\25\1\177\27\25\2\0\1\57\23\25"+
    "\5\0\1\56\2\0\1\57\4\0\1\57\1\63\1\0"+
    "\2\57\2\0\21\25\1\200\1\201\7\25\2\0\1\57"+
    "\23\25\5\0\1\56\2\0\1\57\4\0\1\57\1\63"+
    "\1\0\2\57\2\0\3\25\1\202\26\25\2\0\1\57"+
    "\23\25\5\0\1\56\2\0\1\57\4\0\1\57\1\63"+
    "\1\0\2\57\2\0\20\25\1\203\11\25\2\0\1\57"+
    "\23\25\5\0\1\56\2\0\1\57\4\0\1\57\1\63"+
    "\1\0\2\57\2\0\14\25\1\204\12\25\1\205\2\25"+
    "\2\0\1\57\23\25\5\0\1\56\2\0\1\57\4\0"+
    "\1\57\1\63\1\0\2\57\2\0\23\25\1\206\6\25"+
    "\2\0\1\57\23\25\5\0\1\56\2\0\1\57\4\0"+
    "\1\57\1\63\1\0\2\57\2\0\13\25\1\207\16\25"+
    "\2\0\1\57\23\25\5\0\1\56\2\0\1\57\4\0"+
    "\1\57\1\63\1\0\2\57\2\0\24\25\1\210\5\25"+
    "\2\0\1\57\23\25\5\0\1\56\2\0\1\57\4\0"+
    "\1\57\1\63\1\0\2\57\2\0\10\25\1\211\21\25"+
    "\2\0\1\57\23\25\5\0\1\56\2\0\1\57\4\0"+
    "\1\57\1\63\1\0\2\57\2\0\32\25\2\0\1\57"+
    "\7\25\1\212\13\25\5\0\1\56\2\0\1\57\4\0"+
    "\1\57\1\63\1\0\2\57\2\0\32\25\2\0\1\57"+
    "\13\25\1\213\7\25\5\0\1\56\2\0\1\57\4\0"+
    "\1\57\1\63\1\0\2\57\2\0\32\25\2\0\1\57"+
    "\20\25\1\214\2\25\5\0\1\56\2\0\1\57\4\0"+
    "\1\57\1\63\1\0\2\57\2\0\32\25\2\0\1\57"+
    "\7\25\1\215\13\25\5\0\1\56\2\0\1\57\4\0"+
    "\1\57\1\60\1\0\1\216\1\57\2\0\32\57\2\0"+
    "\24\57\16\0\1\217\5\0\32\141\3\0\23\141\5\0"+
    "\1\56\2\0\1\57\4\0\1\57\1\63\1\0\2\57"+
    "\2\0\4\25\1\220\25\25\2\0\1\57\23\25\5\0"+
    "\1\56\2\0\1\57\4\0\1\57\1\63\1\0\2\57"+
    "\2\0\15\25\1\221\14\25\2\0\1\57\23\25\5\0"+
    "\1\56\2\0\1\57\4\0\1\57\1\63\1\0\2\57"+
    "\2\0\1\222\31\25\2\0\1\57\23\25\5\0\1\56"+
    "\2\0\1\57\4\0\1\57\1\63\1\0\2\57\2\0"+
    "\4\25\1\223\25\25\2\0\1\57\23\25\5\0\1\56"+
    "\2\0\1\57\4\0\1\57\1\63\1\0\2\57\2\0"+
    "\16\25\1\224\13\25\2\0\1\57\23\25\5\0\1\56"+
    "\2\0\1\57\4\0\1\57\1\63\1\0\2\57\2\0"+
    "\32\25\2\0\1\57\4\25\1\223\16\25\5\0\1\56"+
    "\2\0\1\57\4\0\1\57\1\63\1\0\2\57\2\0"+
    "\17\25\1\225\12\25\2\0\1\57\23\25\5\0\1\56"+
    "\2\0\1\57\4\0\1\57\1\63\1\0\2\57\2\0"+
    "\23\25\1\226\6\25\2\0\1\57\23\25\5\0\1\56"+
    "\2\0\1\57\4\0\1\57\1\63\1\0\2\57\2\0"+
    "\2\25\1\227\27\25\2\0\1\57\23\25\5\0\1\56"+
    "\2\0\1\57\4\0\1\57\1\63\1\0\2\57\2\0"+
    "\22\25\1\230\7\25\2\0\1\57\23\25\5\0\1\56"+
    "\2\0\1\57\4\0\1\57\1\63\1\0\2\57\2\0"+
    "\24\25\1\231\5\25\2\0\1\57\23\25\5\0\1\56"+
    "\2\0\1\57\4\0\1\57\1\63\1\0\2\57\2\0"+
    "\1\25\1\232\30\25\2\0\1\57\23\25\5\0\1\56"+
    "\2\0\1\57\4\0\1\57\1\63\1\0\2\57\2\0"+
    "\1\233\2\25\1\234\26\25\2\0\1\57\23\25\5\0"+
    "\1\56\2\0\1\57\4\0\1\57\1\63\1\0\2\57"+
    "\2\0\12\25\1\223\17\25\2\0\1\57\23\25\5\0"+
    "\1\56\2\0\1\57\4\0\1\57\1\63\1\0\2\57"+
    "\2\0\4\25\1\235\25\25\2\0\1\57\23\25\5\0"+
    "\1\56\2\0\1\57\4\0\1\57\1\63\1\0\2\57"+
    "\2\0\32\25\2\0\1\57\10\25\1\223\12\25\5\0"+
    "\1\56\2\0\1\57\4\0\1\57\1\63\1\0\2\57"+
    "\2\0\14\25\1\236\15\25\2\0\1\57\23\25\5\0"+
    "\1\56\2\0\1\57\4\0\1\57\1\63\1\0\2\57"+
    "\2\0\7\25\1\237\22\25\2\0\1\57\23\25\5\0"+
    "\1\56\2\0\1\57\4\0\1\57\1\63\1\0\2\57"+
    "\2\0\7\25\1\240\22\25\2\0\1\57\23\25\5\0"+
    "\1\56\2\0\1\57\4\0\1\57\1\63\1\0\2\57"+
    "\2\0\1\241\31\25\2\0\1\57\23\25\5\0\1\56"+
    "\2\0\1\57\4\0\1\57\1\63\1\0\2\57\2\0"+
    "\14\25\1\242\15\25\2\0\1\57\23\25\5\0\1\56"+
    "\2\0\1\57\4\0\1\57\1\63\1\0\2\57\2\0"+
    "\6\25\1\243\23\25\2\0\1\57\23\25\5\0\1\56"+
    "\2\0\1\57\4\0\1\57\1\63\1\0\2\57\2\0"+
    "\10\25\1\244\21\25\2\0\1\57\23\25\5\0\1\56"+
    "\2\0\1\57\4\0\1\57\1\63\1\0\2\57\2\0"+
    "\24\25\1\245\5\25\2\0\1\57\23\25\5\0\1\56"+
    "\2\0\1\57\4\0\1\57\1\63\1\0\2\57\2\0"+
    "\23\25\1\246\6\25\2\0\1\57\23\25\5\0\1\56"+
    "\2\0\1\57\4\0\1\57\1\63\1\0\2\57\2\0"+
    "\10\25\1\247\21\25\2\0\1\57\23\25\5\0\1\56"+
    "\2\0\1\57\4\0\1\57\1\63\1\0\2\57\2\0"+
    "\10\25\1\250\21\25\2\0\1\57\23\25\5\0\1\56"+
    "\2\0\1\57\4\0\1\57\1\63\1\0\2\57\2\0"+
    "\1\25\1\251\30\25\2\0\1\57\23\25\5\0\1\56"+
    "\2\0\1\57\4\0\1\57\1\63\1\0\2\57\2\0"+
    "\25\25\1\252\4\25\2\0\1\57\23\25\5\0\1\56"+
    "\2\0\1\57\4\0\1\57\1\63\1\0\2\57\2\0"+
    "\10\25\1\253\21\25\2\0\1\57\23\25\5\0\1\56"+
    "\2\0\1\57\4\0\1\57\1\63\1\0\2\57\2\0"+
    "\1\254\31\25\2\0\1\57\23\25\5\0\1\56\2\0"+
    "\1\57\4\0\1\57\1\63\1\0\2\57\2\0\22\25"+
    "\1\255\7\25\2\0\1\57\23\25\5\0\1\56\2\0"+
    "\1\57\4\0\1\57\1\63\1\0\2\57\2\0\10\25"+
    "\1\232\21\25\2\0\1\57\23\25\5\0\1\56\2\0"+
    "\1\57\4\0\1\57\1\63\1\0\2\57\2\0\24\25"+
    "\1\256\5\25\2\0\1\57\23\25\5\0\1\56\2\0"+
    "\1\57\4\0\1\57\1\63\1\0\2\57\2\0\1\257"+
    "\31\25\2\0\1\57\23\25\5\0\1\56\2\0\1\57"+
    "\4\0\1\57\1\63\1\0\2\57\2\0\23\25\1\260"+
    "\6\25\2\0\1\57\23\25\5\0\1\56\2\0\1\57"+
    "\4\0\1\57\1\63\1\0\2\57\2\0\24\25\1\261"+
    "\5\25\2\0\1\57\23\25\5\0\1\56\2\0\1\57"+
    "\4\0\1\57\1\63\1\0\2\57\2\0\1\262\31\25"+
    "\2\0\1\57\23\25\5\0\1\56\2\0\1\57\4\0"+
    "\1\57\1\63\1\0\2\57\2\0\23\25\1\145\6\25"+
    "\2\0\1\57\23\25\5\0\1\56\2\0\1\57\4\0"+
    "\1\57\1\63\1\0\2\57\2\0\32\25\2\0\1\57"+
    "\20\25\1\147\2\25\5\0\1\56\2\0\1\57\4\0"+
    "\1\57\1\63\1\0\2\57\2\0\32\25\2\0\1\263"+
    "\23\25\5\0\1\56\2\0\1\57\4\0\1\57\1\63"+
    "\1\0\2\57\2\0\32\25\2\0\1\57\15\25\1\264"+
    "\5\25\5\0\1\56\2\0\1\57\4\0\1\57\1\63"+
    "\1\0\2\57\2\0\32\25\2\0\1\265\23\25\5\0"+
    "\1\56\2\0\1\57\4\0\1\266\1\60\1\0\1\216"+
    "\1\57\2\0\32\57\2\0\24\57\63\0\1\267\25\0"+
    "\1\56\2\0\1\57\4\0\1\57\1\63\1\0\2\57"+
    "\2\0\6\25\1\270\23\25\2\0\1\57\23\25\5\0"+
    "\1\56\2\0\1\57\4\0\1\57\1\63\1\0\2\57"+
    "\2\0\4\25\1\271\25\25\2\0\1\57\23\25\5\0"+
    "\1\56\2\0\1\57\4\0\1\57\1\63\1\0\2\57"+
    "\2\0\32\25\2\0\1\272\23\25\5\0\1\56\2\0"+
    "\1\57\4\0\1\57\1\63\1\0\2\57\2\0\15\25"+
    "\1\273\14\25\2\0\1\57\23\25\5\0\1\56\2\0"+
    "\1\57\4\0\1\57\1\63\1\0\2\57\2\0\16\25"+
    "\1\274\13\25\2\0\1\57\23\25\5\0\1\56\2\0"+
    "\1\57\4\0\1\57\1\63\1\0\2\57\2\0\21\25"+
    "\1\275\10\25\2\0\1\57\23\25\5\0\1\56\2\0"+
    "\1\57\4\0\1\57\1\63\1\0\2\57\2\0\12\25"+
    "\1\276\17\25\2\0\1\57\23\25\5\0\1\56\2\0"+
    "\1\57\4\0\1\57\1\63\1\0\2\57\2\0\4\25"+
    "\1\277\25\25\2\0\1\57\23\25\5\0\1\56\2\0"+
    "\1\57\4\0\1\57\1\63\1\0\2\57\2\0\14\25"+
    "\1\300\15\25\2\0\1\57\23\25\5\0\1\56\2\0"+
    "\1\57\4\0\1\57\1\63\1\0\2\57\2\0\16\25"+
    "\1\301\13\25\2\0\1\57\23\25\5\0\1\56\2\0"+
    "\1\57\4\0\1\57\1\63\1\0\2\57\2\0\21\25"+
    "\1\302\10\25\2\0\1\57\23\25\5\0\1\56\2\0"+
    "\1\57\4\0\1\57\1\63\1\0\2\57\2\0\4\25"+
    "\1\303\25\25\2\0\1\57\23\25\5\0\1\56\2\0"+
    "\1\57\4\0\1\57\1\63\1\0\2\57\2\0\2\25"+
    "\1\304\27\25\2\0\1\57\23\25\5\0\1\56\2\0"+
    "\1\57\4\0\1\57\1\63\1\0\2\57\2\0\10\25"+
    "\1\305\21\25\2\0\1\57\23\25\5\0\1\56\2\0"+
    "\1\57\4\0\1\57\1\63\1\0\2\57\2\0\1\306"+
    "\31\25\2\0\1\57\23\25\5\0\1\56\2\0\1\57"+
    "\4\0\1\57\1\63\1\0\2\57\2\0\4\25\1\307"+
    "\25\25\2\0\1\57\23\25\5\0\1\56\2\0\1\57"+
    "\4\0\1\57\1\63\1\0\2\57\2\0\22\25\1\310"+
    "\7\25\2\0\1\57\23\25\5\0\1\56\2\0\1\57"+
    "\4\0\1\57\1\63\1\0\2\57\2\0\24\25\1\311"+
    "\5\25\2\0\1\57\23\25\5\0\1\56\2\0\1\57"+
    "\4\0\1\57\1\63\1\0\2\57\2\0\4\25\1\312"+
    "\25\25\2\0\1\57\23\25\5\0\1\56\2\0\1\57"+
    "\4\0\1\57\1\63\1\0\2\57\2\0\2\25\1\313"+
    "\27\25\2\0\1\57\23\25\5\0\1\56\2\0\1\57"+
    "\4\0\1\57\1\63\1\0\2\57\2\0\10\25\1\314"+
    "\21\25\2\0\1\57\23\25\5\0\1\56\2\0\1\57"+
    "\4\0\1\57\1\63\1\0\2\57\2\0\10\25\1\315"+
    "\21\25\2\0\1\57\23\25\5\0\1\56\2\0\1\57"+
    "\4\0\1\57\1\63\1\0\2\57\2\0\15\25\1\316"+
    "\14\25\2\0\1\57\23\25\5\0\1\56\2\0\1\57"+
    "\4\0\1\57\1\63\1\0\2\57\2\0\5\25\1\317"+
    "\24\25\2\0\1\57\23\25\5\0\1\56\2\0\1\57"+
    "\4\0\1\57\1\63\1\0\2\57\2\0\21\25\1\320"+
    "\10\25\2\0\1\57\23\25\5\0\1\56\2\0\1\57"+
    "\4\0\1\57\1\63\1\0\2\57\2\0\16\25\1\321"+
    "\13\25\2\0\1\57\23\25\5\0\1\56\2\0\1\57"+
    "\4\0\1\57\1\63\1\0\2\57\2\0\16\25\1\322"+
    "\13\25\2\0\1\57\23\25\5\0\1\56\2\0\1\57"+
    "\4\0\1\57\1\63\1\0\2\57\2\0\14\25\1\323"+
    "\15\25\2\0\1\57\23\25\5\0\1\56\2\0\1\57"+
    "\4\0\1\57\1\63\1\0\2\57\2\0\26\25\1\324"+
    "\3\25\2\0\1\57\23\25\5\0\1\56\2\0\1\57"+
    "\4\0\1\57\1\63\1\0\2\57\2\0\4\25\1\325"+
    "\25\25\2\0\1\57\23\25\5\0\1\56\2\0\1\57"+
    "\4\0\1\57\1\63\1\0\2\57\2\0\16\25\1\326"+
    "\13\25\2\0\1\57\23\25\5\0\1\56\2\0\1\57"+
    "\4\0\1\57\1\63\1\0\2\57\2\0\13\25\1\327"+
    "\16\25\2\0\1\57\23\25\5\0\1\56\2\0\1\57"+
    "\4\0\1\57\1\63\1\0\2\57\2\0\21\25\1\330"+
    "\10\25\2\0\1\57\23\25\5\0\1\56\2\0\1\57"+
    "\4\0\1\57\2\0\2\57\2\0\32\57\2\0\20\57"+
    "\1\331\3\57\5\0\1\56\2\0\1\57\4\0\1\57"+
    "\1\63\1\0\2\57\2\0\32\25\2\0\1\57\17\25"+
    "\1\332\3\25\5\0\1\56\2\0\1\57\4\0\1\57"+
    "\2\0\2\57\2\0\32\57\2\0\20\57\1\333\3\57"+
    "\5\0\1\56\2\0\1\57\4\0\1\57\2\0\1\334"+
    "\1\57\2\0\32\57\2\0\24\57\75\0\1\335\13\0"+
    "\1\56\2\0\1\57\4\0\1\57\1\63\1\0\2\57"+
    "\2\0\1\336\31\25\2\0\1\57\23\25\5\0\1\56"+
    "\2\0\1\57\4\0\1\57\1\63\1\0\2\57\2\0"+
    "\1\337\31\25\2\0\1\57\23\25\5\0\1\56\2\0"+
    "\1\57\4\0\1\57\2\0\2\57\2\0\23\57\1\340"+
    "\6\57\2\0\24\57\5\0\1\56\2\0\1\57\4\0"+
    "\1\57\1\63\1\0\2\57\2\0\32\25\2\0\1\341"+
    "\23\25\5\0\1\56\2\0\1\57\4\0\1\57\1\63"+
    "\1\0\2\57\2\0\16\25\1\342\13\25\2\0\1\57"+
    "\23\25\5\0\1\56\2\0\1\57\4\0\1\57\1\63"+
    "\1\0\2\57\2\0\1\25\1\343\30\25\2\0\1\57"+
    "\23\25\5\0\1\56\2\0\1\57\4\0\1\57\1\63"+
    "\1\0\2\57\2\0\15\25\1\344\14\25\2\0\1\57"+
    "\23\25\5\0\1\56\2\0\1\57\4\0\1\57\1\63"+
    "\1\0\2\57\2\0\32\25\2\0\1\345\23\25\5\0"+
    "\1\56\2\0\1\57\4\0\1\57\1\63\1\0\2\57"+
    "\2\0\15\25\1\346\14\25\2\0\1\57\23\25\5\0"+
    "\1\56\2\0\1\57\4\0\1\57\1\63\1\0\2\57"+
    "\2\0\7\25\1\347\22\25\2\0\1\57\23\25\5\0"+
    "\1\56\2\0\1\57\4\0\1\57\1\63\1\0\2\57"+
    "\2\0\15\25\1\350\14\25\2\0\1\57\23\25\5\0"+
    "\1\56\2\0\1\57\4\0\1\57\1\63\1\0\2\57"+
    "\2\0\32\25\2\0\1\351\23\25\5\0\1\56\2\0"+
    "\1\57\4\0\1\57\1\63\1\0\2\57\2\0\21\25"+
    "\1\352\10\25\2\0\1\57\23\25\5\0\1\56\2\0"+
    "\1\57\4\0\1\57\1\63\1\0\2\57\2\0\13\25"+
    "\1\353\16\25\2\0\1\57\23\25\5\0\1\56\2\0"+
    "\1\57\4\0\1\57\1\63\1\0\2\57\2\0\15\25"+
    "\1\354\14\25\2\0\1\57\23\25\5\0\1\56\2\0"+
    "\1\57\4\0\1\57\1\63\1\0\2\57\2\0\4\25"+
    "\1\355\25\25\2\0\1\57\23\25\5\0\1\56\2\0"+
    "\1\57\4\0\1\57\1\63\1\0\2\57\2\0\4\25"+
    "\1\356\25\25\2\0\1\57\23\25\5\0\1\56\2\0"+
    "\1\57\4\0\1\57\1\63\1\0\2\57\2\0\5\25"+
    "\1\357\24\25\2\0\1\57\23\25\5\0\1\56\2\0"+
    "\1\57\4\0\1\57\1\63\1\0\2\57\2\0\32\25"+
    "\2\0\1\360\23\25\5\0\1\56\2\0\1\57\4\0"+
    "\1\57\1\63\1\0\2\57\2\0\10\25\1\361\21\25"+
    "\2\0\1\57\23\25\5\0\1\56\2\0\1\57\4\0"+
    "\1\57\1\63\1\0\2\57\2\0\4\25\1\362\25\25"+
    "\2\0\1\57\23\25\5\0\1\56\2\0\1\57\4\0"+
    "\1\57\1\63\1\0\2\57\2\0\32\25\2\0\1\363"+
    "\23\25\5\0\1\56\2\0\1\57\4\0\1\57\1\63"+
    "\1\0\2\57\2\0\15\25\1\364\14\25\2\0\1\57"+
    "\23\25\5\0\1\56\2\0\1\57\4\0\1\57\1\63"+
    "\1\0\2\57\2\0\4\25\1\365\25\25\2\0\1\57"+
    "\23\25\5\0\1\56\2\0\1\57\4\0\1\57\1\63"+
    "\1\0\2\57\2\0\16\25\1\366\13\25\2\0\1\57"+
    "\23\25\5\0\1\56\2\0\1\57\4\0\1\57\1\63"+
    "\1\0\2\57\2\0\21\25\1\367\10\25\2\0\1\57"+
    "\23\25\5\0\1\56\2\0\1\57\4\0\1\57\1\63"+
    "\1\0\2\57\2\0\32\25\2\0\1\370\23\25\5\0"+
    "\1\56\2\0\1\57\4\0\1\57\1\63\1\0\2\57"+
    "\2\0\16\25\1\371\13\25\2\0\1\57\23\25\5\0"+
    "\1\56\2\0\1\57\4\0\1\57\1\63\1\0\2\57"+
    "\2\0\10\25\1\372\21\25\2\0\1\57\23\25\5\0"+
    "\1\56\2\0\1\57\4\0\1\57\2\0\2\57\2\0"+
    "\32\57\2\0\15\57\1\373\6\57\5\0\1\56\2\0"+
    "\1\57\4\0\1\57\1\63\1\0\1\57\1\374\2\0"+
    "\32\25\2\0\1\57\23\25\5\0\1\56\2\0\1\57"+
    "\4\0\1\57\2\0\2\57\2\0\32\57\2\0\15\57"+
    "\1\375\6\57\5\0\1\56\2\0\1\57\4\0\1\376"+
    "\2\0\1\334\1\57\2\0\32\57\2\0\24\57\73\0"+
    "\1\377\15\0\1\56\2\0\1\57\4\0\1\57\1\63"+
    "\1\0\2\57\2\0\21\25\1\u0100\10\25\2\0\1\57"+
    "\23\25\5\0\1\56\2\0\1\57\4\0\1\57\1\63"+
    "\1\0\2\57\2\0\2\25\1\u0101\27\25\2\0\1\57"+
    "\23\25\5\0\1\56\2\0\1\57\4\0\1\57\2\0"+
    "\2\57\2\0\4\57\1\u0102\25\57\2\0\24\57\5\0"+
    "\1\56\2\0\1\57\4\0\1\57\2\0\2\57\2\0"+
    "\23\57\1\u0103\6\57\2\0\24\57\5\0\1\56\2\0"+
    "\1\57\4\0\1\57\1\63\1\0\2\57\2\0\16\25"+
    "\1\u0104\13\25\2\0\1\57\23\25\5\0\1\56\2\0"+
    "\1\57\4\0\1\57\1\63\1\0\2\57\2\0\1\u0105"+
    "\31\25\2\0\1\57\23\25\5\0\1\56\2\0\1\57"+
    "\4\0\1\57\2\0\2\57\2\0\24\57\1\u0106\5\57"+
    "\2\0\24\57\5\0\1\56\2\0\1\57\4\0\1\57"+
    "\1\63\1\0\2\57\2\0\2\25\1\u0107\27\25\2\0"+
    "\1\57\23\25\5\0\1\56\2\0\1\57\4\0\1\57"+
    "\1\63\1\0\2\57\2\0\1\342\31\25\2\0\1\57"+
    "\23\25\5\0\1\56\2\0\1\57\4\0\1\57\1\63"+
    "\1\0\2\57\2\0\1\u0108\31\25\2\0\1\57\23\25"+
    "\5\0\1\56\2\0\1\57\4\0\1\57\2\0\2\57"+
    "\2\0\2\57\1\u0109\11\57\1\u010a\15\57\2\0\24\57"+
    "\5\0\1\56\2\0\1\57\4\0\1\57\1\63\1\0"+
    "\2\57\2\0\16\25\1\u010b\13\25\2\0\1\57\23\25"+
    "\5\0\1\56\2\0\1\57\4\0\1\57\1\63\1\0"+
    "\2\57\2\0\1\u010c\31\25\2\0\1\57\23\25\5\0"+
    "\1\56\2\0\1\57\4\0\1\57\1\63\1\0\2\57"+
    "\2\0\21\25\1\u010d\10\25\2\0\1\57\23\25\5\0"+
    "\1\56\2\0\1\57\4\0\1\57\1\63\1\0\2\57"+
    "\2\0\10\25\1\u010e\21\25\2\0\1\57\23\25\5\0"+
    "\1\56\2\0\1\57\4\0\1\57\2\0\2\57\2\0"+
    "\24\57\1\u010f\5\57\2\0\24\57\5\0\1\56\2\0"+
    "\1\57\4\0\1\57\1\63\1\0\2\57\2\0\2\25"+
    "\1\u0110\27\25\2\0\1\57\23\25\5\0\1\56\2\0"+
    "\1\57\4\0\1\57\1\63\1\0\2\57\2\0\32\25"+
    "\2\0\1\u0111\23\25\5\0\1\56\2\0\1\57\4\0"+
    "\1\57\2\0\2\57\2\0\5\57\1\u0112\11\57\1\u0113"+
    "\12\57\2\0\24\57\5\0\1\56\2\0\1\57\4\0"+
    "\1\57\1\63\1\0\2\57\2\0\4\25\1\u0114\25\25"+
    "\2\0\1\57\23\25\5\0\1\56\2\0\1\57\4\0"+
    "\1\57\1\63\1\0\2\57\2\0\23\25\1\u0115\6\25"+
    "\2\0\1\57\23\25\5\0\1\56\2\0\1\57\4\0"+
    "\1\57\1\63\1\0\2\57\2\0\21\25\1\u0116\10\25"+
    "\2\0\1\57\23\25\5\0\1\56\2\0\1\57\4\0"+
    "\1\57\1\63\1\0\2\57\2\0\10\25\1\u0117\21\25"+
    "\2\0\1\57\23\25\5\0\1\56\2\0\1\57\4\0"+
    "\1\57\2\0\2\57\2\0\25\57\1\u0118\4\57\2\0"+
    "\24\57\5\0\1\56\2\0\1\57\4\0\1\57\1\63"+
    "\1\0\2\57\2\0\16\25\1\u0119\13\25\2\0\1\57"+
    "\23\25\5\0\1\56\2\0\1\57\4\0\1\57\2\0"+
    "\2\57\2\0\32\57\2\0\12\57\1\u011a\11\57\5\0"+
    "\1\56\2\0\1\57\4\0\1\57\1\0\1\u011b\2\57"+
    "\2\0\32\57\2\0\24\57\5\0\1\56\2\0\1\57"+
    "\4\0\1\57\2\0\2\57\2\0\32\57\2\0\12\57"+
    "\1\u011c\11\57\5\0\1\56\2\0\1\57\4\0\1\57"+
    "\2\0\1\u011d\1\57\2\0\32\57\2\0\24\57\17\0"+
    "\1\u011e\71\0\1\56\2\0\1\57\4\0\1\57\1\63"+
    "\1\0\2\57\2\0\32\25\2\0\1\u011f\23\25\5\0"+
    "\1\56\2\0\1\57\4\0\1\57\1\63\1\0\2\57"+
    "\2\0\10\25\1\u0120\21\25\2\0\1\57\23\25\5\0"+
    "\1\56\2\0\1\57\4\0\1\57\2\0\2\57\2\0"+
    "\27\57\1\u0121\2\57\2\0\24\57\5\0\1\56\2\0"+
    "\1\57\4\0\1\57\2\0\2\57\2\0\4\57\1\u0122"+
    "\25\57\2\0\24\57\5\0\1\56\2\0\1\57\4\0"+
    "\1\57\1\63\1\0\2\57\2\0\27\25\1\301\2\25"+
    "\2\0\1\57\23\25\5\0\1\56\2\0\1\57\4\0"+
    "\1\57\1\63\1\0\2\57\2\0\22\25\1\u0123\7\25"+
    "\2\0\1\57\23\25\5\0\1\56\2\0\1\57\4\0"+
    "\1\57\2\0\2\57\2\0\22\57\1\u0124\7\57\2\0"+
    "\24\57\5\0\1\56\2\0\1\57\4\0\1\57\1\63"+
    "\1\0\2\57\2\0\10\25\1\u0125\21\25\2\0\1\57"+
    "\23\25\5\0\1\56\2\0\1\57\4\0\1\57\1\63"+
    "\1\0\2\57\2\0\21\25\1\u0126\10\25\2\0\1\57"+
    "\23\25\5\0\1\56\2\0\1\57\4\0\1\57\2\0"+
    "\2\57\2\0\21\57\1\u0127\10\57\2\0\24\57\5\0"+
    "\1\56\2\0\1\57\4\0\1\57\2\0\2\57\2\0"+
    "\16\57\1\u0128\13\57\2\0\24\57\5\0\1\56\2\0"+
    "\1\57\4\0\1\57\1\63\1\0\2\57\2\0\21\25"+
    "\1\u0129\10\25\2\0\1\57\23\25\5\0\1\56\2\0"+
    "\1\57\4\0\1\57\1\63\1\0\2\57\2\0\3\25"+
    "\1\347\26\25\2\0\1\57\23\25\5\0\1\56\2\0"+
    "\1\57\4\0\1\57\1\63\1\0\2\57\2\0\2\25"+
    "\1\u012a\27\25\2\0\1\57\23\25\5\0\1\56\2\0"+
    "\1\57\4\0\1\57\2\0\2\57\2\0\22\57\1\u012b"+
    "\7\57\2\0\24\57\5\0\1\56\2\0\1\57\4\0"+
    "\1\57\1\63\1\0\2\57\2\0\1\u012c\31\25\2\0"+
    "\1\57\23\25\5\0\1\56\2\0\1\57\4\0\1\57"+
    "\2\0\2\57\2\0\2\57\1\u012d\27\57\2\0\24\57"+
    "\5\0\1\56\2\0\1\57\4\0\1\57\2\0\2\57"+
    "\2\0\16\57\1\u012e\13\57\2\0\24\57\5\0\1\56"+
    "\2\0\1\57\4\0\1\57\2\0\2\57\2\0\1\u012f"+
    "\31\57\2\0\24\57\5\0\1\56\2\0\1\57\4\0"+
    "\1\57\1\63\1\0\2\57\2\0\22\25\1\u0130\7\25"+
    "\2\0\1\57\23\25\5\0\1\56\2\0\1\57\4\0"+
    "\1\57\1\63\1\0\2\57\2\0\21\25\1\u0131\10\25"+
    "\2\0\1\57\23\25\5\0\1\56\2\0\1\57\4\0"+
    "\1\57\1\63\1\0\2\57\2\0\3\25\1\u0132\26\25"+
    "\2\0\1\57\23\25\5\0\1\56\2\0\1\57\4\0"+
    "\1\57\1\63\1\0\2\57\2\0\3\25\1\u0133\26\25"+
    "\2\0\1\57\23\25\5\0\1\56\2\0\1\57\4\0"+
    "\1\57\2\0\2\57\2\0\10\57\1\u0134\21\57\2\0"+
    "\24\57\5\0\1\56\2\0\1\57\4\0\1\57\1\63"+
    "\1\0\2\57\2\0\32\25\2\0\1\u0135\23\25\5\0"+
    "\1\56\2\0\1\57\4\0\1\57\2\0\2\57\2\0"+
    "\32\57\2\0\10\57\1\u0136\13\57\17\0\1\u0137\71\0"+
    "\1\56\2\0\1\57\4\0\1\57\2\0\2\57\2\0"+
    "\32\57\2\0\10\57\1\u0138\13\57\10\0\1\u011e\4\0"+
    "\1\u011e\1\0\3\u011e\2\0\32\u011e\2\0\24\u011e\5\0"+
    "\1\56\2\0\1\57\4\0\1\57\2\0\2\57\2\0"+
    "\2\57\1\u0139\27\57\2\0\24\57\5\0\1\56\2\0"+
    "\1\57\4\0\1\57\1\63\1\0\2\57\2\0\16\25"+
    "\1\u013a\13\25\2\0\1\57\23\25\5\0\1\56\2\0"+
    "\1\57\4\0\1\57\2\0\2\57\2\0\23\57\1\u013b"+
    "\6\57\2\0\24\57\5\0\1\56\2\0\1\57\4\0"+
    "\1\57\2\0\2\57\2\0\27\57\1\u013c\2\57\2\0"+
    "\24\57\5\0\1\56\2\0\1\57\4\0\1\57\2\0"+
    "\2\57\2\0\24\57\1\u013d\5\57\2\0\24\57\5\0"+
    "\1\56\2\0\1\57\4\0\1\57\1\63\1\0\2\57"+
    "\2\0\1\u013e\31\25\2\0\1\57\23\25\5\0\1\56"+
    "\2\0\1\57\4\0\1\57\1\63\1\0\2\57\2\0"+
    "\32\25\2\0\1\u013f\23\25\5\0\1\56\2\0\1\57"+
    "\4\0\1\57\2\0\2\57\2\0\4\57\1\u0140\25\57"+
    "\2\0\24\57\5\0\1\56\2\0\1\57\4\0\1\57"+
    "\2\0\2\57\2\0\3\57\1\u0141\26\57\2\0\24\57"+
    "\5\0\1\56\2\0\1\57\4\0\1\57\1\63\1\0"+
    "\2\57\2\0\10\25\1\u0142\21\25\2\0\1\57\23\25"+
    "\5\0\1\56\2\0\1\57\4\0\1\57\1\63\1\0"+
    "\2\57\2\0\1\u0143\31\25\2\0\1\57\23\25\5\0"+
    "\1\56\2\0\1\57\4\0\1\57\2\0\2\57\2\0"+
    "\24\57\1\u0144\5\57\2\0\24\57\5\0\1\56\2\0"+
    "\1\57\4\0\1\57\1\63\1\0\2\57\2\0\21\25"+
    "\1\u0145\10\25\2\0\1\57\23\25\5\0\1\56\2\0"+
    "\1\57\4\0\1\57\2\0\2\57\2\0\1\u0146\31\57"+
    "\2\0\24\57\5\0\1\56\2\0\1\57\4\0\1\57"+
    "\2\0\2\57\2\0\21\57\1\u0147\10\57\2\0\24\57"+
    "\5\0\1\56\2\0\1\57\4\0\1\57\2\0\2\57"+
    "\2\0\22\57\1\u0148\7\57\2\0\24\57\5\0\1\56"+
    "\2\0\1\57\4\0\1\57\1\63\1\0\2\57\2\0"+
    "\16\25\1\u0149\13\25\2\0\1\57\23\25\5\0\1\56"+
    "\2\0\1\57\4\0\1\57\1\63\1\0\2\57\2\0"+
    "\16\25\1\u014a\13\25\2\0\1\57\23\25\5\0\1\56"+
    "\2\0\1\57\4\0\1\57\2\0\2\57\2\0\22\57"+
    "\1\u014b\7\57\2\0\24\57\5\0\1\56\2\0\1\57"+
    "\4\0\1\57\2\0\2\57\2\0\1\u014c\1\57\1\u014d"+
    "\12\57\1\u014e\14\57\2\0\24\57\5\0\1\56\2\0"+
    "\1\57\4\0\1\57\2\0\2\57\2\0\32\57\2\0"+
    "\3\57\1\u014f\20\57\24\0\32\u0150\3\0\23\u0150\5\0"+
    "\1\56\2\0\1\57\4\0\1\57\2\0\2\57\2\0"+
    "\32\57\2\0\3\57\1\u0151\20\57\5\0\1\56\2\0"+
    "\1\57\4\0\1\57\2\0\2\57\2\0\16\57\1\u0152"+
    "\13\57\2\0\24\57\5\0\1\56\2\0\1\57\4\0"+
    "\1\57\1\63\1\0\2\57\2\0\15\25\1\u0153\14\25"+
    "\2\0\1\57\23\25\5\0\1\56\2\0\1\57\4\0"+
    "\1\57\2\0\2\57\2\0\16\57\1\u0154\13\57\2\0"+
    "\24\57\5\0\1\56\2\0\1\57\4\0\1\57\2\0"+
    "\2\57\2\0\23\57\1\u0155\6\57\2\0\24\57\5\0"+
    "\1\56\2\0\1\57\4\0\1\57\2\0\2\57\2\0"+
    "\1\u0156\31\57\2\0\24\57\5\0\1\56\2\0\1\57"+
    "\4\0\1\57\1\63\1\0\2\57\2\0\13\25\1\u0157"+
    "\16\25\2\0\1\57\23\25\5\0\1\56\2\0\1\57"+
    "\4\0\1\57\2\0\2\57\2\0\2\57\1\u0158\2\57"+
    "\1\u0159\16\57\1\u015a\5\57\2\0\24\57\5\0\1\56"+
    "\2\0\1\57\4\0\1\57\2\0\2\57\2\0\1\u015b"+
    "\31\57\2\0\24\57\5\0\1\56\2\0\1\57\4\0"+
    "\1\57\2\0\2\57\2\0\10\57\1\u015c\21\57\2\0"+
    "\24\57\5\0\1\56\2\0\1\57\4\0\1\57\1\63"+
    "\1\0\2\57\2\0\16\25\1\u015d\13\25\2\0\1\57"+
    "\23\25\5\0\1\56\2\0\1\57\4\0\1\57\1\63"+
    "\1\0\2\57\2\0\21\25\1\342\10\25\2\0\1\57"+
    "\23\25\5\0\1\56\2\0\1\57\4\0\1\57\2\0"+
    "\2\57\2\0\1\u015e\31\57\2\0\24\57\5\0\1\56"+
    "\2\0\1\57\4\0\1\57\1\63\1\0\2\57\2\0"+
    "\32\25\2\0\1\u015f\23\25\5\0\1\56\2\0\1\57"+
    "\4\0\1\57\2\0\2\57\2\0\14\57\1\u0160\15\57"+
    "\2\0\24\57\5\0\1\56\2\0\1\57\4\0\1\57"+
    "\2\0\2\57\2\0\14\57\1\u0161\15\57\2\0\24\57"+
    "\5\0\1\56\2\0\1\57\4\0\1\57\2\0\2\57"+
    "\2\0\22\57\1\u0162\7\57\2\0\24\57\5\0\1\56"+
    "\2\0\1\57\4\0\1\57\1\63\1\0\2\57\2\0"+
    "\22\25\1\u0163\7\25\2\0\1\57\23\25\5\0\1\56"+
    "\2\0\1\57\4\0\1\57\2\0\2\57\2\0\10\57"+
    "\1\u0164\21\57\2\0\24\57\5\0\1\56\2\0\1\57"+
    "\4\0\1\57\2\0\2\57\2\0\15\57\1\u0165\14\57"+
    "\2\0\24\57\5\0\1\56\2\0\1\57\4\0\1\57"+
    "\2\0\2\57\2\0\21\57\1\u0166\10\57\2\0\24\57"+
    "\5\0\1\56\2\0\1\57\4\0\1\57\2\0\2\57"+
    "\2\0\24\57\1\u0167\5\57\2\0\24\57\5\0\1\56"+
    "\2\0\1\57\4\0\1\57\2\0\2\57\2\0\32\57"+
    "\2\0\10\57\1\u0168\13\57\16\0\1\63\5\0\32\u0150"+
    "\3\0\23\u0150\5\0\1\56\2\0\1\57\4\0\1\57"+
    "\2\0\2\57\2\0\32\57\2\0\10\57\1\u0169\13\57"+
    "\5\0\1\56\2\0\1\57\4\0\1\57\2\0\2\57"+
    "\2\0\14\57\1\u016a\15\57\2\0\24\57\5\0\1\56"+
    "\2\0\1\57\4\0\1\57\2\0\2\57\2\0\16\57"+
    "\1\u016b\13\57\2\0\24\57\5\0\1\56\2\0\1\57"+
    "\4\0\1\57\2\0\2\57\2\0\21\57\1\u016c\10\57"+
    "\2\0\24\57\5\0\1\56\2\0\1\57\4\0\1\57"+
    "\1\63\1\0\2\57\2\0\4\25\1\u016d\25\25\2\0"+
    "\1\57\23\25\5\0\1\56\2\0\1\57\4\0\1\57"+
    "\2\0\2\57\2\0\16\57\1\u016e\13\57\2\0\24\57"+
    "\5\0\1\56\2\0\1\57\4\0\1\57\2\0\2\57"+
    "\2\0\16\57\1\u016f\13\57\2\0\24\57\5\0\1\56"+
    "\2\0\1\57\4\0\1\57\2\0\2\57\2\0\22\57"+
    "\1\u0170\7\57\2\0\24\57\5\0\1\56\2\0\1\57"+
    "\4\0\1\57\2\0\2\57\2\0\2\57\1\u0171\27\57"+
    "\2\0\24\57\5\0\1\56\2\0\1\57\4\0\1\57"+
    "\2\0\2\57\2\0\5\57\1\u0172\24\57\2\0\24\57"+
    "\5\0\1\56\2\0\1\57\4\0\1\57\2\0\2\57"+
    "\2\0\21\57\1\u0173\10\57\2\0\24\57\5\0\1\56"+
    "\2\0\1\57\4\0\1\57\2\0\2\57\2\0\2\57"+
    "\1\u0174\2\57\1\u0175\16\57\1\u0176\5\57\2\0\24\57"+
    "\5\0\1\56\2\0\1\57\4\0\1\57\2\0\2\57"+
    "\2\0\17\57\1\u0177\12\57\2\0\24\57\5\0\1\56"+
    "\2\0\1\57\4\0\1\57\2\0\2\57\2\0\24\57"+
    "\1\u0178\5\57\2\0\24\57\5\0\1\56\2\0\1\57"+
    "\4\0\1\57\2\0\2\57\2\0\26\57\1\u0179\3\57"+
    "\2\0\24\57\5\0\1\56\2\0\1\57\4\0\1\57"+
    "\1\63\1\0\2\57\2\0\32\25\2\0\1\u017a\23\25"+
    "\5\0\1\56\2\0\1\57\4\0\1\57\2\0\2\57"+
    "\2\0\1\57\1\u017b\30\57\2\0\24\57\5\0\1\56"+
    "\2\0\1\57\4\0\1\57\2\0\2\57\2\0\23\57"+
    "\1\u017c\6\57\2\0\24\57\5\0\1\56\2\0\1\57"+
    "\4\0\1\57\2\0\2\57\2\0\4\57\1\u017d\25\57"+
    "\2\0\24\57\5\0\1\56\2\0\1\57\4\0\1\57"+
    "\2\0\2\57\2\0\4\57\1\u017e\25\57\2\0\24\57"+
    "\5\0\1\56\2\0\1\57\4\0\1\57\2\0\2\57"+
    "\2\0\32\57\2\0\21\57\1\u017f\2\57\5\0\1\56"+
    "\2\0\1\57\4\0\1\57\2\0\2\57\2\0\32\57"+
    "\2\0\21\57\1\u0180\2\57\5\0\1\56\2\0\1\57"+
    "\4\0\1\57\2\0\2\57\2\0\17\57\1\u0181\12\57"+
    "\2\0\24\57\5\0\1\56\2\0\1\57\4\0\1\57"+
    "\2\0\2\57\2\0\10\57\1\u0182\21\57\2\0\24\57"+
    "\5\0\1\56\2\0\1\57\4\0\1\57\1\63\1\0"+
    "\2\57\2\0\22\25\1\u0183\7\25\2\0\1\57\23\25"+
    "\5\0\1\56\2\0\1\57\4\0\1\57\2\0\2\57"+
    "\2\0\14\57\1\u0184\15\57\2\0\24\57\5\0\1\56"+
    "\2\0\1\57\4\0\1\57\2\0\2\57\2\0\21\57"+
    "\1\u0185\10\57\2\0\24\57\5\0\1\56\2\0\1\57"+
    "\4\0\1\57\2\0\2\57\2\0\24\57\1\u0186\5\57"+
    "\2\0\24\57\5\0\1\56\2\0\1\57\4\0\1\57"+
    "\2\0\2\57\2\0\10\57\1\u0187\21\57\2\0\24\57"+
    "\5\0\1\56\2\0\1\57\4\0\1\57\2\0\2\57"+
    "\2\0\10\57\1\u0188\21\57\2\0\24\57\5\0\1\56"+
    "\2\0\1\57\4\0\1\57\2\0\2\57\2\0\10\57"+
    "\1\u0189\21\57\2\0\24\57\5\0\1\56\2\0\1\57"+
    "\4\0\1\57\2\0\2\57\2\0\16\57\1\u018a\13\57"+
    "\2\0\24\57\5\0\1\56\2\0\1\57\4\0\1\57"+
    "\2\0\2\57\2\0\16\57\1\u018b\13\57\2\0\24\57"+
    "\5\0\1\56\2\0\1\57\4\0\1\57\2\0\2\57"+
    "\2\0\22\57\1\u018c\7\57\2\0\24\57\5\0\1\56"+
    "\2\0\1\57\4\0\1\57\2\0\2\57\2\0\16\57"+
    "\1\u018d\13\57\2\0\24\57\5\0\1\56\2\0\1\57"+
    "\4\0\1\57\2\0\2\57\2\0\13\57\1\u018e\16\57"+
    "\2\0\24\57\5\0\1\56\2\0\1\57\4\0\1\57"+
    "\2\0\2\57\2\0\16\57\1\u018f\13\57\2\0\24\57"+
    "\5\0\1\56\2\0\1\57\4\0\1\57\2\0\2\57"+
    "\2\0\2\57\1\u0190\2\57\1\u0191\24\57\2\0\24\57"+
    "\5\0\1\56\2\0\1\57\4\0\1\57\2\0\2\57"+
    "\2\0\13\57\1\u0192\16\57\2\0\24\57\5\0\1\56"+
    "\2\0\1\57\4\0\1\57\2\0\2\57\2\0\10\57"+
    "\1\u0193\21\57\2\0\24\57\5\0\1\56\2\0\1\57"+
    "\4\0\1\57\2\0\2\57\2\0\1\u0194\31\57\2\0"+
    "\24\57\5\0\1\56\2\0\1\57\4\0\1\57\2\0"+
    "\2\57\2\0\25\57\1\u0195\4\57\2\0\24\57\5\0"+
    "\1\56\2\0\1\57\4\0\1\57\2\0\2\57\2\0"+
    "\32\57\2\0\22\57\1\u0196\1\57\5\0\1\56\2\0"+
    "\1\57\4\0\1\57\2\0\2\57\2\0\32\57\2\0"+
    "\22\57\1\u0197\1\57\5\0\1\56\2\0\1\57\4\0"+
    "\1\57\2\0\2\57\2\0\16\57\1\u0198\13\57\2\0"+
    "\24\57\5\0\1\56\2\0\1\57\4\0\1\57\2\0"+
    "\2\57\2\0\16\57\1\u0199\13\57\2\0\24\57\5\0"+
    "\1\56\2\0\1\57\4\0\1\57\1\63\1\0\2\57"+
    "\2\0\32\25\2\0\1\u019a\23\25\5\0\1\56\2\0"+
    "\1\57\4\0\1\57\2\0\2\57\2\0\17\57\1\u019b"+
    "\12\57\2\0\24\57\5\0\1\56\2\0\1\57\4\0"+
    "\1\57\2\0\2\57\2\0\14\57\1\u019c\15\57\2\0"+
    "\24\57\5\0\1\56\2\0\1\57\4\0\1\57\2\0"+
    "\2\57\2\0\1\u019d\31\57\2\0\24\57\5\0\1\56"+
    "\2\0\1\57\4\0\1\57\2\0\2\57\2\0\16\57"+
    "\1\u019e\13\57\2\0\24\57\5\0\1\56\2\0\1\57"+
    "\4\0\1\57\2\0\2\57\2\0\2\57\1\u019f\27\57"+
    "\2\0\24\57\5\0\1\56\2\0\1\57\4\0\1\57"+
    "\2\0\2\57\2\0\16\57\1\u01a0\13\57\2\0\24\57"+
    "\5\0\1\56\2\0\1\57\4\0\1\57\2\0\2\57"+
    "\2\0\14\57\1\u01a1\15\57\2\0\24\57\5\0\1\56"+
    "\2\0\1\57\4\0\1\57\2\0\2\57\2\0\21\57"+
    "\1\u01a2\10\57\2\0\24\57\5\0\1\56\2\0\1\57"+
    "\4\0\1\57\2\0\2\57\2\0\24\57\1\u01a3\5\57"+
    "\2\0\24\57\5\0\1\56\2\0\1\57\4\0\1\57"+
    "\2\0\2\57\2\0\1\u01a4\31\57\2\0\24\57\5\0"+
    "\1\56\2\0\1\57\4\0\1\57\2\0\2\57\2\0"+
    "\21\57\1\u01a5\10\57\2\0\24\57\5\0\1\56\2\0"+
    "\1\57\4\0\1\57\2\0\2\57\2\0\16\57\1\u01a6"+
    "\13\57\2\0\24\57\5\0\1\56\2\0\1\57\4\0"+
    "\1\57\2\0\2\57\2\0\16\57\1\u01a7\13\57\2\0"+
    "\24\57\5\0\1\56\2\0\1\57\4\0\1\57\2\0"+
    "\2\57\2\0\4\57\1\u01a8\25\57\2\0\24\57\5\0"+
    "\1\56\2\0\1\57\4\0\1\57\2\0\2\57\2\0"+
    "\6\57\1\u01a9\23\57\2\0\24\57\5\0\1\56\2\0"+
    "\1\57\4\0\1\57\2\0\2\57\2\0\2\57\1\u01aa"+
    "\27\57\2\0\24\57\5\0\1\56\2\0\1\57\4\0"+
    "\1\57\2\0\2\57\2\0\16\57\1\u01ab\13\57\2\0"+
    "\24\57\5\0\1\56\2\0\1\57\4\0\1\57\2\0"+
    "\2\57\2\0\32\57\2\0\4\57\1\u01ac\17\57\5\0"+
    "\1\56\2\0\1\57\4\0\1\57\2\0\2\57\2\0"+
    "\32\57\2\0\4\57\1\u01ad\17\57\5\0\1\56\2\0"+
    "\1\57\4\0\1\57\2\0\2\57\2\0\15\57\1\u01ae"+
    "\14\57\2\0\24\57\5\0\1\56\2\0\1\57\4\0"+
    "\1\57\2\0\2\57\2\0\24\57\1\u01af\5\57\2\0"+
    "\24\57\5\0\1\56\2\0\1\57\4\0\1\57\2\0"+
    "\2\57\2\0\16\57\1\u01b0\13\57\2\0\24\57\5\0"+
    "\1\56\2\0\1\57\4\0\1\57\2\0\2\57\2\0"+
    "\24\57\1\u01b1\5\57\2\0\24\57\5\0\1\56\2\0"+
    "\1\57\4\0\1\57\2\0\2\57\2\0\21\57\1\u01b2"+
    "\10\57\2\0\24\57\5\0\1\56\2\0\1\57\4\0"+
    "\1\57\2\0\2\57\2\0\15\57\1\u01b3\14\57\2\0"+
    "\24\57\5\0\1\56\2\0\1\57\4\0\1\57\2\0"+
    "\2\57\2\0\1\u01b4\31\57\2\0\24\57\5\0\1\56"+
    "\2\0\1\57\4\0\1\57\2\0\2\57\2\0\17\57"+
    "\1\u01b5\12\57\2\0\24\57\5\0\1\56\2\0\1\57"+
    "\4\0\1\57\2\0\2\57\2\0\14\57\1\u01b6\15\57"+
    "\2\0\24\57\5\0\1\56\2\0\1\57\4\0\1\57"+
    "\2\0\2\57\2\0\1\u01b7\31\57\2\0\24\57\5\0"+
    "\1\56\2\0\1\57\4\0\1\57\2\0\2\57\2\0"+
    "\21\57\1\u01b8\10\57\2\0\24\57\5\0\1\56\2\0"+
    "\1\57\4\0\1\57\2\0\2\57\2\0\3\57\1\u01b9"+
    "\26\57\2\0\24\57\5\0\1\56\2\0\1\57\4\0"+
    "\1\57\2\0\2\57\2\0\14\57\1\u01ba\15\57\2\0"+
    "\24\57\5\0\1\56\2\0\1\57\4\0\1\57\2\0"+
    "\2\57\2\0\21\57\1\u01bb\10\57\2\0\24\57\5\0"+
    "\1\56\2\0\1\57\4\0\1\57\2\0\2\57\2\0"+
    "\24\57\1\u01bc\5\57\2\0\24\57\5\0\1\56\2\0"+
    "\1\57\4\0\1\57\2\0\2\57\2\0\10\57\1\u01bd"+
    "\21\57\2\0\24\57\5\0\1\56\2\0\1\57\4\0"+
    "\1\57\2\0\2\57\2\0\32\57\2\0\5\57\1\u01be"+
    "\16\57\5\0\1\56\2\0\1\57\4\0\1\57\2\0"+
    "\1\57\1\u01bf\2\0\32\57\2\0\5\57\1\u01c0\16\57"+
    "\5\0\1\56\2\0\1\57\4\0\1\57\2\0\2\57"+
    "\2\0\4\57\1\u01c1\25\57\2\0\24\57\5\0\1\56"+
    "\2\0\1\57\4\0\1\57\2\0\2\57\2\0\22\57"+
    "\1\u01c2\7\57\2\0\24\57\5\0\1\56\2\0\1\57"+
    "\4\0\1\57\2\0\2\57\2\0\15\57\1\u01c3\14\57"+
    "\2\0\24\57\5\0\1\56\2\0\1\57\4\0\1\57"+
    "\2\0\2\57\2\0\13\57\1\u01c4\16\57\2\0\24\57"+
    "\5\0\1\56\2\0\1\57\4\0\1\57\2\0\2\57"+
    "\2\0\10\57\1\u01c5\21\57\2\0\24\57\5\0\1\56"+
    "\2\0\1\57\4\0\1\57\2\0\2\57\2\0\2\57"+
    "\1\u01c6\27\57\2\0\24\57\5\0\1\56\2\0\1\57"+
    "\4\0\1\57\2\0\2\57\2\0\16\57\1\u01c7\13\57"+
    "\2\0\24\57\5\0\1\56\2\0\1\57\4\0\1\57"+
    "\2\0\2\57\2\0\24\57\1\u01c8\5\57\2\0\24\57"+
    "\5\0\1\56\2\0\1\57\4\0\1\57\2\0\2\57"+
    "\2\0\21\57\1\u01c9\10\57\2\0\24\57\5\0\1\56"+
    "\2\0\1\57\4\0\1\57\2\0\2\57\2\0\10\57"+
    "\1\u01ca\21\57\2\0\24\57\5\0\1\56\2\0\1\57"+
    "\4\0\1\57\2\0\2\57\2\0\17\57\1\u01cb\12\57"+
    "\2\0\24\57\5\0\1\56\2\0\1\57\4\0\1\57"+
    "\2\0\2\57\2\0\14\57\1\u01cc\15\57\2\0\24\57"+
    "\5\0\1\56\2\0\1\57\4\0\1\57\2\0\2\57"+
    "\2\0\16\57\1\u01cd\13\57\2\0\24\57\5\0\1\56"+
    "\2\0\1\57\4\0\1\57\2\0\2\57\2\0\16\57"+
    "\1\u01ce\13\57\2\0\24\57\5\0\1\56\2\0\1\57"+
    "\4\0\1\57\2\0\2\57\2\0\32\57\2\0\20\57"+
    "\1\u01cf\3\57\5\0\1\56\2\0\1\57\4\0\1\57"+
    "\2\0\2\57\2\0\32\57\2\0\20\57\1\u01d0\3\57"+
    "\5\0\1\56\2\0\1\57\4\0\1\57\2\0\2\57"+
    "\2\0\15\57\1\u01d1\14\57\2\0\24\57\5\0\1\56"+
    "\2\0\1\57\4\0\1\57\2\0\2\57\2\0\24\57"+
    "\1\u01d2\5\57\2\0\24\57\5\0\1\56\2\0\1\57"+
    "\4\0\1\57\2\0\2\57\2\0\4\57\1\u01d3\25\57"+
    "\2\0\24\57\5\0\1\56\2\0\1\57\4\0\1\57"+
    "\2\0\2\57\2\0\1\u01d4\31\57\2\0\24\57\5\0"+
    "\1\56\2\0\1\57\4\0\1\57\2\0\2\57\2\0"+
    "\16\57\1\u01d5\13\57\2\0\24\57\5\0\1\56\2\0"+
    "\1\57\4\0\1\57\2\0\2\57\2\0\10\57\1\u01d6"+
    "\21\57\2\0\24\57\5\0\1\56\2\0\1\57\4\0"+
    "\1\57\2\0\2\57\2\0\15\57\1\u01d7\14\57\2\0"+
    "\24\57\5\0\1\56\2\0\1\57\4\0\1\57\2\0"+
    "\2\57\2\0\13\57\1\u01d8\16\57\2\0\24\57\5\0"+
    "\1\56\2\0\1\57\4\0\1\57\2\0\2\57\2\0"+
    "\10\57\1\u01d9\21\57\2\0\24\57\5\0\1\56\2\0"+
    "\1\57\4\0\1\57\2\0\2\57\2\0\16\57\1\u01da"+
    "\13\57\2\0\24\57\5\0\1\56\2\0\1\57\4\0"+
    "\1\57\2\0\2\57\2\0\16\57\1\u01db\13\57\2\0"+
    "\24\57\5\0\1\56\2\0\1\57\4\0\1\57\2\0"+
    "\2\57\2\0\24\57\1\u01dc\5\57\2\0\24\57\5\0"+
    "\1\56\2\0\1\57\4\0\1\57\2\0\2\57\2\0"+
    "\15\57\1\u01dd\14\57\2\0\24\57\5\0\1\56\2\0"+
    "\1\57\4\0\1\57\2\0\2\57\2\0\23\57\1\u01de"+
    "\6\57\2\0\24\57\5\0\1\56\2\0\1\57\4\0"+
    "\1\57\2\0\2\57\2\0\1\u01df\31\57\2\0\24\57"+
    "\5\0\1\56\2\0\1\57\4\0\1\57\2\0\2\57"+
    "\2\0\15\57\1\u01e0\14\57\2\0\24\57\5\0\1\56"+
    "\2\0\1\57\4\0\1\57\2\0\2\57\2\0\21\57"+
    "\1\u01e1\10\57\2\0\24\57\5\0\1\56\2\0\1\57"+
    "\4\0\1\57\2\0\2\57\2\0\16\57\1\u01e2\13\57"+
    "\2\0\24\57\5\0\1\56\2\0\1\57\4\0\1\57"+
    "\2\0\2\57\2\0\4\57\1\u01e3\25\57\2\0\24\57"+
    "\5\0\1\56\2\0\1\57\4\0\1\57\2\0\2\57"+
    "\2\0\1\u01e4\31\57\2\0\24\57\5\0\1\56\2\0"+
    "\1\57\4\0\1\57\2\0\2\57\2\0\16\57\1\u01e5"+
    "\13\57\2\0\24\57\5\0\1\56\2\0\1\57\4\0"+
    "\1\57\2\0\2\57\2\0\15\57\1\u01e6\14\57\2\0"+
    "\24\57\5\0\1\56\2\0\1\57\4\0\1\57\2\0"+
    "\2\57\2\0\13\57\1\u01e7\16\57\2\0\24\57\5\0"+
    "\1\56\2\0\1\57\4\0\1\57\2\0\2\57\2\0"+
    "\4\57\1\u01e8\25\57\2\0\24\57\5\0\1\56\2\0"+
    "\1\57\4\0\1\57\2\0\2\57\2\0\21\57\1\u01e9"+
    "\10\57\2\0\24\57\5\0\1\56\2\0\1\57\4\0"+
    "\1\57\2\0\2\57\2\0\23\57\1\u01ea\6\57\2\0"+
    "\24\57\5\0\1\56\2\0\1\57\4\0\1\57\2\0"+
    "\2\57\2\0\10\57\1\u01eb\21\57\2\0\24\57\5\0"+
    "\1\56\2\0\1\57\4\0\1\57\2\0\2\57\2\0"+
    "\15\57\1\u01ec\14\57\2\0\24\57\5\0\1\56\2\0"+
    "\1\57\4\0\1\57\2\0\2\57\2\0\15\57\1\u01ed"+
    "\14\57\2\0\24\57\5\0\1\56\2\0\1\57\4\0"+
    "\1\57\2\0\2\57\2\0\21\57\1\u01ee\10\57\2\0"+
    "\24\57\5\0\1\56\2\0\1\57\4\0\1\57\2\0"+
    "\2\57\2\0\4\57\1\u01ef\25\57\2\0\24\57\5\0"+
    "\1\56\2\0\1\57\4\0\1\57\2\0\2\57\2\0"+
    "\1\u01f0\31\57\2\0\24\57\5\0\1\56\2\0\1\57"+
    "\4\0\1\57\2\0\2\57\2\0\10\57\1\u01f1\21\57"+
    "\2\0\24\57\5\0\1\56\2\0\1\57\4\0\1\57"+
    "\2\0\2\57\2\0\4\57\1\u01f2\25\57\2\0\24\57"+
    "\5\0\1\56\2\0\1\57\4\0\1\57\2\0\2\57"+
    "\2\0\16\57\1\u01f3\13\57\2\0\24\57\5\0\1\56"+
    "\2\0\1\57\4\0\1\57\2\0\2\57\2\0\23\57"+
    "\1\u01f4\6\57\2\0\24\57\5\0\1\56\2\0\1\57"+
    "\4\0\1\57\2\0\2\57\2\0\10\57\1\u01f5\21\57"+
    "\2\0\24\57\5\0\1\56\2\0\1\57\4\0\1\57"+
    "\2\0\2\57\2\0\15\57\1\u01f6\14\57\2\0\24\57"+
    "\5\0\1\56\2\0\1\57\4\0\1\57\2\0\2\57"+
    "\2\0\21\57\1\u01f7\10\57\2\0\24\57\5\0\1\56"+
    "\2\0\1\57\4\0\1\57\2\0\2\57\2\0\16\57"+
    "\1\u01f8\13\57\2\0\24\57\5\0\1\56\2\0\1\57"+
    "\4\0\1\57\2\0\2\57\2\0\4\57\1\u01f9\25\57"+
    "\2\0\24\57\5\0\1\56\2\0\1\57\4\0\1\57"+
    "\2\0\2\57\2\0\16\57\1\u01fa\13\57\2\0\24\57"+
    "\5\0\1\56\2\0\1\57\4\0\1\57\2\0\2\57"+
    "\2\0\23\57\1\u01fb\6\57\2\0\24\57\5\0\1\56"+
    "\2\0\1\57\4\0\1\57\2\0\2\57\2\0\10\57"+
    "\1\u01fc\21\57\2\0\24\57\5\0\1\56\2\0\1\57"+
    "\4\0\1\57\2\0\2\57\2\0\4\57\1\u01fd\25\57"+
    "\2\0\24\57\5\0\1\56\2\0\1\57\4\0\1\57"+
    "\2\0\2\57\2\0\16\57\1\u01fe\13\57\2\0\24\57"+
    "\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[30532];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\1\1\0\1\11\2\1\3\11\4\1\1\11"+
    "\23\1\2\11\6\1\1\11\1\1\2\11\1\0\1\1"+
    "\1\0\1\1\1\11\1\0\55\1\1\0\55\1\1\0"+
    "\47\1\1\0\45\1\1\0\41\1\1\0\33\1\1\0"+
    "\33\1\1\0\30\1\1\0\256\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[510];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    private Symbol symbol(int type, Object value){
        return new Symbol(type, yyline, yycolumn, value);
    }
    private Symbol symbol(int type){
        return new Symbol(type, yyline, yycolumn);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    return ZZ_CMAP[input];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { /*Ignore*/
            }
            // fall through
          case 70: break;
          case 2:
            { return new Symbol(sym.COMILLAS, yycolumn, yyline, yytext());
            }
            // fall through
          case 71: break;
          case 3:
            { return new Symbol(sym.USUARIO,yycolumn,yyline,yytext());
            }
            // fall through
          case 72: break;
          case 4:
            { return new Symbol(sym.ID,yycolumn,yyline,yytext());
            }
            // fall through
          case 73: break;
          case 5:
            { return new Symbol(sym.Parentesis_a, yycolumn, yyline, yytext());
            }
            // fall through
          case 74: break;
          case 6:
            { return new Symbol(sym.Parentesis_c, yycolumn, yyline, yytext());
            }
            // fall through
          case 75: break;
          case 7:
            { return new Symbol(sym.COMA, yycolumn, yyline, yytext());
            }
            // fall through
          case 76: break;
          case 8:
            { return new Symbol(sym.NUMERO, yycolumn, yyline, yytext());
            }
            // fall through
          case 77: break;
          case 9:
            { return new Symbol(sym.DOSP, yycolumn, yyline, yytext());
            }
            // fall through
          case 78: break;
          case 10:
            { return new Symbol(sym.MENORQ,yycolumn,yyline,yytext());
            }
            // fall through
          case 79: break;
          case 11:
            { return new Symbol(sym.MAYORQ,yycolumn,yyline,yytext());
            }
            // fall through
          case 80: break;
          case 12:
            { return new Symbol(sym.CORCHETEA, yycolumn, yyline, yytext());
            }
            // fall through
          case 81: break;
          case 13:
            { return new Symbol(sym.CORCHETEC, yycolumn, yyline, yytext());
            }
            // fall through
          case 82: break;
          case 14:
            { return new Symbol(sym.LLAVEA, yycolumn, yyline, yytext());
            }
            // fall through
          case 83: break;
          case 15:
            { return new Symbol(sym.OR,yycolumn,yyline,yytext());
            }
            // fall through
          case 84: break;
          case 16:
            { return new Symbol(sym.LLAVEC, yycolumn, yyline, yytext());
            }
            // fall through
          case 85: break;
          case 17:
            { return new Symbol(sym.FINE,yycolumn,yyline,yytext());
            }
            // fall through
          case 86: break;
          case 18:
            { return new Symbol(sym.INICIOE,yycolumn,yyline,yytext());
            }
            // fall through
          case 87: break;
          case 19:
            { return new Symbol(sym.IDP,yycolumn,yyline,yytext());
            }
            // fall through
          case 88: break;
          case 20:
            { return new Symbol(sym.BOOL,yycolumn,yyline,yytext());
            }
            // fall through
          case 89: break;
          case 21:
            { return new Symbol(sym.TITULO, yycolumn, yyline, yytext());
            }
            // fall through
          case 90: break;
          case 22:
            { return new Symbol(sym.URLC,yycolumn,yyline,yytext());
            }
            // fall through
          case 91: break;
          case 23:
            { return new Symbol(sym.TEMA,yycolumn,yyline,yytext());
            }
            // fall through
          case 92: break;
          case 24:
            { return new Symbol(sym.TEMAP,yycolumn,yyline,yytext());
            }
            // fall through
          case 93: break;
          case 25:
            { return new Symbol(sym.CLASEBOTON,yycolumn,yyline,yytext());
            }
            // fall through
          case 94: break;
          case 26:
            { return new Symbol(sym.CLASE,yycolumn,yyline,yytext());
            }
            // fall through
          case 95: break;
          case 27:
            { return new Symbol(sym.CLASEOPCIONES,yycolumn,yyline,yytext());
            }
            // fall through
          case 96: break;
          case 28:
            { return new Symbol(sym.FILAS,yycolumn,yyline,yytext());
            }
            // fall through
          case 97: break;
          case 29:
            { return new Symbol(sym.ALINEA,yycolumn,yyline,yytext());
            }
            // fall through
          case 98: break;
          case 30:
            { return new Symbol(sym.CLASEIMAGEN,yycolumn,yyline,yytext());
            }
            // fall through
          case 99: break;
          case 31:
            { return new Symbol(sym.INDICEC,yycolumn,yyline,yytext());
            }
            // fall through
          case 100: break;
          case 32:
            { return new Symbol(sym.NOMBREP,yycolumn,yyline,yytext());
            }
            // fall through
          case 101: break;
          case 33:
            { return new Symbol(sym.TITULOP,yycolumn,yyline,yytext());
            }
            // fall through
          case 102: break;
          case 34:
            { return new Symbol(sym.CLASENORMAL,yycolumn,yyline,yytext());
            }
            // fall through
          case 103: break;
          case 35:
            { return new Symbol(sym.USUARIOP,yycolumn,yyline,yytext());
            }
            // fall through
          case 104: break;
          case 36:
            { return new Symbol(sym.FECHA,yycolumn,yyline,yytext());
            }
            // fall through
          case 105: break;
          case 37:
            { return new Symbol(sym.URL, yycolumn,yyline,yytext());
            }
            // fall through
          case 106: break;
          case 38:
            { return new Symbol(sym.COLUMNAS,yycolumn,yyline,yytext());
            }
            // fall through
          case 107: break;
          case 39:
            { return new Symbol(sym.OPCIONES,yycolumn,yyline,yytext());
            }
            // fall through
          case 108: break;
          case 40:
            { return new Symbol(sym.CONTRAP,yycolumn,yyline,yytext());
            }
            // fall through
          case 109: break;
          case 41:
            { return new Symbol(sym.REQUERIDO,yycolumn,yyline,yytext());
            }
            // fall through
          case 110: break;
          case 42:
            { return new Symbol(sym.ALINEAC,yycolumn,yyline,yytext());
            }
            // fall through
          case 111: break;
          case 43:
            { return new Symbol(sym.CLASEAREA,yycolumn,yyline,yytext());
            }
            // fall through
          case 112: break;
          case 44:
            { return new Symbol(sym.FORMULARIOC,yycolumn,yyline,yytext());
            }
            // fall through
          case 113: break;
          case 45:
            { return new Symbol(sym.NOMBREC,yycolumn,yyline,yytext());
            }
            // fall through
          case 114: break;
          case 46:
            { return new Symbol(sym.CREARU,yycolumn,yyline,yytext());
            }
            // fall through
          case 115: break;
          case 47:
            { return new Symbol(sym.LOGINU,yycolumn,yyline,yytext());
            }
            // fall through
          case 116: break;
          case 48:
            { return new Symbol(sym.TEXTOVC,yycolumn,yyline,yytext());
            }
            // fall through
          case 117: break;
          case 49:
            { return new Symbol(sym.USUARIONP,yycolumn,yyline,yytext());
            }
            // fall through
          case 118: break;
          case 50:
            { return new Symbol(sym.FINS,yycolumn,yyline,yytext());
            }
            // fall through
          case 119: break;
          case 51:
            { return new Symbol(sym.FECHACP,yycolumn,yyline,yytext());
            }
            // fall through
          case 120: break;
          case 52:
            { return new Symbol(sym.NUEVOP,yycolumn,yyline,yytext());
            }
            // fall through
          case 121: break;
          case 53:
            { return new Symbol(sym.INICIOS, yycolumn, yyline, yytext());
            }
            // fall through
          case 122: break;
          case 54:
            { return new Symbol(sym.USUARIOAP,yycolumn,yyline,yytext());
            }
            // fall through
          case 123: break;
          case 55:
            { return new Symbol(sym.FINSOLICITUDES, yycolumn, yyline, yytext());
            }
            // fall through
          case 124: break;
          case 56:
            { return new Symbol(sym.SOLICITUDESP, yycolumn, yyline, yytext());
            }
            // fall through
          case 125: break;
          case 57:
            { return new Symbol(sym.ELIMINARU,yycolumn,yyline,yytext());
            }
            // fall through
          case 126: break;
          case 58:
            { return new Symbol(sym.NUEVOFP,yycolumn,yyline,yytext());
            }
            // fall through
          case 127: break;
          case 59:
            { return new Symbol(sym.USUARIOCP,yycolumn,yyline,yytext());
            }
            // fall through
          case 128: break;
          case 60:
            { return new Symbol(sym.MODIFICARU,yycolumn,yyline,yytext());
            }
            // fall through
          case 129: break;
          case 61:
            { return new Symbol(sym.AGREGARC,yycolumn,yyline,yytext());
            }
            // fall through
          case 130: break;
          case 62:
            { return new Symbol(sym.FECHAMP,yycolumn,yyline,yytext());
            }
            // fall through
          case 131: break;
          case 63:
            { return new Symbol(sym.ELIMINARC,yycolumn,yyline,yytext());
            }
            // fall through
          case 132: break;
          case 64:
            { return new Symbol(sym.ELIMINARF,yycolumn,yyline,yytext());
            }
            // fall through
          case 133: break;
          case 65:
            { return new Symbol(sym.CREDENCIALES,yycolumn,yyline,yytext());
            }
            // fall through
          case 134: break;
          case 66:
            { return new Symbol(sym.MODIFICARC,yycolumn,yyline,yytext());
            }
            // fall through
          case 135: break;
          case 67:
            { return new Symbol(sym.MODIFICARF,yycolumn,yyline,yytext());
            }
            // fall through
          case 136: break;
          case 68:
            { return new Symbol(sym.PARAMC,yycolumn,yyline,yytext());
            }
            // fall through
          case 137: break;
          case 69:
            { return new Symbol(sym.PARAMF,yycolumn,yyline,yytext());
            }
            // fall through
          case 138: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
