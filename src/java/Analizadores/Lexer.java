// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/Analizadores/Lexer.flex

package Analizadores;
import java_cup.runtime.Symbol;

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int CONSULTA = 2;
  public static final int STRING = 4;
  public static final int RESTRICCION = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /**
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  0,  0,  1,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     2,  3,  4,  5,  6,  5,  5,  7,  8,  9,  0,  0, 10, 11, 12, 13, 
    14, 15, 16, 17, 18, 18, 18, 18, 18, 19, 20,  0, 21, 22, 23,  0, 
     5, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 
    39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50,  0, 51,  0, 52, 
     0, 53, 54, 55, 56, 57, 58, 48, 59, 60, 48, 61, 62, 63, 64, 65, 
    66, 48, 67, 68, 69, 70, 48, 71, 48, 48, 48, 72, 73, 74,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\1\2\1\0\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\2\0\1\12\1\13\1\14\1\15"+
    "\1\1\1\16\1\17\1\20\2\17\1\21\1\17\1\22"+
    "\2\23\26\17\1\24\1\25\2\23\1\10\1\26\1\11"+
    "\3\17\1\27\1\30\1\31\2\0\1\32\1\17\1\0"+
    "\1\17\1\23\1\0\21\17\1\33\6\17\1\34\6\17"+
    "\1\34\6\17\1\35\1\36\1\37\2\17\1\40\2\0"+
    "\1\17\1\41\1\23\1\0\45\17\1\42\3\17\1\35"+
    "\1\43\1\44\2\0\1\17\1\23\1\0\3\17\1\45"+
    "\35\17\1\46\4\17\2\0\1\47\1\17\1\0\3\17"+
    "\1\50\3\17\1\51\1\17\1\52\7\17\1\53\22\17"+
    "\2\0\2\17\1\0\4\17\1\54\12\17\1\55\1\56"+
    "\4\17\1\57\7\17\1\60\2\17\2\0\1\17\1\0"+
    "\14\17\1\61\14\17\1\0\1\17\1\62\3\0\1\17"+
    "\1\63\4\17\1\64\15\17\1\65\1\17\1\66\1\17"+
    "\1\41\2\17\3\0\11\17\1\67\15\17\1\70\1\41"+
    "\4\17\3\0\1\71\1\17\1\72\1\73\1\17\1\74"+
    "\10\17\1\75\6\17\1\0\4\17\2\0\1\17\1\61"+
    "\20\17\1\41\4\17\2\0\15\17\1\76\4\17\1\41"+
    "\4\17\1\77\1\0\2\17\1\100\6\17\1\101\7\17"+
    "\1\41\1\102\2\17\1\103\1\0\1\104\1\0\6\17"+
    "\1\105\5\17\1\106\2\17\1\107\2\17\1\110\1\111"+
    "\1\17\1\112\13\17\1\113\5\17\1\114\4\17\1\115"+
    "\2\17\1\116\7\17\1\117\2\17\1\120\3\17\1\121"+
    "\5\17\1\122\1\123\4\17\1\124\1\125\1\126\2\17"+
    "\1\127\1\130";

  private static int [] zzUnpackAction() {
    int [] result = new int[570];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\113\0\226\0\341\0\u012c\0\u0177\0\u01c2\0\u020d"+
    "\0\u020d\0\u020d\0\u020d\0\u020d\0\u0258\0\u020d\0\u02a3\0\u02ee"+
    "\0\u020d\0\u020d\0\u020d\0\u020d\0\u0339\0\u020d\0\u0384\0\u03cf"+
    "\0\u041a\0\u0465\0\u020d\0\u04b0\0\u020d\0\u04fb\0\u0546\0\u0591"+
    "\0\u05dc\0\u0627\0\u0672\0\u06bd\0\u0708\0\u0753\0\u079e\0\u07e9"+
    "\0\u0834\0\u087f\0\u08ca\0\u0915\0\u0960\0\u09ab\0\u09f6\0\u0a41"+
    "\0\u0a8c\0\u0ad7\0\u0b22\0\u0b6d\0\u0bb8\0\u012c\0\u020d\0\u0c03"+
    "\0\u0c4e\0\u0c99\0\u020d\0\u0ce4\0\u0d2f\0\u0d7a\0\u0dc5\0\u020d"+
    "\0\u020d\0\u020d\0\u0e10\0\u0e5b\0\u020d\0\u0ea6\0\u0ef1\0\u0f3c"+
    "\0\u0f87\0\u0fd2\0\u101d\0\u1068\0\u10b3\0\u10fe\0\u1149\0\u1194"+
    "\0\u11df\0\u122a\0\u1275\0\u12c0\0\u130b\0\u1356\0\u13a1\0\u13ec"+
    "\0\u1437\0\u1482\0\u14cd\0\u0753\0\u1518\0\u1563\0\u15ae\0\u15f9"+
    "\0\u1644\0\u168f\0\u16da\0\u1725\0\u1770\0\u17bb\0\u1806\0\u1851"+
    "\0\u189c\0\u0753\0\u18e7\0\u1932\0\u197d\0\u19c8\0\u1a13\0\u1a5e"+
    "\0\u1aa9\0\u020d\0\u020d\0\u1af4\0\u1b3f\0\u0384\0\u1b8a\0\u1bd5"+
    "\0\u1c20\0\u0ef1\0\u1c6b\0\u1cb6\0\u1d01\0\u1d4c\0\u1d97\0\u1de2"+
    "\0\u1e2d\0\u1e78\0\u1ec3\0\u1f0e\0\u1f59\0\u1fa4\0\u1fef\0\u203a"+
    "\0\u2085\0\u20d0\0\u211b\0\u2166\0\u21b1\0\u21fc\0\u2247\0\u2292"+
    "\0\u22dd\0\u2328\0\u2373\0\u23be\0\u2409\0\u2454\0\u249f\0\u24ea"+
    "\0\u2535\0\u2580\0\u25cb\0\u2616\0\u2661\0\u26ac\0\u26f7\0\u2742"+
    "\0\u278d\0\u0753\0\u27d8\0\u2823\0\u286e\0\u28b9\0\u0384\0\u0384"+
    "\0\u2904\0\u294f\0\u299a\0\u29e5\0\u2a30\0\u2a7b\0\u2ac6\0\u2b11"+
    "\0\u0753\0\u2b5c\0\u2ba7\0\u2bf2\0\u2c3d\0\u2c88\0\u2cd3\0\u2d1e"+
    "\0\u2d69\0\u2db4\0\u2dff\0\u2e4a\0\u2e95\0\u2ee0\0\u2f2b\0\u2f76"+
    "\0\u2fc1\0\u300c\0\u3057\0\u30a2\0\u30ed\0\u3138\0\u3183\0\u31ce"+
    "\0\u3219\0\u3264\0\u32af\0\u32fa\0\u3345\0\u3390\0\u0753\0\u33db"+
    "\0\u3426\0\u3471\0\u34bc\0\u3507\0\u3552\0\u0384\0\u359d\0\u35e8"+
    "\0\u3633\0\u367e\0\u36c9\0\u0753\0\u3714\0\u375f\0\u37aa\0\u0753"+
    "\0\u37f5\0\u0753\0\u3840\0\u388b\0\u38d6\0\u3921\0\u396c\0\u39b7"+
    "\0\u3a02\0\u0753\0\u3a4d\0\u3a98\0\u3ae3\0\u3b2e\0\u3b79\0\u3bc4"+
    "\0\u3c0f\0\u3c5a\0\u3ca5\0\u3cf0\0\u3d3b\0\u3d86\0\u3dd1\0\u3e1c"+
    "\0\u3e67\0\u3eb2\0\u3efd\0\u3f48\0\u3f93\0\u3fde\0\u4029\0\u4074"+
    "\0\u40bf\0\u410a\0\u4155\0\u41a0\0\u41eb\0\u0753\0\u4236\0\u4281"+
    "\0\u42cc\0\u4317\0\u4362\0\u43ad\0\u43f8\0\u4443\0\u448e\0\u44d9"+
    "\0\u0753\0\u0753\0\u4524\0\u456f\0\u45ba\0\u4605\0\u4650\0\u469b"+
    "\0\u46e6\0\u4731\0\u477c\0\u47c7\0\u4812\0\u485d\0\u0753\0\u48a8"+
    "\0\u48f3\0\u493e\0\u4989\0\u49d4\0\u4a1f\0\u4a6a\0\u4ab5\0\u4b00"+
    "\0\u4b4b\0\u4b96\0\u4be1\0\u4c2c\0\u4c77\0\u4cc2\0\u4d0d\0\u4d58"+
    "\0\u4da3\0\u0753\0\u4dee\0\u4e39\0\u4e84\0\u4ecf\0\u4f1a\0\u4f65"+
    "\0\u4fb0\0\u4ffb\0\u5046\0\u5091\0\u50dc\0\u5127\0\u5172\0\u51bd"+
    "\0\u5208\0\u5253\0\u529e\0\u52e9\0\u5334\0\u537f\0\u53ca\0\u5415"+
    "\0\u5460\0\u54ab\0\u0753\0\u54f6\0\u5541\0\u558c\0\u55d7\0\u5622"+
    "\0\u566d\0\u56b8\0\u5703\0\u574e\0\u5799\0\u57e4\0\u582f\0\u587a"+
    "\0\u0753\0\u58c5\0\u0753\0\u5910\0\u595b\0\u59a6\0\u59f1\0\u5a3c"+
    "\0\u5a87\0\u5ad2\0\u5b1d\0\u5b68\0\u5bb3\0\u5bfe\0\u5c49\0\u5c94"+
    "\0\u5cdf\0\u5d2a\0\u5d75\0\u0753\0\u5dc0\0\u5e0b\0\u5e56\0\u5ea1"+
    "\0\u5eec\0\u5f37\0\u5f82\0\u5fcd\0\u6018\0\u6063\0\u60ae\0\u60f9"+
    "\0\u6144\0\u0753\0\u618f\0\u61da\0\u6225\0\u6270\0\u62bb\0\u6306"+
    "\0\u6351\0\u639c\0\u0f3c\0\u63e7\0\u0753\0\u0f3c\0\u6432\0\u5d2a"+
    "\0\u647d\0\u64c8\0\u6513\0\u655e\0\u65a9\0\u65f4\0\u663f\0\u668a"+
    "\0\u0753\0\u66d5\0\u6720\0\u676b\0\u67b6\0\u6801\0\u684c\0\u6897"+
    "\0\u68e2\0\u692d\0\u6978\0\u69c3\0\u6a0e\0\u6a59\0\u6aa4\0\u0f3c"+
    "\0\u6aef\0\u6b3a\0\u6b85\0\u6bd0\0\u6c1b\0\u6c66\0\u6cb1\0\u6cfc"+
    "\0\u6d47\0\u6d92\0\u6ddd\0\u6e28\0\u6e73\0\u6ebe\0\u6f09\0\u6f54"+
    "\0\u6f9f\0\u6fea\0\u7035\0\u7080\0\u70cb\0\u7116\0\u7161\0\u71ac"+
    "\0\u71f7\0\u7242\0\u728d\0\u72d8\0\u7323\0\u736e\0\u73b9\0\u7404"+
    "\0\u744f\0\u749a\0\u74e5\0\u7530\0\u0f3c\0\u757b\0\u75c6\0\u7611"+
    "\0\u765c\0\u76a7\0\u76f2\0\u773d\0\u7788\0\u77d3\0\u781e\0\u7869"+
    "\0\u78b4\0\u78ff\0\u0f3c\0\u794a\0\u7995\0\u79e0\0\u7a2b\0\u7a76"+
    "\0\u7ac1\0\u0f3c\0\u7b0c\0\u7b57\0\u7ba2\0\u7bed\0\u7c38\0\u7c83"+
    "\0\u7cce\0\u7d19\0\u0f3c\0\u7d64\0\u7daf\0\u0f3c\0\u7dfa\0\u020d"+
    "\0\u7e45\0\u7e90\0\u7edb\0\u7f26\0\u7f71\0\u7fbc\0\u8007\0\u0f3c"+
    "\0\u8052\0\u809d\0\u80e8\0\u8133\0\u817e\0\u0f3c\0\u81c9\0\u8214"+
    "\0\u0ef1\0\u825f\0\u82aa\0\u020d\0\u020d\0\u82f5\0\u0f3c\0\u8340"+
    "\0\u838b\0\u83d6\0\u8421\0\u846c\0\u84b7\0\u8502\0\u854d\0\u8598"+
    "\0\u85e3\0\u862e\0\u0f3c\0\u8679\0\u86c4\0\u870f\0\u875a\0\u87a5"+
    "\0\u0f3c\0\u87f0\0\u883b\0\u8886\0\u88d1\0\u0f3c\0\u891c\0\u8967"+
    "\0\u0f3c\0\u89b2\0\u89fd\0\u8a48\0\u8a93\0\u8ade\0\u8b29\0\u8b74"+
    "\0\u0f3c\0\u8bbf\0\u8c0a\0\u0f3c\0\u8c55\0\u8ca0\0\u8ceb\0\u0f3c"+
    "\0\u8d36\0\u8d81\0\u8dcc\0\u8e17\0\u8e62\0\u0f3c\0\u0f3c\0\u8ead"+
    "\0\u8ef8\0\u8f43\0\u8f8e\0\u0f3c\0\u0f3c\0\u0f3c\0\u8fd9\0\u9024"+
    "\0\u0f3c\0\u0f3c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[570];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\5\1\6\1\7\1\10\3\0\1\11\1\12"+
    "\1\13\11\0\1\14\1\15\1\0\1\16\5\0\1\17"+
    "\2\0\1\20\21\0\1\21\1\22\6\0\1\17\1\0"+
    "\1\20\13\0\1\23\1\5\1\24\1\0\1\5\1\25"+
    "\1\0\1\26\1\27\1\30\3\0\1\13\1\31\2\0"+
    "\7\27\3\0\26\27\1\32\3\27\1\33\1\0\1\34"+
    "\23\27\1\0\1\5\2\0\1\5\1\6\1\0\1\26"+
    "\1\27\1\30\1\35\3\0\1\34\2\0\1\36\2\37"+
    "\3\36\1\27\3\0\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\2\46\1\47\1\50\1\46\1\51\1\52\1\53"+
    "\1\54\1\55\1\46\1\56\1\57\1\60\1\61\1\46"+
    "\1\62\3\46\2\0\1\34\1\46\1\63\1\46\1\64"+
    "\2\46\1\65\13\46\1\62\1\0\1\66\2\0\1\5"+
    "\1\25\2\0\1\27\1\30\1\67\2\0\1\13\1\31"+
    "\2\0\1\70\5\71\1\27\1\72\1\73\1\74\1\75"+
    "\14\27\1\76\1\77\13\27\1\0\1\100\1\34\23\27"+
    "\1\0\1\5\2\0\1\5\107\0\1\5\3\0\1\6"+
    "\137\0\1\101\201\0\1\102\147\0\1\103\33\0\1\103"+
    "\63\0\1\104\32\0\1\104\14\0\1\25\115\0\1\27"+
    "\5\0\1\27\2\0\7\27\3\0\32\27\2\0\24\27"+
    "\11\0\1\30\4\0\1\30\2\0\6\30\4\0\32\30"+
    "\2\0\24\30\10\0\1\27\1\30\4\0\1\34\2\0"+
    "\6\34\1\27\2\0\1\105\32\34\2\0\24\34\10\0"+
    "\1\27\5\0\1\27\2\0\7\27\3\0\7\27\1\106"+
    "\22\27\2\0\24\27\10\0\1\27\1\30\4\0\1\34"+
    "\2\0\6\34\1\27\3\0\32\34\2\0\24\34\5\0"+
    "\1\107\2\0\1\110\5\0\1\110\2\0\6\36\1\110"+
    "\3\0\32\110\2\0\24\110\5\0\1\107\2\0\1\110"+
    "\5\0\1\110\2\0\1\111\4\36\1\111\1\110\3\0"+
    "\32\110\2\0\24\110\5\0\1\107\2\0\1\110\5\0"+
    "\1\110\1\112\1\0\7\110\3\0\6\46\1\113\4\46"+
    "\1\114\5\46\1\115\10\46\2\0\1\110\23\46\5\0"+
    "\1\107\2\0\1\110\5\0\1\110\1\112\1\0\7\110"+
    "\3\0\13\46\1\116\2\46\1\117\13\46\2\0\1\110"+
    "\11\46\1\116\11\46\5\0\1\107\2\0\1\110\5\0"+
    "\1\110\1\112\1\0\7\110\3\0\1\120\3\46\1\121"+
    "\2\46\1\122\3\46\1\123\2\46\1\124\2\46\1\125"+
    "\10\46\2\0\1\110\23\46\5\0\1\107\2\0\1\110"+
    "\5\0\1\110\1\112\1\0\7\110\3\0\1\126\3\46"+
    "\1\127\25\46\2\0\1\110\1\126\22\46\5\0\1\107"+
    "\2\0\1\110\5\0\1\110\1\112\1\0\7\110\3\0"+
    "\13\46\1\130\16\46\2\0\1\110\23\46\5\0\1\107"+
    "\2\0\1\110\5\0\1\110\1\112\1\0\7\110\3\0"+
    "\4\46\1\131\3\46\1\132\5\46\1\133\13\46\2\0"+
    "\1\110\23\46\5\0\1\107\2\0\1\110\5\0\1\110"+
    "\1\112\1\0\7\110\3\0\32\46\2\0\1\110\23\46"+
    "\5\0\1\107\2\0\1\110\5\0\1\110\1\112\1\0"+
    "\7\110\3\0\3\46\1\134\10\46\1\135\1\136\13\46"+
    "\1\137\2\0\1\110\23\46\5\0\1\107\2\0\1\110"+
    "\5\0\1\110\1\112\1\0\7\110\3\0\24\46\1\140"+
    "\5\46\2\0\1\110\23\46\5\0\1\107\2\0\1\110"+
    "\5\0\1\110\1\112\1\0\7\110\3\0\16\46\1\141"+
    "\13\46\2\0\1\110\23\46\5\0\1\107\2\0\1\110"+
    "\5\0\1\110\1\112\1\0\7\110\3\0\16\46\1\142"+
    "\13\46\2\0\1\110\23\46\5\0\1\107\2\0\1\110"+
    "\5\0\1\110\1\112\1\0\7\110\3\0\16\46\1\143"+
    "\5\46\1\144\5\46\2\0\1\110\23\46\5\0\1\107"+
    "\2\0\1\110\5\0\1\110\1\112\1\0\7\110\3\0"+
    "\17\46\1\145\12\46\2\0\1\110\23\46\5\0\1\107"+
    "\2\0\1\110\5\0\1\110\1\112\1\0\7\110\3\0"+
    "\1\146\31\46\2\0\1\110\23\46\5\0\1\107\2\0"+
    "\1\110\5\0\1\110\1\112\1\0\7\110\3\0\1\147"+
    "\3\46\1\150\25\46\2\0\1\110\23\46\5\0\1\107"+
    "\2\0\1\110\5\0\1\110\1\112\1\0\7\110\3\0"+
    "\4\46\1\151\3\46\1\152\21\46\2\0\1\110\23\46"+
    "\5\0\1\107\2\0\1\110\5\0\1\110\1\112\1\0"+
    "\7\110\3\0\4\46\1\153\3\46\1\154\21\46\2\0"+
    "\1\110\23\46\5\0\1\107\2\0\1\110\5\0\1\110"+
    "\1\112\1\0\7\110\3\0\21\46\1\155\1\156\7\46"+
    "\2\0\1\110\23\46\5\0\1\107\2\0\1\110\5\0"+
    "\1\110\1\112\1\0\7\110\3\0\7\46\1\157\22\46"+
    "\2\0\1\110\6\46\1\157\14\46\5\0\1\107\2\0"+
    "\1\110\5\0\1\110\1\112\1\0\7\110\3\0\13\46"+
    "\1\116\16\46\2\0\1\110\11\46\1\116\11\46\5\0"+
    "\1\107\2\0\1\110\5\0\1\110\1\112\1\0\7\110"+
    "\3\0\1\126\31\46\2\0\1\110\1\126\22\46\5\0"+
    "\1\107\2\0\1\110\5\0\1\110\1\112\1\0\7\110"+
    "\3\0\32\46\2\0\1\110\20\46\1\160\2\46\10\0"+
    "\1\27\5\0\1\27\2\0\6\70\1\27\3\0\32\27"+
    "\2\0\24\27\10\0\1\27\5\0\1\27\1\161\1\0"+
    "\6\71\1\27\3\0\32\27\2\0\24\27\31\0\1\162"+
    "\112\0\1\163\71\0\1\27\5\0\1\27\2\0\7\27"+
    "\3\0\15\27\1\164\14\27\2\0\24\27\10\0\1\27"+
    "\5\0\1\27\2\0\7\27\3\0\16\27\1\165\13\27"+
    "\2\0\24\27\10\0\1\27\5\0\1\27\2\0\7\27"+
    "\3\0\21\27\1\166\10\27\2\0\24\27\50\0\1\167"+
    "\32\0\1\167\52\0\1\170\33\0\1\170\23\0\1\27"+
    "\5\0\1\27\2\0\7\27\3\0\4\27\1\171\25\27"+
    "\2\0\24\27\5\0\1\107\2\0\1\172\5\0\1\107"+
    "\2\0\7\172\3\0\32\172\2\0\24\172\5\0\1\107"+
    "\2\0\1\110\5\0\1\110\2\0\7\110\3\0\32\110"+
    "\2\0\24\110\5\0\1\107\2\0\1\110\5\0\1\110"+
    "\2\0\1\173\4\36\1\173\1\110\3\0\32\110\2\0"+
    "\24\110\33\0\32\174\3\0\23\174\5\0\1\107\2\0"+
    "\1\110\5\0\1\110\1\112\1\0\7\110\3\0\21\46"+
    "\1\175\10\46\2\0\1\110\23\46\5\0\1\107\2\0"+
    "\1\110\5\0\1\110\1\112\1\0\7\110\3\0\10\46"+
    "\1\176\21\46\2\0\1\110\23\46\5\0\1\107\2\0"+
    "\1\110\5\0\1\110\1\112\1\0\7\110\3\0\4\46"+
    "\1\177\25\46\2\0\1\110\23\46\5\0\1\107\2\0"+
    "\1\110\5\0\1\110\1\112\1\0\7\110\3\0\24\46"+
    "\1\200\5\46\2\0\1\110\21\46\1\200\1\46\5\0"+
    "\1\107\2\0\1\110\5\0\1\110\1\112\1\0\7\110"+
    "\3\0\23\46\1\201\6\46\2\0\1\110\23\46\5\0"+
    "\1\107\2\0\1\110\5\0\1\110\1\112\1\0\7\110"+
    "\3\0\14\46\1\202\15\46\2\0\1\110\23\46\5\0"+
    "\1\107\2\0\1\110\5\0\1\110\1\112\1\0\7\110"+
    "\3\0\15\46\1\203\14\46\2\0\1\110\23\46\5\0"+
    "\1\107\2\0\1\110\5\0\1\110\1\112\1\0\7\110"+
    "\3\0\4\46\1\204\25\46\2\0\1\110\23\46\5\0"+
    "\1\107\2\0\1\110\5\0\1\110\1\112\1\0\7\110"+
    "\3\0\1\205\31\46\2\0\1\110\23\46\5\0\1\107"+
    "\2\0\1\110\5\0\1\110\1\112\1\0\7\110\3\0"+
    "\13\46\1\206\1\207\1\210\14\46\2\0\1\110\23\46"+
    "\5\0\1\107\2\0\1\110\5\0\1\110\1\112\1\0"+
    "\7\110\3\0\4\46\1\211\25\46\2\0\1\110\23\46"+
    "\5\0\1\107\2\0\1\110\5\0\1\110\1\112\1\0"+
    "\7\110\3\0\21\46\1\212\10\46\2\0\1\110\16\46"+
    "\1\212\4\46\5\0\1\107\2\0\1\110\5\0\1\110"+
    "\1\112\1\0\7\110\3\0\21\46\1\213\10\46\2\0"+
    "\1\110\23\46\5\0\1\107\2\0\1\110\5\0\1\110"+
    "\1\112\1\0\7\110\3\0\10\46\1\214\21\46\2\0"+
    "\1\110\23\46\5\0\1\107\2\0\1\110\5\0\1\110"+
    "\1\112\1\0\7\110\3\0\2\46\1\215\27\46\2\0"+
    "\1\110\23\46\5\0\1\107\2\0\1\110\5\0\1\110"+
    "\1\112\1\0\7\110\3\0\2\46\1\216\10\46\1\217"+
    "\16\46\2\0\1\110\23\46\5\0\1\107\2\0\1\110"+
    "\5\0\1\110\1\112\1\0\7\110\3\0\21\46\1\220"+
    "\10\46\2\0\1\110\23\46\5\0\1\107\2\0\1\110"+
    "\5\0\1\110\1\112\1\0\7\110\3\0\1\221\31\46"+
    "\2\0\1\110\23\46\5\0\1\107\2\0\1\110\5\0"+
    "\1\110\1\112\1\0\7\110\3\0\3\46\1\222\26\46"+
    "\2\0\1\110\23\46\5\0\1\107\2\0\1\110\5\0"+
    "\1\110\1\112\1\0\7\110\3\0\20\46\1\223\11\46"+
    "\2\0\1\110\23\46\5\0\1\107\2\0\1\110\5\0"+
    "\1\110\1\112\1\0\7\110\3\0\22\46\1\224\7\46"+
    "\2\0\1\110\23\46\5\0\1\107\2\0\1\110\5\0"+
    "\1\110\1\112\1\0\7\110\3\0\6\46\1\225\23\46"+
    "\2\0\1\110\23\46\5\0\1\107\2\0\1\110\5\0"+
    "\1\110\1\112\1\0\7\110\3\0\3\46\1\226\26\46"+
    "\2\0\1\110\23\46\5\0\1\107\2\0\1\110\5\0"+
    "\1\110\1\112\1\0\7\110\3\0\14\46\1\227\15\46"+
    "\2\0\1\110\23\46\5\0\1\107\2\0\1\110\5\0"+
    "\1\110\1\112\1\0\7\110\3\0\4\46\1\230\25\46"+
    "\2\0\1\110\23\46\5\0\1\107\2\0\1\110\5\0"+
    "\1\110\1\112\1\0\7\110\3\0\2\46\1\231\27\46"+
    "\2\0\1\110\23\46\5\0\1\107\2\0\1\110\5\0"+
    "\1\110\1\112\1\0\7\110\3\0\21\46\1\232\1\233"+
    "\7\46\2\0\1\110\23\46\5\0\1\107\2\0\1\110"+
    "\5\0\1\110\1\112\1\0\7\110\3\0\3\46\1\234"+
    "\26\46\2\0\1\110\23\46\5\0\1\107\2\0\1\110"+
    "\5\0\1\110\1\112\1\0\7\110\3\0\20\46\1\235"+
    "\11\46\2\0\1\110\23\46\5\0\1\107\2\0\1\110"+
    "\5\0\1\110\1\112\1\0\7\110\3\0\13\46\1\236"+
    "\16\46\2\0\1\110\23\46\5\0\1\107\2\0\1\110"+
    "\5\0\1\110\1\112\1\0\7\110\3\0\14\46\1\237"+
    "\12\46\1\240\2\46\2\0\1\110\23\46\5\0\1\107"+
    "\2\0\1\110\5\0\1\110\1\112\1\0\7\110\3\0"+
    "\23\46\1\241\6\46\2\0\1\110\23\46\5\0\1\107"+
    "\2\0\1\110\5\0\1\110\1\112\1\0\7\110\3\0"+
    "\13\46\1\242\16\46\2\0\1\110\23\46\5\0\1\107"+
    "\2\0\1\110\5\0\1\110\1\112\1\0\7\110\3\0"+
    "\24\46\1\243\5\46\2\0\1\110\23\46\5\0\1\107"+
    "\2\0\1\110\5\0\1\110\1\112\1\0\7\110\3\0"+
    "\10\46\1\244\21\46\2\0\1\110\7\46\1\244\13\46"+
    "\5\0\1\107\2\0\1\110\5\0\1\110\1\112\1\0"+
    "\7\110\3\0\32\46\2\0\1\110\20\46\1\245\2\46"+
    "\17\0\1\161\1\0\6\246\74\0\1\27\5\0\1\27"+
    "\2\0\7\27\3\0\3\27\1\247\26\27\2\0\24\27"+
    "\10\0\1\27\5\0\1\27\2\0\7\27\3\0\23\27"+
    "\1\250\6\27\2\0\24\27\67\0\1\251\112\0\1\252"+
    "\33\0\1\27\5\0\1\27\2\0\7\27\3\0\21\27"+
    "\1\253\10\27\2\0\24\27\5\0\1\107\2\0\1\110"+
    "\5\0\1\110\2\0\6\254\1\110\3\0\32\110\2\0"+
    "\24\110\17\0\1\255\13\0\32\174\3\0\23\174\5\0"+
    "\1\107\2\0\1\110\5\0\1\110\1\112\1\0\7\110"+
    "\3\0\4\46\1\256\25\46\2\0\1\110\23\46\5\0"+
    "\1\107\2\0\1\110\5\0\1\110\1\112\1\0\7\110"+
    "\3\0\15\46\1\257\14\46\2\0\1\110\23\46\5\0"+
    "\1\107\2\0\1\110\5\0\1\110\1\112\1\0\7\110"+
    "\3\0\1\260\31\46\2\0\1\110\23\46\5\0\1\107"+
    "\2\0\1\110\5\0\1\110\1\112\1\0\7\110\3\0"+
    "\4\46\1\261\25\46\2\0\1\110\4\46\1\261\16\46"+
    "\5\0\1\107\2\0\1\110\5\0\1\110\1\112\1\0"+
    "\7\110\3\0\16\46\1\262\13\46\2\0\1\110\23\46"+
    "\5\0\1\107\2\0\1\110\5\0\1\110\1\112\1\0"+
    "\7\110\3\0\17\46\1\263\12\46\2\0\1\110\23\46"+
    "\5\0\1\107\2\0\1\110\5\0\1\110\1\112\1\0"+
    "\7\110\3\0\23\46\1\264\6\46\2\0\1\110\23\46"+
    "\5\0\1\107\2\0\1\110\5\0\1\110\1\112\1\0"+
    "\7\110\3\0\2\46\1\265\27\46\2\0\1\110\23\46"+
    "\5\0\1\107\2\0\1\110\5\0\1\110\1\112\1\0"+
    "\7\110\3\0\22\46\1\266\7\46\2\0\1\110\23\46"+
    "\5\0\1\107\2\0\1\110\5\0\1\110\1\112\1\0"+
    "\7\110\3\0\24\46\1\267\5\46\2\0\1\110\23\46"+
    "\5\0\1\107\2\0\1\110\5\0\1\110\1\112\1\0"+
    "\7\110\3\0\1\46\1\270\30\46\2\0\1\110\23\46"+
    "\5\0\1\107\2\0\1\110\5\0\1\110\1\112\1\0"+
    "\7\110\3\0\22\46\1\271\7\46\2\0\1\110\23\46"+
    "\5\0\1\107\2\0\1\110\5\0\1\110\1\112\1\0"+
    "\7\110\3\0\1\272\2\46\1\273\26\46\2\0\1\110"+
    "\23\46\5\0\1\107\2\0\1\110\5\0\1\110\1\112"+
    "\1\0\7\110\3\0\12\46\1\261\17\46\2\0\1\110"+
    "\10\46\1\261\12\46\5\0\1\107\2\0\1\110\5\0"+
    "\1\110\1\112\1\0\7\110\3\0\4\46\1\274\25\46"+
    "\2\0\1\110\23\46\5\0\1\107\2\0\1\110\5\0"+
    "\1\110\1\112\1\0\7\110\3\0\14\46\1\275\15\46"+
    "\2\0\1\110\23\46\5\0\1\107\2\0\1\110\5\0"+
    "\1\110\1\112\1\0\7\110\3\0\7\46\1\276\22\46"+
    "\2\0\1\110\23\46\5\0\1\107\2\0\1\110\5\0"+
    "\1\110\1\112\1\0\7\110\3\0\7\46\1\277\22\46"+
    "\2\0\1\110\23\46\5\0\1\107\2\0\1\110\5\0"+
    "\1\110\1\112\1\0\7\110\3\0\1\300\31\46\2\0"+
    "\1\110\23\46\5\0\1\107\2\0\1\110\5\0\1\110"+
    "\1\112\1\0\7\110\3\0\14\46\1\301\15\46\2\0"+
    "\1\110\23\46\5\0\1\107\2\0\1\110\5\0\1\110"+
    "\1\112\1\0\7\110\3\0\6\46\1\302\23\46\2\0"+
    "\1\110\23\46\5\0\1\107\2\0\1\110\5\0\1\110"+
    "\1\112\1\0\7\110\3\0\10\46\1\303\21\46\2\0"+
    "\1\110\23\46\5\0\1\107\2\0\1\110\5\0\1\110"+
    "\1\112\1\0\7\110\3\0\24\46\1\304\5\46\2\0"+
    "\1\110\23\46\5\0\1\107\2\0\1\110\5\0\1\110"+
    "\1\112\1\0\7\110\3\0\23\46\1\305\6\46\2\0"+
    "\1\110\23\46\5\0\1\107\2\0\1\110\5\0\1\110"+
    "\1\112\1\0\7\110\3\0\10\46\1\306\21\46\2\0"+
    "\1\110\23\46\5\0\1\107\2\0\1\110\5\0\1\110"+
    "\1\112\1\0\7\110\3\0\10\46\1\307\21\46\2\0"+
    "\1\110\23\46\5\0\1\107\2\0\1\110\5\0\1\110"+
    "\1\112\1\0\7\110\3\0\1\46\1\310\30\46\2\0"+
    "\1\110\23\46\5\0\1\107\2\0\1\110\5\0\1\110"+
    "\1\112\1\0\7\110\3\0\25\46\1\311\4\46\2\0"+
    "\1\110\23\46\5\0\1\107\2\0\1\110\5\0\1\110"+
    "\1\112\1\0\7\110\3\0\10\46\1\312\21\46\2\0"+
    "\1\110\23\46\5\0\1\107\2\0\1\110\5\0\1\110"+
    "\1\112\1\0\7\110\3\0\1\313\31\46\2\0\1\110"+
    "\23\46\5\0\1\107\2\0\1\110\5\0\1\110\1\112"+
    "\1\0\7\110\3\0\22\46\1\314\7\46\2\0\1\110"+
    "\23\46\5\0\1\107\2\0\1\110\5\0\1\110\1\112"+
    "\1\0\7\110\3\0\10\46\1\270\21\46\2\0\1\110"+
    "\23\46\5\0\1\107\2\0\1\110\5\0\1\110\1\112"+
    "\1\0\7\110\3\0\24\46\1\315\5\46\2\0\1\110"+
    "\23\46\5\0\1\107\2\0\1\110\5\0\1\110\1\112"+
    "\1\0\7\110\3\0\4\46\1\316\25\46\2\0\1\110"+
    "\23\46\5\0\1\107\2\0\1\110\5\0\1\110\1\112"+
    "\1\0\7\110\3\0\1\317\31\46\2\0\1\110\23\46"+
    "\5\0\1\107\2\0\1\110\5\0\1\110\1\112\1\0"+
    "\7\110\3\0\23\46\1\320\6\46\2\0\1\110\23\46"+
    "\5\0\1\107\2\0\1\110\5\0\1\110\1\112\1\0"+
    "\7\110\3\0\24\46\1\321\5\46\2\0\1\110\23\46"+
    "\5\0\1\107\2\0\1\110\5\0\1\110\1\112\1\0"+
    "\7\110\3\0\1\322\31\46\2\0\1\110\23\46\5\0"+
    "\1\107\2\0\1\110\5\0\1\110\1\112\1\0\7\110"+
    "\3\0\23\46\1\200\6\46\2\0\1\110\20\46\1\200"+
    "\2\46\5\0\1\107\2\0\1\110\5\0\1\110\1\112"+
    "\1\0\7\110\3\0\32\46\2\0\1\110\15\46\1\323"+
    "\5\46\21\0\6\246\141\0\1\324\31\0\1\324\60\0"+
    "\1\325\31\0\1\325\13\0\1\27\5\0\1\27\2\0"+
    "\7\27\3\0\4\27\1\326\25\27\2\0\24\27\5\0"+
    "\1\107\2\0\1\110\5\0\1\327\2\0\6\36\1\110"+
    "\3\0\32\110\2\0\24\110\72\0\1\330\25\0\1\107"+
    "\2\0\1\110\5\0\1\110\1\112\1\0\7\110\3\0"+
    "\6\46\1\331\23\46\2\0\1\110\23\46\5\0\1\107"+
    "\2\0\1\110\5\0\1\110\1\112\1\0\7\110\3\0"+
    "\4\46\1\332\25\46\2\0\1\110\23\46\5\0\1\107"+
    "\2\0\1\110\5\0\1\110\1\112\1\0\7\110\3\0"+
    "\32\46\2\0\1\333\23\46\5\0\1\107\2\0\1\110"+
    "\5\0\1\110\1\112\1\0\7\110\3\0\15\46\1\334"+
    "\14\46\2\0\1\110\23\46\5\0\1\107\2\0\1\110"+
    "\5\0\1\110\1\112\1\0\7\110\3\0\16\46\1\335"+
    "\13\46\2\0\1\110\23\46\5\0\1\107\2\0\1\110"+
    "\5\0\1\110\1\112\1\0\7\110\3\0\21\46\1\336"+
    "\10\46\2\0\1\110\23\46\5\0\1\107\2\0\1\110"+
    "\5\0\1\110\1\112\1\0\7\110\3\0\12\46\1\337"+
    "\17\46\2\0\1\110\23\46\5\0\1\107\2\0\1\110"+
    "\5\0\1\110\1\112\1\0\7\110\3\0\4\46\1\340"+
    "\25\46\2\0\1\110\23\46\5\0\1\107\2\0\1\110"+
    "\5\0\1\110\1\112\1\0\7\110\3\0\14\46\1\341"+
    "\15\46\2\0\1\110\23\46\5\0\1\107\2\0\1\110"+
    "\5\0\1\110\1\112\1\0\7\110\3\0\16\46\1\342"+
    "\13\46\2\0\1\110\23\46\5\0\1\107\2\0\1\110"+
    "\5\0\1\110\1\112\1\0\7\110\3\0\24\46\1\343"+
    "\5\46\2\0\1\110\23\46\5\0\1\107\2\0\1\110"+
    "\5\0\1\110\1\112\1\0\7\110\3\0\21\46\1\344"+
    "\10\46\2\0\1\110\23\46\5\0\1\107\2\0\1\110"+
    "\5\0\1\110\1\112\1\0\7\110\3\0\4\46\1\345"+
    "\25\46\2\0\1\110\23\46\5\0\1\107\2\0\1\110"+
    "\5\0\1\110\1\112\1\0\7\110\3\0\2\46\1\346"+
    "\27\46\2\0\1\110\23\46\5\0\1\107\2\0\1\110"+
    "\5\0\1\110\1\112\1\0\7\110\3\0\10\46\1\347"+
    "\21\46\2\0\1\110\23\46\5\0\1\107\2\0\1\110"+
    "\5\0\1\110\1\112\1\0\7\110\3\0\1\350\31\46"+
    "\2\0\1\110\23\46\5\0\1\107\2\0\1\110\5\0"+
    "\1\110\1\112\1\0\7\110\3\0\4\46\1\351\25\46"+
    "\2\0\1\110\23\46\5\0\1\107\2\0\1\110\5\0"+
    "\1\110\1\112\1\0\7\110\3\0\22\46\1\352\7\46"+
    "\2\0\1\110\23\46\5\0\1\107\2\0\1\110\5\0"+
    "\1\110\1\112\1\0\7\110\3\0\24\46\1\353\5\46"+
    "\2\0\1\110\23\46\5\0\1\107\2\0\1\110\5\0"+
    "\1\110\1\112\1\0\7\110\3\0\4\46\1\354\25\46"+
    "\2\0\1\110\23\46\5\0\1\107\2\0\1\110\5\0"+
    "\1\110\1\112\1\0\7\110\3\0\2\46\1\355\27\46"+
    "\2\0\1\110\23\46\5\0\1\107\2\0\1\110\5\0"+
    "\1\110\1\112\1\0\7\110\3\0\10\46\1\356\21\46"+
    "\2\0\1\110\23\46\5\0\1\107\2\0\1\110\5\0"+
    "\1\110\1\112\1\0\7\110\3\0\10\46\1\357\21\46"+
    "\2\0\1\110\23\46\5\0\1\107\2\0\1\110\5\0"+
    "\1\110\1\112\1\0\7\110\3\0\15\46\1\360\14\46"+
    "\2\0\1\110\23\46\5\0\1\107\2\0\1\110\5\0"+
    "\1\110\1\112\1\0\7\110\3\0\5\46\1\361\24\46"+
    "\2\0\1\110\23\46\5\0\1\107\2\0\1\110\5\0"+
    "\1\110\1\112\1\0\7\110\3\0\21\46\1\362\10\46"+
    "\2\0\1\110\23\46\5\0\1\107\2\0\1\110\5\0"+
    "\1\110\1\112\1\0\7\110\3\0\16\46\1\363\13\46"+
    "\2\0\1\110\23\46\5\0\1\107\2\0\1\110\5\0"+
    "\1\110\1\112\1\0\7\110\3\0\16\46\1\364\13\46"+
    "\2\0\1\110\23\46\5\0\1\107\2\0\1\110\5\0"+
    "\1\110\1\112\1\0\7\110\3\0\14\46\1\365\15\46"+
    "\2\0\1\110\23\46\5\0\1\107\2\0\1\110\5\0"+
    "\1\110\1\112\1\0\7\110\3\0\26\46\1\366\3\46"+
    "\2\0\1\110\23\46\5\0\1\107\2\0\1\110\5\0"+
    "\1\110\1\112\1\0\7\110\3\0\4\46\1\367\25\46"+
    "\2\0\1\110\23\46\5\0\1\107\2\0\1\110\5\0"+
    "\1\110\1\112\1\0\7\110\3\0\2\46\1\370\27\46"+
    "\2\0\1\110\23\46\5\0\1\107\2\0\1\110\5\0"+
    "\1\110\1\112\1\0\7\110\3\0\16\46\1\371\13\46"+
    "\2\0\1\110\23\46\5\0\1\107\2\0\1\110\5\0"+
    "\1\110\1\112\1\0\7\110\3\0\13\46\1\372\16\46"+
    "\2\0\1\110\23\46\5\0\1\107\2\0\1\110\5\0"+
    "\1\110\1\112\1\0\7\110\3\0\21\46\1\373\10\46"+
    "\2\0\1\110\23\46\5\0\1\107\2\0\1\110\5\0"+
    "\1\110\1\112\1\0\7\110\3\0\32\46\2\0\1\110"+
    "\17\46\1\374\3\46\51\0\1\375\32\0\1\375\57\0"+
    "\1\376\32\0\1\376\13\0\1\107\2\0\1\110\5\0"+
    "\1\110\2\0\1\377\1\u0100\5\110\3\0\32\110\2\0"+
    "\24\110\104\0\1\u0101\13\0\1\107\2\0\1\110\5\0"+
    "\1\110\1\112\1\0\7\110\3\0\1\u0102\31\46\2\0"+
    "\1\110\23\46\5\0\1\107\2\0\1\110\5\0\1\110"+
    "\1\112\1\0\7\110\3\0\1\u0103\31\46\2\0\1\110"+
    "\23\46\5\0\1\107\2\0\1\110\5\0\1\110\2\0"+
    "\7\110\3\0\23\110\1\u0104\6\110\2\0\24\110\5\0"+
    "\1\107\2\0\1\110\5\0\1\110\1\112\1\0\7\110"+
    "\3\0\32\46\2\0\1\u0105\23\46\5\0\1\107\2\0"+
    "\1\110\5\0\1\110\1\112\1\0\7\110\3\0\16\46"+
    "\1\u0106\13\46\2\0\1\110\23\46\5\0\1\107\2\0"+
    "\1\110\5\0\1\110\1\112\1\0\7\110\3\0\1\46"+
    "\1\u0107\30\46\2\0\1\110\23\46\5\0\1\107\2\0"+
    "\1\110\5\0\1\110\1\112\1\0\7\110\3\0\15\46"+
    "\1\u0108\14\46\2\0\1\110\23\46\5\0\1\107\2\0"+
    "\1\110\5\0\1\110\1\112\1\0\7\110\3\0\13\46"+
    "\1\u0109\16\46\2\0\1\110\23\46\5\0\1\107\2\0"+
    "\1\110\5\0\1\110\1\112\1\0\7\110\3\0\32\46"+
    "\2\0\1\u010a\23\46\5\0\1\107\2\0\1\110\5\0"+
    "\1\110\1\112\1\0\7\110\3\0\15\46\1\u010b\14\46"+
    "\2\0\1\110\23\46\5\0\1\107\2\0\1\110\5\0"+
    "\1\110\1\112\1\0\7\110\3\0\7\46\1\u010c\22\46"+
    "\2\0\1\110\23\46\5\0\1\107\2\0\1\110\5\0"+
    "\1\110\1\112\1\0\7\110\3\0\15\46\1\u010d\14\46"+
    "\2\0\1\110\23\46\5\0\1\107\2\0\1\110\5\0"+
    "\1\110\1\112\1\0\7\110\3\0\32\46\2\0\1\u010e"+
    "\23\46\5\0\1\107\2\0\1\110\5\0\1\110\1\112"+
    "\1\0\7\110\3\0\21\46\1\u010f\10\46\2\0\1\110"+
    "\23\46\5\0\1\107\2\0\1\110\5\0\1\110\1\112"+
    "\1\0\7\110\3\0\13\46\1\u0110\16\46\2\0\1\110"+
    "\23\46\5\0\1\107\2\0\1\110\5\0\1\110\1\112"+
    "\1\0\7\110\3\0\15\46\1\u0111\14\46\2\0\1\110"+
    "\23\46\5\0\1\107\2\0\1\110\5\0\1\110\1\112"+
    "\1\0\7\110\3\0\4\46\1\u0112\25\46\2\0\1\110"+
    "\23\46\5\0\1\107\2\0\1\110\5\0\1\110\1\112"+
    "\1\0\7\110\3\0\4\46\1\u0113\25\46\2\0\1\110"+
    "\23\46\5\0\1\107\2\0\1\110\5\0\1\110\1\112"+
    "\1\0\7\110\3\0\5\46\1\u0114\24\46\2\0\1\110"+
    "\23\46\5\0\1\107\2\0\1\110\5\0\1\110\1\112"+
    "\1\0\7\110\3\0\32\46\2\0\1\u0115\23\46\5\0"+
    "\1\107\2\0\1\110\5\0\1\110\1\112\1\0\7\110"+
    "\3\0\10\46\1\u0116\21\46\2\0\1\110\23\46\5\0"+
    "\1\107\2\0\1\110\5\0\1\110\1\112\1\0\7\110"+
    "\3\0\4\46\1\u0117\25\46\2\0\1\110\23\46\5\0"+
    "\1\107\2\0\1\110\5\0\1\110\1\112\1\0\7\110"+
    "\3\0\32\46\2\0\1\u0118\23\46\5\0\1\107\2\0"+
    "\1\110\5\0\1\110\1\112\1\0\7\110\3\0\15\46"+
    "\1\u0119\14\46\2\0\1\110\23\46\5\0\1\107\2\0"+
    "\1\110\5\0\1\110\1\112\1\0\7\110\3\0\4\46"+
    "\1\u011a\25\46\2\0\1\110\23\46\5\0\1\107\2\0"+
    "\1\110\5\0\1\110\1\112\1\0\7\110\3\0\16\46"+
    "\1\u011b\13\46\2\0\1\110\23\46\5\0\1\107\2\0"+
    "\1\110\5\0\1\110\1\112\1\0\7\110\3\0\21\46"+
    "\1\u011c\10\46\2\0\1\110\23\46\5\0\1\107\2\0"+
    "\1\110\5\0\1\110\1\112\1\0\7\110\3\0\23\46"+
    "\1\u011d\6\46\2\0\1\110\23\46\5\0\1\107\2\0"+
    "\1\110\5\0\1\110\1\112\1\0\7\110\3\0\32\46"+
    "\2\0\1\u011e\23\46\5\0\1\107\2\0\1\110\5\0"+
    "\1\110\1\112\1\0\7\110\3\0\16\46\1\u011f\13\46"+
    "\2\0\1\110\23\46\5\0\1\107\2\0\1\110\5\0"+
    "\1\110\1\112\1\0\7\110\3\0\10\46\1\u0120\21\46"+
    "\2\0\1\110\23\46\5\0\1\107\2\0\1\110\5\0"+
    "\1\110\1\112\1\0\6\110\1\u0121\3\0\32\46\2\0"+
    "\1\110\23\46\46\0\1\u0122\32\0\1\u0122\57\0\1\u0123"+
    "\32\0\1\u0123\16\0\1\107\2\0\1\110\5\0\1\110"+
    "\2\0\1\110\5\u0124\1\110\3\0\32\110\2\0\24\110"+
    "\5\0\1\107\2\0\1\110\5\0\1\110\2\0\3\u0124"+
    "\4\110\3\0\32\110\2\0\24\110\102\0\1\u0125\15\0"+
    "\1\107\2\0\1\110\5\0\1\110\1\112\1\0\7\110"+
    "\3\0\21\46\1\u0126\10\46\2\0\1\110\23\46\5\0"+
    "\1\107\2\0\1\110\5\0\1\110\1\112\1\0\7\110"+
    "\3\0\2\46\1\u0127\27\46\2\0\1\110\23\46\5\0"+
    "\1\107\2\0\1\110\5\0\1\110\2\0\7\110\3\0"+
    "\4\110\1\u0128\25\110\2\0\24\110\5\0\1\107\2\0"+
    "\1\110\5\0\1\110\2\0\7\110\3\0\23\110\1\u0129"+
    "\6\110\2\0\24\110\5\0\1\107\2\0\1\110\5\0"+
    "\1\110\1\112\1\0\7\110\3\0\16\46\1\u012a\13\46"+
    "\2\0\1\110\23\46\5\0\1\107\2\0\1\110\5\0"+
    "\1\110\1\112\1\0\7\110\3\0\1\u012b\31\46\2\0"+
    "\1\110\23\46\5\0\1\107\2\0\1\110\5\0\1\110"+
    "\1\112\1\0\7\110\3\0\23\46\1\u012c\6\46\2\0"+
    "\1\110\23\46\5\0\1\107\2\0\1\110\5\0\1\110"+
    "\2\0\7\110\3\0\24\110\1\u012d\5\110\2\0\24\110"+
    "\5\0\1\107\2\0\1\110\5\0\1\110\1\112\1\0"+
    "\7\110\3\0\2\46\1\u012e\27\46\2\0\1\110\23\46"+
    "\5\0\1\107\2\0\1\110\5\0\1\110\1\112\1\0"+
    "\7\110\3\0\1\u0106\31\46\2\0\1\110\23\46\5\0"+
    "\1\107\2\0\1\110\5\0\1\110\1\112\1\0\7\110"+
    "\3\0\1\u012f\31\46\2\0\1\110\23\46\5\0\1\107"+
    "\2\0\1\110\5\0\1\110\2\0\7\110\3\0\2\110"+
    "\1\u0130\11\110\1\u0131\15\110\2\0\24\110\5\0\1\107"+
    "\2\0\1\110\5\0\1\110\1\112\1\0\7\110\3\0"+
    "\16\46\1\u0132\13\46\2\0\1\110\23\46\5\0\1\107"+
    "\2\0\1\110\5\0\1\110\1\112\1\0\7\110\3\0"+
    "\1\u0133\31\46\2\0\1\110\23\46\5\0\1\107\2\0"+
    "\1\110\5\0\1\110\1\112\1\0\7\110\3\0\21\46"+
    "\1\u0134\10\46\2\0\1\110\23\46\5\0\1\107\2\0"+
    "\1\110\5\0\1\110\1\112\1\0\7\110\3\0\10\46"+
    "\1\u0135\21\46\2\0\1\110\23\46\5\0\1\107\2\0"+
    "\1\110\5\0\1\110\2\0\7\110\3\0\24\110\1\u0136"+
    "\5\110\2\0\24\110\5\0\1\107\2\0\1\110\5\0"+
    "\1\110\1\112\1\0\7\110\3\0\2\46\1\u0137\27\46"+
    "\2\0\1\110\23\46\5\0\1\107\2\0\1\110\5\0"+
    "\1\110\1\112\1\0\7\110\3\0\32\46\2\0\1\u0138"+
    "\23\46\5\0\1\107\2\0\1\110\5\0\1\110\2\0"+
    "\7\110\3\0\5\110\1\u0139\11\110\1\u013a\12\110\2\0"+
    "\24\110\5\0\1\107\2\0\1\110\5\0\1\110\1\112"+
    "\1\0\7\110\3\0\4\46\1\u013b\25\46\2\0\1\110"+
    "\23\46\5\0\1\107\2\0\1\110\5\0\1\110\1\112"+
    "\1\0\7\110\3\0\23\46\1\u013c\6\46\2\0\1\110"+
    "\23\46\5\0\1\107\2\0\1\110\5\0\1\110\1\112"+
    "\1\0\7\110\3\0\21\46\1\u013d\10\46\2\0\1\110"+
    "\23\46\5\0\1\107\2\0\1\110\5\0\1\110\1\112"+
    "\1\0\7\110\3\0\10\46\1\u013e\21\46\2\0\1\110"+
    "\23\46\5\0\1\u013f\2\0\1\110\5\0\1\110\1\112"+
    "\1\0\7\110\3\0\32\46\2\0\1\110\23\46\5\0"+
    "\1\107\2\0\1\110\5\0\1\110\2\0\7\110\3\0"+
    "\25\110\1\u0140\4\110\2\0\24\110\5\0\1\107\2\0"+
    "\1\110\5\0\1\110\1\112\1\0\7\110\3\0\16\46"+
    "\1\u0141\13\46\2\0\1\110\23\46\5\0\1\107\2\0"+
    "\1\110\5\0\1\110\1\0\1\u0142\7\110\3\0\32\110"+
    "\2\0\24\110\43\0\1\u0143\33\0\1\u0143\56\0\1\u0144"+
    "\33\0\1\u0144\20\0\1\107\2\0\1\110\5\0\1\u0145"+
    "\2\0\7\110\3\0\32\110\2\0\24\110\20\0\1\u0146"+
    "\77\0\1\107\2\0\1\110\5\0\1\110\1\112\1\0"+
    "\7\110\3\0\32\46\2\0\1\u0147\23\46\5\0\1\107"+
    "\2\0\1\110\5\0\1\110\1\112\1\0\7\110\3\0"+
    "\10\46\1\u0148\21\46\2\0\1\110\23\46\5\0\1\107"+
    "\2\0\1\110\5\0\1\110\2\0\7\110\3\0\27\110"+
    "\1\u0149\2\110\2\0\24\110\5\0\1\107\2\0\1\110"+
    "\5\0\1\110\2\0\7\110\3\0\4\110\1\u014a\25\110"+
    "\2\0\24\110\5\0\1\107\2\0\1\110\5\0\1\110"+
    "\1\112\1\0\7\110\3\0\27\46\1\342\2\46\2\0"+
    "\1\110\23\46\5\0\1\107\2\0\1\110\5\0\1\110"+
    "\1\112\1\0\7\110\3\0\22\46\1\u014b\7\46\2\0"+
    "\1\110\23\46\5\0\1\107\2\0\1\110\5\0\1\110"+
    "\1\112\1\0\7\110\3\0\1\u014c\31\46\2\0\1\110"+
    "\23\46\5\0\1\107\2\0\1\110\5\0\1\110\2\0"+
    "\7\110\3\0\22\110\1\u014d\7\110\2\0\24\110\5\0"+
    "\1\107\2\0\1\110\5\0\1\110\1\112\1\0\7\110"+
    "\3\0\10\46\1\u014e\21\46\2\0\1\110\23\46\5\0"+
    "\1\107\2\0\1\110\5\0\1\110\1\112\1\0\7\110"+
    "\3\0\21\46\1\u014f\10\46\2\0\1\110\23\46\5\0"+
    "\1\107\2\0\1\110\5\0\1\110\2\0\7\110\3\0"+
    "\21\110\1\u0150\10\110\2\0\24\110\5\0\1\107\2\0"+
    "\1\110\5\0\1\110\2\0\7\110\3\0\16\110\1\u0151"+
    "\13\110\2\0\24\110\5\0\1\107\2\0\1\110\5\0"+
    "\1\110\1\112\1\0\7\110\3\0\21\46\1\u0152\10\46"+
    "\2\0\1\110\23\46\5\0\1\107\2\0\1\110\5\0"+
    "\1\110\1\112\1\0\7\110\3\0\3\46\1\u010c\26\46"+
    "\2\0\1\110\23\46\5\0\1\107\2\0\1\110\5\0"+
    "\1\110\1\112\1\0\7\110\3\0\2\46\1\u0153\27\46"+
    "\2\0\1\110\23\46\5\0\1\107\2\0\1\110\5\0"+
    "\1\110\2\0\7\110\3\0\22\110\1\u0154\7\110\2\0"+
    "\24\110\5\0\1\107\2\0\1\110\5\0\1\110\1\112"+
    "\1\0\7\110\3\0\1\u0155\31\46\2\0\1\110\23\46"+
    "\5\0\1\107\2\0\1\110\5\0\1\110\2\0\7\110"+
    "\3\0\2\110\1\u0156\27\110\2\0\24\110\5\0\1\107"+
    "\2\0\1\110\5\0\1\110\2\0\7\110\3\0\16\110"+
    "\1\u0157\13\110\2\0\24\110\5\0\1\107\2\0\1\110"+
    "\5\0\1\110\2\0\7\110\3\0\1\u0158\31\110\2\0"+
    "\24\110\5\0\1\107\2\0\1\110\5\0\1\110\1\112"+
    "\1\0\7\110\3\0\22\46\1\u0159\7\46\2\0\1\110"+
    "\23\46\5\0\1\107\2\0\1\110\5\0\1\110\1\112"+
    "\1\0\7\110\3\0\21\46\1\u015a\10\46\2\0\1\110"+
    "\23\46\5\0\1\107\2\0\1\110\5\0\1\110\1\112"+
    "\1\0\7\110\3\0\3\46\1\u015b\26\46\2\0\1\110"+
    "\23\46\5\0\1\107\2\0\1\110\5\0\1\110\1\112"+
    "\1\0\7\110\3\0\3\46\1\u015c\26\46\2\0\1\110"+
    "\23\46\5\0\1\107\2\0\1\172\5\0\1\107\2\0"+
    "\7\172\3\0\23\172\1\u015d\6\172\2\0\24\172\5\0"+
    "\1\107\2\0\1\110\5\0\1\110\2\0\7\110\3\0"+
    "\10\110\1\u015e\21\110\2\0\24\110\5\0\1\107\2\0"+
    "\1\110\5\0\1\110\1\112\1\0\7\110\3\0\32\46"+
    "\2\0\1\u015f\23\46\20\0\1\u0160\127\0\1\u0161\34\0"+
    "\1\u0161\55\0\1\u0162\34\0\1\u0162\25\0\1\107\2\0"+
    "\1\110\5\0\1\110\2\0\1\u0163\2\u0164\1\u0165\3\110"+
    "\3\0\32\110\2\0\24\110\10\0\1\u0146\5\0\1\u0146"+
    "\1\0\10\u0146\3\0\32\u0146\2\0\24\u0146\5\0\1\107"+
    "\2\0\1\110\5\0\1\110\2\0\7\110\3\0\2\110"+
    "\1\u0166\27\110\2\0\24\110\5\0\1\107\2\0\1\110"+
    "\5\0\1\110\1\112\1\0\7\110\3\0\16\46\1\u0167"+
    "\13\46\2\0\1\110\23\46\5\0\1\107\2\0\1\110"+
    "\5\0\1\110\2\0\7\110\3\0\23\110\1\u0168\6\110"+
    "\2\0\24\110\5\0\1\107\2\0\1\110\5\0\1\110"+
    "\2\0\7\110\3\0\27\110\1\u0169\2\110\2\0\24\110"+
    "\5\0\1\107\2\0\1\110\5\0\1\u016a\1\112\1\0"+
    "\7\110\3\0\21\46\1\u016b\1\u016c\7\46\2\0\1\110"+
    "\23\46\5\0\1\107\2\0\1\110\5\0\1\110\2\0"+
    "\7\110\3\0\24\110\1\u016d\5\110\2\0\24\110\5\0"+
    "\1\107\2\0\1\110\5\0\1\110\1\112\1\0\7\110"+
    "\3\0\1\u016e\31\46\2\0\1\110\23\46\5\0\1\107"+
    "\2\0\1\110\5\0\1\110\1\112\1\0\7\110\3\0"+
    "\32\46\2\0\1\u016f\23\46\5\0\1\107\2\0\1\110"+
    "\5\0\1\110\2\0\7\110\3\0\4\110\1\u0170\25\110"+
    "\2\0\24\110\5\0\1\107\2\0\1\110\5\0\1\110"+
    "\2\0\7\110\3\0\3\110\1\u0171\26\110\2\0\24\110"+
    "\5\0\1\107\2\0\1\110\5\0\1\110\1\112\1\0"+
    "\7\110\3\0\10\46\1\u0172\21\46\2\0\1\110\23\46"+
    "\5\0\1\107\2\0\1\110\5\0\1\110\1\112\1\0"+
    "\7\110\3\0\1\u0173\31\46\2\0\1\110\23\46\5\0"+
    "\1\107\2\0\1\110\5\0\1\110\2\0\7\110\3\0"+
    "\24\110\1\u0174\5\110\2\0\24\110\5\0\1\107\2\0"+
    "\1\110\5\0\1\110\1\112\1\0\7\110\3\0\21\46"+
    "\1\u0175\10\46\2\0\1\110\23\46\5\0\1\107\2\0"+
    "\1\110\5\0\1\110\2\0\7\110\3\0\1\u0176\31\110"+
    "\2\0\24\110\5\0\1\107\2\0\1\110\5\0\1\110"+
    "\2\0\7\110\3\0\21\110\1\u0177\10\110\2\0\24\110"+
    "\5\0\1\107\2\0\1\110\5\0\1\110\2\0\7\110"+
    "\3\0\22\110\1\u0178\7\110\2\0\24\110\5\0\1\107"+
    "\2\0\1\110\5\0\1\110\1\112\1\0\7\110\3\0"+
    "\16\46\1\u0179\13\46\2\0\1\110\23\46\5\0\1\107"+
    "\2\0\1\110\5\0\1\110\1\112\1\0\7\110\3\0"+
    "\16\46\1\u017a\13\46\2\0\1\110\23\46\5\0\1\107"+
    "\2\0\1\172\5\0\1\107\2\0\7\172\3\0\16\172"+
    "\1\u017b\13\172\2\0\24\172\5\0\1\107\2\0\1\110"+
    "\5\0\1\110\2\0\7\110\3\0\22\110\1\u017c\7\110"+
    "\2\0\24\110\5\0\1\107\2\0\1\110\5\0\1\110"+
    "\2\0\7\110\3\0\1\u017d\1\110\1\u017e\12\110\1\u017f"+
    "\14\110\2\0\24\110\33\0\32\u0180\3\0\23\u0180\43\0"+
    "\1\u0181\33\0\1\u0181\56\0\1\u0182\33\0\1\u0182\20\0"+
    "\1\107\2\0\1\110\5\0\1\110\2\0\1\110\5\u0183"+
    "\1\110\3\0\32\110\2\0\24\110\5\0\1\107\2\0"+
    "\1\110\5\0\1\110\2\0\6\u0183\1\110\3\0\32\110"+
    "\2\0\24\110\5\0\1\107\2\0\1\110\5\0\1\110"+
    "\2\0\2\u0183\5\110\3\0\32\110\2\0\24\110\5\0"+
    "\1\107\2\0\1\110\5\0\1\110\2\0\7\110\3\0"+
    "\16\110\1\u0184\13\110\2\0\24\110\5\0\1\107\2\0"+
    "\1\110\5\0\1\110\1\112\1\0\7\110\3\0\15\46"+
    "\1\u0185\14\46\2\0\1\110\23\46\5\0\1\107\2\0"+
    "\1\110\5\0\1\110\2\0\7\110\3\0\16\110\1\u0186"+
    "\13\110\2\0\24\110\5\0\1\107\2\0\1\110\5\0"+
    "\1\110\2\0\7\110\3\0\23\110\1\u0187\6\110\2\0"+
    "\24\110\5\0\1\107\2\0\1\110\5\0\1\110\2\0"+
    "\6\u0188\1\110\3\0\32\110\2\0\24\110\5\0\1\107"+
    "\2\0\1\110\5\0\1\110\1\112\1\0\7\110\3\0"+
    "\32\46\2\0\1\u0189\23\46\5\0\1\107\2\0\1\110"+
    "\5\0\1\110\2\0\7\110\3\0\1\u018a\31\110\2\0"+
    "\24\110\5\0\1\107\2\0\1\110\5\0\1\110\1\112"+
    "\1\0\7\110\3\0\13\46\1\u018b\16\46\2\0\1\110"+
    "\23\46\5\0\1\107\2\0\1\110\5\0\1\110\2\0"+
    "\7\110\3\0\2\110\1\u018c\2\110\1\u018d\16\110\1\u018e"+
    "\5\110\2\0\24\110\5\0\1\107\2\0\1\110\5\0"+
    "\1\110\2\0\7\110\3\0\1\u018f\31\110\2\0\24\110"+
    "\5\0\1\107\2\0\1\110\5\0\1\110\2\0\7\110"+
    "\3\0\10\110\1\u0190\21\110\2\0\24\110\5\0\1\107"+
    "\2\0\1\110\5\0\1\110\1\112\1\0\7\110\3\0"+
    "\16\46\1\u0191\13\46\2\0\1\110\23\46\5\0\1\107"+
    "\2\0\1\110\5\0\1\110\1\112\1\0\7\110\3\0"+
    "\21\46\1\u0106\10\46\2\0\1\110\23\46\5\0\1\107"+
    "\2\0\1\110\5\0\1\110\2\0\7\110\3\0\1\u0192"+
    "\31\110\2\0\24\110\5\0\1\107\2\0\1\110\5\0"+
    "\1\110\1\112\1\0\7\110\3\0\32\46\2\0\1\u0193"+
    "\23\46\5\0\1\107\2\0\1\110\5\0\1\110\2\0"+
    "\7\110\3\0\14\110\1\u0194\15\110\2\0\24\110\5\0"+
    "\1\107\2\0\1\110\5\0\1\110\2\0\7\110\3\0"+
    "\14\110\1\u0195\15\110\2\0\24\110\5\0\1\107\2\0"+
    "\1\110\5\0\1\110\2\0\7\110\3\0\22\110\1\u0196"+
    "\7\110\2\0\24\110\5\0\1\107\2\0\1\110\5\0"+
    "\1\110\1\112\1\0\7\110\3\0\22\46\1\u0197\7\46"+
    "\2\0\1\110\23\46\5\0\1\u0198\2\0\1\172\5\0"+
    "\1\107\2\0\7\172\3\0\32\172\2\0\24\172\5\0"+
    "\1\107\2\0\1\110\5\0\1\110\2\0\7\110\3\0"+
    "\10\110\1\u0199\21\110\2\0\24\110\5\0\1\107\2\0"+
    "\1\110\5\0\1\110\2\0\7\110\3\0\15\110\1\u019a"+
    "\14\110\2\0\24\110\5\0\1\107\2\0\1\110\5\0"+
    "\1\110\2\0\7\110\3\0\21\110\1\u019b\10\110\2\0"+
    "\24\110\5\0\1\107\2\0\1\110\5\0\1\110\2\0"+
    "\7\110\3\0\24\110\1\u019c\5\110\2\0\24\110\17\0"+
    "\1\112\13\0\32\u0180\3\0\23\u0180\56\0\1\u019d\31\0"+
    "\1\u019d\60\0\1\u019e\31\0\1\u019e\7\0\1\107\2\0"+
    "\1\110\5\0\1\110\2\0\7\110\3\0\14\110\1\u019f"+
    "\15\110\2\0\24\110\5\0\1\107\2\0\1\110\5\0"+
    "\1\110\2\0\7\110\3\0\16\110\1\u01a0\13\110\2\0"+
    "\24\110\5\0\1\107\2\0\1\110\5\0\1\110\2\0"+
    "\7\110\3\0\3\110\1\u01a1\26\110\2\0\24\110\5\0"+
    "\1\107\2\0\1\110\5\0\1\110\2\0\7\110\3\0"+
    "\21\110\1\u01a2\10\110\2\0\24\110\5\0\1\107\2\0"+
    "\1\110\5\0\1\110\1\112\1\0\7\110\3\0\4\46"+
    "\1\u01a3\25\46\2\0\1\110\23\46\5\0\1\107\2\0"+
    "\1\110\5\0\1\110\2\0\7\110\3\0\16\110\1\u01a4"+
    "\13\110\2\0\24\110\5\0\1\107\2\0\1\110\5\0"+
    "\1\110\2\0\7\110\3\0\16\110\1\u01a5\13\110\2\0"+
    "\24\110\5\0\1\107\2\0\1\110\5\0\1\110\2\0"+
    "\7\110\3\0\22\110\1\u01a6\7\110\2\0\24\110\5\0"+
    "\1\107\2\0\1\110\5\0\1\110\2\0\7\110\3\0"+
    "\2\110\1\u01a7\27\110\2\0\24\110\5\0\1\107\2\0"+
    "\1\110\5\0\1\110\2\0\7\110\3\0\5\110\1\u01a8"+
    "\24\110\2\0\24\110\5\0\1\107\2\0\1\110\5\0"+
    "\1\110\2\0\7\110\3\0\21\110\1\u01a9\10\110\2\0"+
    "\24\110\5\0\1\107\2\0\1\110\5\0\1\110\2\0"+
    "\7\110\3\0\2\110\1\u01aa\2\110\1\u01ab\16\110\1\u01ac"+
    "\5\110\2\0\24\110\5\0\1\107\2\0\1\110\5\0"+
    "\1\110\2\0\7\110\3\0\17\110\1\u01ad\12\110\2\0"+
    "\24\110\5\0\1\107\2\0\1\110\5\0\1\110\2\0"+
    "\7\110\3\0\24\110\1\u01ae\5\110\2\0\24\110\5\0"+
    "\1\107\2\0\1\110\5\0\1\110\2\0\7\110\3\0"+
    "\26\110\1\u01af\3\110\2\0\24\110\5\0\1\107\2\0"+
    "\1\110\5\0\1\110\1\112\1\0\7\110\3\0\32\46"+
    "\2\0\1\u01b0\23\46\5\0\1\107\2\0\1\172\5\0"+
    "\1\107\2\0\7\172\3\0\5\172\1\u01b1\24\172\2\0"+
    "\24\172\5\0\1\107\2\0\1\110\5\0\1\110\2\0"+
    "\7\110\3\0\1\110\1\u01b2\30\110\2\0\24\110\5\0"+
    "\1\107\2\0\1\110\5\0\1\110\2\0\7\110\3\0"+
    "\23\110\1\u01b3\6\110\2\0\24\110\5\0\1\107\2\0"+
    "\1\110\5\0\1\110\2\0\7\110\3\0\4\110\1\u01b4"+
    "\25\110\2\0\24\110\5\0\1\107\2\0\1\110\5\0"+
    "\1\110\2\0\7\110\3\0\4\110\1\u01b5\25\110\2\0"+
    "\24\110\57\0\1\u01b6\31\0\1\u01b6\60\0\1\u01b7\31\0"+
    "\1\u01b7\6\0\1\107\2\0\1\110\5\0\1\110\2\0"+
    "\7\110\3\0\17\110\1\u01b8\12\110\2\0\24\110\5\0"+
    "\1\107\2\0\1\110\5\0\1\110\2\0\7\110\3\0"+
    "\1\u01b9\31\110\2\0\24\110\5\0\1\107\2\0\1\110"+
    "\5\0\1\110\2\0\7\110\3\0\10\110\1\u01ba\21\110"+
    "\2\0\24\110\5\0\1\107\2\0\1\110\5\0\1\110"+
    "\1\112\1\0\7\110\3\0\22\46\1\u01bb\7\46\2\0"+
    "\1\110\23\46\5\0\1\107\2\0\1\110\5\0\1\110"+
    "\2\0\7\110\3\0\14\110\1\u01bc\15\110\2\0\24\110"+
    "\5\0\1\107\2\0\1\110\5\0\1\110\2\0\7\110"+
    "\3\0\21\110\1\u01bd\10\110\2\0\24\110\5\0\1\107"+
    "\2\0\1\110\5\0\1\110\2\0\7\110\3\0\24\110"+
    "\1\u01be\5\110\2\0\24\110\5\0\1\107\2\0\1\110"+
    "\5\0\1\110\2\0\7\110\3\0\10\110\1\u01bf\21\110"+
    "\2\0\24\110\5\0\1\107\2\0\1\110\5\0\1\110"+
    "\2\0\7\110\3\0\10\110\1\u01c0\21\110\2\0\24\110"+
    "\5\0\1\107\2\0\1\110\5\0\1\110\2\0\7\110"+
    "\3\0\10\110\1\u01c1\21\110\2\0\24\110\5\0\1\107"+
    "\2\0\1\110\5\0\1\110\2\0\7\110\3\0\16\110"+
    "\1\u01c2\13\110\2\0\24\110\5\0\1\107\2\0\1\110"+
    "\5\0\1\110\2\0\7\110\3\0\16\110\1\u01c3\13\110"+
    "\2\0\24\110\5\0\1\107\2\0\1\110\5\0\1\110"+
    "\2\0\7\110\3\0\22\110\1\u01c4\7\110\2\0\24\110"+
    "\5\0\1\107\2\0\1\110\5\0\1\110\2\0\7\110"+
    "\3\0\16\110\1\u01c5\13\110\2\0\24\110\5\0\1\107"+
    "\2\0\1\110\5\0\1\110\2\0\7\110\3\0\13\110"+
    "\1\u01c6\16\110\2\0\24\110\5\0\1\107\2\0\1\110"+
    "\5\0\1\110\2\0\7\110\3\0\16\110\1\u01c7\13\110"+
    "\2\0\24\110\5\0\1\107\2\0\1\110\5\0\1\110"+
    "\2\0\7\110\3\0\2\110\1\u01c8\2\110\1\u01c9\24\110"+
    "\2\0\24\110\5\0\1\107\2\0\1\172\5\0\1\107"+
    "\2\0\7\172\3\0\16\172\1\u01ca\13\172\2\0\24\172"+
    "\5\0\1\107\2\0\1\110\5\0\1\110\2\0\7\110"+
    "\3\0\13\110\1\u01cb\16\110\2\0\24\110\5\0\1\107"+
    "\2\0\1\110\5\0\1\110\2\0\7\110\3\0\10\110"+
    "\1\u01cc\21\110\2\0\24\110\5\0\1\107\2\0\1\110"+
    "\5\0\1\110\2\0\7\110\3\0\1\u01cd\31\110\2\0"+
    "\24\110\5\0\1\107\2\0\1\110\5\0\1\110\2\0"+
    "\7\110\3\0\25\110\1\u01ce\4\110\2\0\24\110\36\0"+
    "\1\u01cf\34\0\1\u01cf\55\0\1\u01d0\34\0\1\u01d0\24\0"+
    "\1\107\2\0\1\110\5\0\1\110\2\0\7\110\3\0"+
    "\16\110\1\u01d1\13\110\2\0\24\110\5\0\1\107\2\0"+
    "\1\110\5\0\1\110\2\0\7\110\3\0\23\110\1\u01d2"+
    "\6\110\2\0\24\110\5\0\1\107\2\0\1\110\5\0"+
    "\1\110\2\0\7\110\3\0\16\110\1\u01d3\13\110\2\0"+
    "\24\110\5\0\1\107\2\0\1\110\5\0\1\110\1\112"+
    "\1\0\7\110\3\0\32\46\2\0\1\u01d4\23\46\5\0"+
    "\1\107\2\0\1\110\5\0\1\110\2\0\7\110\3\0"+
    "\17\110\1\u01d5\12\110\2\0\24\110\5\0\1\107\2\0"+
    "\1\110\5\0\1\110\2\0\7\110\3\0\14\110\1\u01d6"+
    "\15\110\2\0\24\110\5\0\1\107\2\0\1\110\5\0"+
    "\1\110\2\0\7\110\3\0\1\u01d7\31\110\2\0\24\110"+
    "\5\0\1\107\2\0\1\110\5\0\1\110\2\0\7\110"+
    "\3\0\16\110\1\u01d8\13\110\2\0\24\110\5\0\1\107"+
    "\2\0\1\110\5\0\1\110\2\0\7\110\3\0\2\110"+
    "\1\u01d9\27\110\2\0\24\110\5\0\1\107\2\0\1\110"+
    "\5\0\1\110\2\0\7\110\3\0\16\110\1\u01da\13\110"+
    "\2\0\24\110\5\0\1\107\2\0\1\110\5\0\1\110"+
    "\2\0\7\110\3\0\14\110\1\u01db\15\110\2\0\24\110"+
    "\5\0\1\107\2\0\1\110\5\0\1\110\2\0\7\110"+
    "\3\0\21\110\1\u01dc\10\110\2\0\24\110\5\0\1\107"+
    "\2\0\1\110\5\0\1\110\2\0\7\110\3\0\24\110"+
    "\1\u01dd\5\110\2\0\24\110\5\0\1\107\2\0\1\110"+
    "\5\0\1\110\2\0\7\110\3\0\1\u01de\31\110\2\0"+
    "\24\110\5\0\1\107\2\0\1\110\5\0\1\110\2\0"+
    "\7\110\3\0\21\110\1\u01df\10\110\2\0\24\110\5\0"+
    "\1\107\2\0\1\110\5\0\1\110\2\0\7\110\3\0"+
    "\16\110\1\u01e0\13\110\2\0\24\110\5\0\1\107\2\0"+
    "\1\110\5\0\1\110\2\0\7\110\3\0\16\110\1\u01e1"+
    "\13\110\2\0\24\110\5\0\1\107\2\0\1\172\5\0"+
    "\1\107\2\0\7\172\3\0\21\172\1\u01e2\10\172\2\0"+
    "\24\172\5\0\1\107\2\0\1\110\5\0\1\110\2\0"+
    "\7\110\3\0\4\110\1\u01e3\25\110\2\0\24\110\5\0"+
    "\1\107\2\0\1\110\5\0\1\110\2\0\7\110\3\0"+
    "\6\110\1\u01e4\23\110\2\0\24\110\5\0\1\107\2\0"+
    "\1\110\5\0\1\110\2\0\7\110\3\0\2\110\1\u01e5"+
    "\27\110\2\0\24\110\5\0\1\107\2\0\1\110\5\0"+
    "\1\110\2\0\7\110\3\0\16\110\1\u01e6\13\110\2\0"+
    "\24\110\37\0\1\u01e7\34\0\1\u01e7\45\0\1\u01e8\7\0"+
    "\1\u01e9\34\0\1\u01e9\23\0\1\107\2\0\1\110\5\0"+
    "\1\110\2\0\7\110\3\0\15\110\1\u01ea\14\110\2\0"+
    "\24\110\5\0\1\107\2\0\1\110\5\0\1\110\2\0"+
    "\7\110\3\0\16\110\1\u01eb\13\110\2\0\24\110\5\0"+
    "\1\107\2\0\1\110\5\0\1\110\2\0\7\110\3\0"+
    "\24\110\1\u01ec\5\110\2\0\24\110\5\0\1\107\2\0"+
    "\1\110\5\0\1\110\2\0\7\110\3\0\16\110\1\u01ed"+
    "\13\110\2\0\24\110\5\0\1\107\2\0\1\110\5\0"+
    "\1\110\2\0\7\110\3\0\24\110\1\u01ee\5\110\2\0"+
    "\24\110\5\0\1\107\2\0\1\110\5\0\1\110\2\0"+
    "\7\110\3\0\21\110\1\u01ef\10\110\2\0\24\110\5\0"+
    "\1\107\2\0\1\110\5\0\1\110\2\0\7\110\3\0"+
    "\15\110\1\u01f0\14\110\2\0\24\110\5\0\1\107\2\0"+
    "\1\110\5\0\1\110\2\0\7\110\3\0\1\u01f1\31\110"+
    "\2\0\24\110\5\0\1\107\2\0\1\110\5\0\1\110"+
    "\2\0\7\110\3\0\17\110\1\u01f2\12\110\2\0\24\110"+
    "\5\0\1\107\2\0\1\110\5\0\1\110\2\0\7\110"+
    "\3\0\14\110\1\u01f3\15\110\2\0\24\110\5\0\1\107"+
    "\2\0\1\110\5\0\1\110\2\0\7\110\3\0\1\u01f4"+
    "\31\110\2\0\24\110\5\0\1\107\2\0\1\110\5\0"+
    "\1\110\2\0\7\110\3\0\21\110\1\u01f5\10\110\2\0"+
    "\24\110\5\0\1\107\2\0\1\110\5\0\1\110\2\0"+
    "\7\110\3\0\3\110\1\u01f6\26\110\2\0\24\110\5\0"+
    "\1\107\2\0\1\110\5\0\1\110\2\0\7\110\3\0"+
    "\14\110\1\u01f7\15\110\2\0\24\110\5\0\1\107\2\0"+
    "\1\110\5\0\1\110\2\0\7\110\3\0\21\110\1\u01f8"+
    "\10\110\2\0\24\110\5\0\1\107\2\0\1\172\5\0"+
    "\1\107\2\0\7\172\3\0\14\172\1\u01f9\15\172\2\0"+
    "\24\172\5\0\1\107\2\0\1\110\5\0\1\110\2\0"+
    "\7\110\3\0\24\110\1\u01fa\5\110\2\0\24\110\5\0"+
    "\1\107\2\0\1\110\5\0\1\110\2\0\7\110\3\0"+
    "\10\110\1\u01fb\21\110\2\0\24\110\55\0\1\u01fc\31\0"+
    "\1\u01fc\60\0\1\u01fd\31\0\1\u01fd\10\0\1\107\2\0"+
    "\1\110\5\0\1\110\2\0\7\110\3\0\4\110\1\u01fe"+
    "\25\110\2\0\24\110\5\0\1\107\2\0\1\110\5\0"+
    "\1\110\2\0\7\110\3\0\22\110\1\u01ff\7\110\2\0"+
    "\24\110\5\0\1\107\2\0\1\110\5\0\1\110\2\0"+
    "\7\110\3\0\22\110\1\u0200\7\110\2\0\24\110\5\0"+
    "\1\107\2\0\1\110\5\0\1\110\2\0\7\110\3\0"+
    "\15\110\1\u0201\14\110\2\0\24\110\5\0\1\107\2\0"+
    "\1\110\5\0\1\110\2\0\7\110\3\0\13\110\1\u0202"+
    "\16\110\2\0\24\110\5\0\1\107\2\0\1\110\5\0"+
    "\1\110\2\0\7\110\3\0\10\110\1\u0203\21\110\2\0"+
    "\24\110\5\0\1\107\2\0\1\110\5\0\1\110\2\0"+
    "\7\110\3\0\2\110\1\u0204\27\110\2\0\24\110\5\0"+
    "\1\107\2\0\1\110\5\0\1\110\2\0\7\110\3\0"+
    "\16\110\1\u0205\13\110\2\0\24\110\5\0\1\107\2\0"+
    "\1\110\5\0\1\110\2\0\7\110\3\0\24\110\1\u0206"+
    "\5\110\2\0\24\110\5\0\1\107\2\0\1\110\5\0"+
    "\1\110\2\0\7\110\3\0\21\110\1\u0207\10\110\2\0"+
    "\24\110\5\0\1\107\2\0\1\110\5\0\1\110\2\0"+
    "\7\110\3\0\10\110\1\u0208\21\110\2\0\24\110\5\0"+
    "\1\107\2\0\1\110\5\0\1\110\2\0\7\110\3\0"+
    "\17\110\1\u0209\12\110\2\0\24\110\5\0\1\107\2\0"+
    "\1\110\5\0\1\110\2\0\7\110\3\0\14\110\1\u020a"+
    "\15\110\2\0\24\110\5\0\1\107\2\0\1\110\5\0"+
    "\1\110\2\0\7\110\3\0\16\110\1\u020b\13\110\2\0"+
    "\24\110\5\0\1\107\2\0\1\110\5\0\1\110\2\0"+
    "\7\110\3\0\16\110\1\u020c\13\110\2\0\24\110\5\0"+
    "\1\107\2\0\1\110\5\0\1\110\2\0\7\110\3\0"+
    "\15\110\1\u020d\14\110\2\0\24\110\5\0\1\107\2\0"+
    "\1\110\5\0\1\110\2\0\7\110\3\0\24\110\1\u020e"+
    "\5\110\2\0\24\110\5\0\1\107\2\0\1\110\5\0"+
    "\1\110\2\0\7\110\3\0\4\110\1\u020f\25\110\2\0"+
    "\24\110\5\0\1\107\2\0\1\110\5\0\1\110\2\0"+
    "\7\110\3\0\1\u0210\31\110\2\0\24\110\5\0\1\107"+
    "\2\0\1\110\5\0\1\110\2\0\7\110\3\0\16\110"+
    "\1\u0211\13\110\2\0\24\110\5\0\1\107\2\0\1\110"+
    "\5\0\1\110\2\0\7\110\3\0\10\110\1\u0212\21\110"+
    "\2\0\24\110\5\0\1\107\2\0\1\110\5\0\1\110"+
    "\2\0\7\110\3\0\15\110\1\u0213\14\110\2\0\24\110"+
    "\5\0\1\107\2\0\1\110\5\0\1\110\2\0\7\110"+
    "\3\0\13\110\1\u0214\16\110\2\0\24\110\5\0\1\107"+
    "\2\0\1\110\5\0\1\110\2\0\7\110\3\0\10\110"+
    "\1\u0215\21\110\2\0\24\110\5\0\1\107\2\0\1\110"+
    "\5\0\1\110\2\0\7\110\3\0\16\110\1\u0216\13\110"+
    "\2\0\24\110\5\0\1\107\2\0\1\110\5\0\1\110"+
    "\2\0\7\110\3\0\16\110\1\u0217\13\110\2\0\24\110"+
    "\5\0\1\107\2\0\1\110\5\0\1\110\2\0\7\110"+
    "\3\0\24\110\1\u0218\5\110\2\0\24\110\5\0\1\107"+
    "\2\0\1\110\5\0\1\110\2\0\7\110\3\0\15\110"+
    "\1\u0219\14\110\2\0\24\110\5\0\1\107\2\0\1\110"+
    "\5\0\1\110\2\0\7\110\3\0\23\110\1\u021a\6\110"+
    "\2\0\24\110\5\0\1\107\2\0\1\110\5\0\1\110"+
    "\2\0\7\110\3\0\1\u021b\31\110\2\0\24\110\5\0"+
    "\1\107\2\0\1\110\5\0\1\110\2\0\7\110\3\0"+
    "\15\110\1\u021c\14\110\2\0\24\110\5\0\1\107\2\0"+
    "\1\110\5\0\1\110\2\0\7\110\3\0\21\110\1\u021d"+
    "\10\110\2\0\24\110\5\0\1\107\2\0\1\110\5\0"+
    "\1\110\2\0\7\110\3\0\16\110\1\u021e\13\110\2\0"+
    "\24\110\5\0\1\107\2\0\1\110\5\0\1\110\2\0"+
    "\7\110\3\0\4\110\1\u021f\25\110\2\0\24\110\5\0"+
    "\1\107\2\0\1\110\5\0\1\110\2\0\7\110\3\0"+
    "\1\u0220\31\110\2\0\24\110\5\0\1\107\2\0\1\110"+
    "\5\0\1\110\2\0\7\110\3\0\16\110\1\u0221\13\110"+
    "\2\0\24\110\5\0\1\107\2\0\1\110\5\0\1\110"+
    "\2\0\7\110\3\0\15\110\1\u0222\14\110\2\0\24\110"+
    "\5\0\1\107\2\0\1\110\5\0\1\110\2\0\7\110"+
    "\3\0\13\110\1\u0223\16\110\2\0\24\110\5\0\1\107"+
    "\2\0\1\110\5\0\1\110\2\0\7\110\3\0\4\110"+
    "\1\u0224\25\110\2\0\24\110\5\0\1\107\2\0\1\110"+
    "\5\0\1\110\2\0\7\110\3\0\21\110\1\u0225\10\110"+
    "\2\0\24\110\5\0\1\107\2\0\1\110\5\0\1\110"+
    "\2\0\7\110\3\0\23\110\1\u0226\6\110\2\0\24\110"+
    "\5\0\1\107\2\0\1\110\5\0\1\110\2\0\7\110"+
    "\3\0\10\110\1\u0227\21\110\2\0\24\110\5\0\1\107"+
    "\2\0\1\110\5\0\1\110\2\0\7\110\3\0\15\110"+
    "\1\u0228\14\110\2\0\24\110\5\0\1\107\2\0\1\110"+
    "\5\0\1\110\2\0\7\110\3\0\15\110\1\u0229\14\110"+
    "\2\0\24\110\5\0\1\107\2\0\1\110\5\0\1\110"+
    "\2\0\7\110\3\0\21\110\1\u022a\10\110\2\0\24\110"+
    "\5\0\1\107\2\0\1\110\5\0\1\110\2\0\7\110"+
    "\3\0\4\110\1\u022b\25\110\2\0\24\110\5\0\1\107"+
    "\2\0\1\110\5\0\1\110\2\0\7\110\3\0\1\u022c"+
    "\31\110\2\0\24\110\5\0\1\107\2\0\1\110\5\0"+
    "\1\110\2\0\7\110\3\0\10\110\1\u022d\21\110\2\0"+
    "\24\110\5\0\1\107\2\0\1\110\5\0\1\110\2\0"+
    "\7\110\3\0\4\110\1\u022e\25\110\2\0\24\110\5\0"+
    "\1\107\2\0\1\110\5\0\1\110\2\0\7\110\3\0"+
    "\16\110\1\u022f\13\110\2\0\24\110\5\0\1\107\2\0"+
    "\1\110\5\0\1\110\2\0\7\110\3\0\23\110\1\u0230"+
    "\6\110\2\0\24\110\5\0\1\107\2\0\1\110\5\0"+
    "\1\110\2\0\7\110\3\0\10\110\1\u0231\21\110\2\0"+
    "\24\110\5\0\1\107\2\0\1\110\5\0\1\110\2\0"+
    "\7\110\3\0\15\110\1\u0232\14\110\2\0\24\110\5\0"+
    "\1\107\2\0\1\110\5\0\1\110\2\0\7\110\3\0"+
    "\21\110\1\u0233\10\110\2\0\24\110\5\0\1\107\2\0"+
    "\1\110\5\0\1\110\2\0\7\110\3\0\16\110\1\u0234"+
    "\13\110\2\0\24\110\5\0\1\107\2\0\1\110\5\0"+
    "\1\110\2\0\7\110\3\0\4\110\1\u0235\25\110\2\0"+
    "\24\110\5\0\1\107\2\0\1\110\5\0\1\110\2\0"+
    "\7\110\3\0\16\110\1\u0236\13\110\2\0\24\110\5\0"+
    "\1\107\2\0\1\110\5\0\1\110\2\0\7\110\3\0"+
    "\23\110\1\u0237\6\110\2\0\24\110\5\0\1\107\2\0"+
    "\1\110\5\0\1\110\2\0\7\110\3\0\10\110\1\u0238"+
    "\21\110\2\0\24\110\5\0\1\107\2\0\1\110\5\0"+
    "\1\110\2\0\7\110\3\0\4\110\1\u0239\25\110\2\0"+
    "\24\110\5\0\1\107\2\0\1\110\5\0\1\110\2\0"+
    "\7\110\3\0\16\110\1\u023a\13\110\2\0\24\110\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[36975];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\2\1\1\0\5\11\1\1\1\11\2\0\4\11"+
    "\1\1\1\11\4\1\1\11\1\1\1\11\31\1\1\11"+
    "\3\1\1\11\4\1\3\11\2\0\1\11\1\1\1\0"+
    "\2\1\1\0\47\1\2\11\3\1\2\0\3\1\1\0"+
    "\54\1\2\0\2\1\1\0\46\1\2\0\2\1\1\0"+
    "\44\1\2\0\2\1\1\0\40\1\2\0\1\1\1\0"+
    "\31\1\1\0\2\1\3\0\33\1\3\0\35\1\3\0"+
    "\25\1\1\0\4\1\2\0\27\1\2\0\30\1\1\0"+
    "\26\1\1\0\1\11\1\0\22\1\2\11\75\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[570];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    private Symbol symbol(int type, Object value){
        return new Symbol(type, yyline, yycolumn, value);
    }
    private Symbol symbol(int type){
        return new Symbol(type, yyline, yycolumn);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    return ZZ_CMAP[input];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { /*Ignore*/
            }
            // fall through
          case 89: break;
          case 2:
            { /*ignore*/
            }
            // fall through
          case 90: break;
          case 3:
            { yybegin(STRING); return new Symbol(sym.COMILLAS, yycolumn, yyline, yytext());
            }
            // fall through
          case 91: break;
          case 4:
            { return new Symbol(sym.Parentesis_a, yycolumn, yyline, yytext());
            }
            // fall through
          case 92: break;
          case 5:
            { return new Symbol(sym.Parentesis_c, yycolumn, yyline, yytext());
            }
            // fall through
          case 93: break;
          case 6:
            { return new Symbol(sym.COMA, yycolumn, yyline, yytext());
            }
            // fall through
          case 94: break;
          case 7:
            { return new Symbol(sym.DOSP, yycolumn, yyline, yytext());
            }
            // fall through
          case 95: break;
          case 8:
            { return new Symbol(sym.MENORQ,yycolumn,yyline,yytext());
            }
            // fall through
          case 96: break;
          case 9:
            { return new Symbol(sym.MAYORQ,yycolumn,yyline,yytext());
            }
            // fall through
          case 97: break;
          case 10:
            { return new Symbol(sym.CORCHETEA, yycolumn, yyline, yytext());
            }
            // fall through
          case 98: break;
          case 11:
            { return new Symbol(sym.CORCHETEC, yycolumn, yyline, yytext());
            }
            // fall through
          case 99: break;
          case 12:
            { return new Symbol(sym.LLAVEA, yycolumn, yyline, yytext());
            }
            // fall through
          case 100: break;
          case 13:
            { return new Symbol(sym.LLAVEC, yycolumn, yyline, yytext());
            }
            // fall through
          case 101: break;
          case 14:
            { yybegin(YYINITIAL); return new Symbol(sym.COMILLAS, yycolumn, yyline, yytext());
            }
            // fall through
          case 102: break;
          case 15:
            { return new Symbol(sym.USUARIO,yycolumn,yyline,yytext());
            }
            // fall through
          case 103: break;
          case 16:
            { return new Symbol(sym.ID,yycolumn,yyline,yytext());
            }
            // fall through
          case 104: break;
          case 17:
            { yybegin(RESTRICCION); return new Symbol(sym.CORCHETEA, yycolumn, yyline, yytext());
            }
            // fall through
          case 105: break;
          case 18:
            { yybegin(RESTRICCION); return new Symbol(sym.APOSTROFE, yycolumn, yyline, yytext());
            }
            // fall through
          case 106: break;
          case 19:
            { return new Symbol(sym.NUMERO, yycolumn, yyline, yytext());
            }
            // fall through
          case 107: break;
          case 20:
            { return new Symbol(sym.OR,yycolumn,yyline,yytext());
            }
            // fall through
          case 108: break;
          case 21:
            { yybegin(STRING); return new Symbol(sym.APOSTROFE, yycolumn, yyline, yytext());
            }
            // fall through
          case 109: break;
          case 22:
            { return new Symbol(sym.IGUAL,yycolumn,yyline,yytext());
            }
            // fall through
          case 110: break;
          case 23:
            { yybegin(CONSULTA);return new Symbol(sym.CORCHETEC, yycolumn, yyline, yytext());
            }
            // fall through
          case 111: break;
          case 24:
            { return new Symbol(sym.FINE,yycolumn,yyline,yytext());
            }
            // fall through
          case 112: break;
          case 25:
            { return new Symbol(sym.INICIOE,yycolumn,yyline,yytext());
            }
            // fall through
          case 113: break;
          case 26:
            { return new Symbol(sym.DE,yycolumn,yyline,yytext());
            }
            // fall through
          case 114: break;
          case 27:
            { return new Symbol(sym.IDP,yycolumn,yyline,yytext());
            }
            // fall through
          case 115: break;
          case 28:
            { return new Symbol(sym.BOOL,yycolumn,yyline,yytext());
            }
            // fall through
          case 116: break;
          case 29:
            { return new Symbol(sym.DEC, yycolumn,yyline,yytext());
            }
            // fall through
          case 117: break;
          case 30:
            { return new Symbol(sym.MENORIGUAL,yycolumn,yyline,yytext());
            }
            // fall through
          case 118: break;
          case 31:
            { return new Symbol(sym.MAYORIGUAL,yycolumn,yyline,yytext());
            }
            // fall through
          case 119: break;
          case 32:
            { return new Symbol(sym.OROP,yycolumn,yyline,yytext());
            }
            // fall through
          case 120: break;
          case 33:
            { return new Symbol(sym.TITULO, yycolumn, yyline, yytext());
            }
            // fall through
          case 121: break;
          case 34:
            { return new Symbol(sym.URLC,yycolumn,yyline,yytext());
            }
            // fall through
          case 122: break;
          case 35:
            { return new Symbol(sym.AND,yycolumn,yyline,yytext());
            }
            // fall through
          case 123: break;
          case 36:
            { return new Symbol(sym.NOT,yycolumn,yyline,yytext());
            }
            // fall through
          case 124: break;
          case 37:
            { return new Symbol(sym.TEMA,yycolumn,yyline,yytext());
            }
            // fall through
          case 125: break;
          case 38:
            { return new Symbol(sym.TEMAP,yycolumn,yyline,yytext());
            }
            // fall through
          case 126: break;
          case 39:
            { return new Symbol(sym.WHERE,yycolumn,yyline,yytext());
            }
            // fall through
          case 127: break;
          case 40:
            { return new Symbol(sym.CLASEBOTON,yycolumn,yyline,yytext());
            }
            // fall through
          case 128: break;
          case 41:
            { return new Symbol(sym.CLASE,yycolumn,yyline,yytext());
            }
            // fall through
          case 129: break;
          case 42:
            { return new Symbol(sym.CLASEOPCIONES,yycolumn,yyline,yytext());
            }
            // fall through
          case 130: break;
          case 43:
            { return new Symbol(sym.FILAS,yycolumn,yyline,yytext());
            }
            // fall through
          case 131: break;
          case 44:
            { return new Symbol(sym.ALINEA,yycolumn,yyline,yytext());
            }
            // fall through
          case 132: break;
          case 45:
            { return new Symbol(sym.CLASEIMAGEN,yycolumn,yyline,yytext());
            }
            // fall through
          case 133: break;
          case 46:
            { return new Symbol(sym.INDICEC,yycolumn,yyline,yytext());
            }
            // fall through
          case 134: break;
          case 47:
            { return new Symbol(sym.NOMBREP,yycolumn,yyline,yytext());
            }
            // fall through
          case 135: break;
          case 48:
            { return new Symbol(sym.TITULOP,yycolumn,yyline,yytext());
            }
            // fall through
          case 136: break;
          case 49:
            { return new Symbol(sym.CLASENORMAL,yycolumn,yyline,yytext());
            }
            // fall through
          case 137: break;
          case 50:
            { return new Symbol(sym.USUARIOP,yycolumn,yyline,yytext());
            }
            // fall through
          case 138: break;
          case 51:
            { return new Symbol(sym.URL, yycolumn,yyline,yytext());
            }
            // fall through
          case 139: break;
          case 52:
            { return new Symbol(sym.COLUMNAS,yycolumn,yyline,yytext());
            }
            // fall through
          case 140: break;
          case 53:
            { return new Symbol(sym.OPCIONES,yycolumn,yyline,yytext());
            }
            // fall through
          case 141: break;
          case 54:
            { return new Symbol(sym.CONTRAP,yycolumn,yyline,yytext());
            }
            // fall through
          case 142: break;
          case 55:
            { return new Symbol(sym.CONSULTASP,yycolumn,yyline,yytext());
            }
            // fall through
          case 143: break;
          case 56:
            { return new Symbol(sym.REQUERIDO,yycolumn,yyline,yytext());
            }
            // fall through
          case 144: break;
          case 57:
            { return new Symbol(sym.FECHA,yycolumn,yyline,yytext());
            }
            // fall through
          case 145: break;
          case 58:
            { return new Symbol(sym.ALINEAC,yycolumn,yyline,yytext());
            }
            // fall through
          case 146: break;
          case 59:
            { return new Symbol(sym.CLASEAREA,yycolumn,yyline,yytext());
            }
            // fall through
          case 147: break;
          case 60:
            { return new Symbol(sym.NOCONSULTA,yycolumn,yyline,yytext());
            }
            // fall through
          case 148: break;
          case 61:
            { return new Symbol(sym.FORMULARIOC,yycolumn,yyline,yytext());
            }
            // fall through
          case 149: break;
          case 62:
            { return new Symbol(sym.NOMBREC,yycolumn,yyline,yytext());
            }
            // fall through
          case 150: break;
          case 63:
            { return new Symbol(sym.FINS,yycolumn,yyline,yytext());
            }
            // fall through
          case 151: break;
          case 64:
            { return new Symbol(sym.CREARU,yycolumn,yyline,yytext());
            }
            // fall through
          case 152: break;
          case 65:
            { return new Symbol(sym.LOGINU,yycolumn,yyline,yytext());
            }
            // fall through
          case 153: break;
          case 66:
            { return new Symbol(sym.TEXTOVC,yycolumn,yyline,yytext());
            }
            // fall through
          case 154: break;
          case 67:
            { return new Symbol(sym.USUARIONP,yycolumn,yyline,yytext());
            }
            // fall through
          case 155: break;
          case 68:
            { return new Symbol(sym.INICIOS, yycolumn, yyline, yytext());
            }
            // fall through
          case 156: break;
          case 69:
            { return new Symbol(sym.FECHACP,yycolumn,yyline,yytext());
            }
            // fall through
          case 157: break;
          case 70:
            { return new Symbol(sym.NUEVOP,yycolumn,yyline,yytext());
            }
            // fall through
          case 158: break;
          case 71:
            { yybegin(CONSULTA); return new Symbol(sym.SELECT,yycolumn,yyline,yytext());
            }
            // fall through
          case 159: break;
          case 72:
            { return new Symbol(sym.FINSOLICITUDES, yycolumn, yyline, yytext());
            }
            // fall through
          case 160: break;
          case 73:
            { return new Symbol(sym.SOLICITUDESP, yycolumn, yyline, yytext());
            }
            // fall through
          case 161: break;
          case 74:
            { return new Symbol(sym.CONSULTARD,yycolumn,yyline,yytext());
            }
            // fall through
          case 162: break;
          case 75:
            { return new Symbol(sym.USUARIOAP,yycolumn,yyline,yytext());
            }
            // fall through
          case 163: break;
          case 76:
            { return new Symbol(sym.ELIMINARU,yycolumn,yyline,yytext());
            }
            // fall through
          case 164: break;
          case 77:
            { return new Symbol(sym.NUEVOFP,yycolumn,yyline,yytext());
            }
            // fall through
          case 165: break;
          case 78:
            { return new Symbol(sym.USUARIOCP,yycolumn,yyline,yytext());
            }
            // fall through
          case 166: break;
          case 79:
            { return new Symbol(sym.MODIFICARU,yycolumn,yyline,yytext());
            }
            // fall through
          case 167: break;
          case 80:
            { return new Symbol(sym.AGREGARC,yycolumn,yyline,yytext());
            }
            // fall through
          case 168: break;
          case 81:
            { return new Symbol(sym.FECHAMP,yycolumn,yyline,yytext());
            }
            // fall through
          case 169: break;
          case 82:
            { return new Symbol(sym.ELIMINARC,yycolumn,yyline,yytext());
            }
            // fall through
          case 170: break;
          case 83:
            { return new Symbol(sym.ELIMINARF,yycolumn,yyline,yytext());
            }
            // fall through
          case 171: break;
          case 84:
            { return new Symbol(sym.CREDENCIALES,yycolumn,yyline,yytext());
            }
            // fall through
          case 172: break;
          case 85:
            { return new Symbol(sym.MODIFICARC,yycolumn,yyline,yytext());
            }
            // fall through
          case 173: break;
          case 86:
            { return new Symbol(sym.MODIFICARF,yycolumn,yyline,yytext());
            }
            // fall through
          case 174: break;
          case 87:
            { return new Symbol(sym.PARAMC,yycolumn,yyline,yytext());
            }
            // fall through
          case 175: break;
          case 88:
            { return new Symbol(sym.PARAMF,yycolumn,yyline,yytext());
            }
            // fall through
          case 176: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
