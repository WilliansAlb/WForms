
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.Symbol;
import POJOS.*;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parserALM extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return symALM.class;
}

  /** Default constructor. */
  @Deprecated
  public parserALM() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parserALM(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parserALM(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\115\000\002\002\004\000\002\002\006\000\002\002" +
    "\006\000\002\002\006\000\002\003\007\000\002\003\005" +
    "\000\002\004\007\000\002\004\005\000\002\034\010\000" +
    "\002\040\002\000\002\040\012\000\002\035\011\000\002" +
    "\036\011\000\002\005\017\000\002\006\011\000\002\012" +
    "\011\000\002\013\011\000\002\007\011\000\002\010\011" +
    "\000\002\011\011\000\002\014\011\000\002\016\002\000" +
    "\002\016\007\000\002\016\005\000\002\037\005\000\002" +
    "\037\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\052\003\000\002" +
    "\052\003\000\002\052\003\000\002\017\011\000\002\020" +
    "\011\000\002\053\003\000\002\053\003\000\002\053\003" +
    "\000\002\053\003\000\002\053\003\000\002\021\011\000" +
    "\002\022\011\000\002\023\011\000\002\024\011\000\002" +
    "\026\011\000\002\025\011\000\002\033\005\000\002\033" +
    "\003\000\002\027\011\000\002\030\011\000\002\031\011" +
    "\000\002\032\003\000\002\032\003\000\002\032\003\000" +
    "\002\032\003\000\002\032\003\000\002\051\002\000\002" +
    "\051\003\000\002\041\006\000\002\042\002\000\002\042" +
    "\004\000\002\043\031\000\002\044\006\000\002\045\002" +
    "\000\002\045\004\000\002\046\011\000\002\047\006\000" +
    "\002\050\002\000\002\050\004\000\002\054\031" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0127\000\010\056\006\057\005\062\004\001\002\000" +
    "\004\013\337\001\002\000\004\013\271\001\002\000\004" +
    "\013\011\001\002\000\004\002\010\001\002\000\004\002" +
    "\001\001\002\000\004\026\013\001\002\000\006\014\265" +
    "\032\264\001\002\000\004\004\015\001\002\000\004\027" +
    "\263\001\002\000\004\017\255\001\002\000\004\032\017" +
    "\001\002\000\004\004\021\001\002\000\004\032\035\001" +
    "\002\000\004\021\022\001\002\000\004\004\023\001\002" +
    "\000\004\005\024\001\002\000\004\004\025\001\002\000" +
    "\014\007\031\015\032\016\030\031\027\033\026\001\002" +
    "\000\006\004\uffc7\012\uffc7\001\002\000\006\004\uffc3\012" +
    "\uffc3\001\002\000\006\004\uffc4\012\uffc4\001\002\000\006" +
    "\004\uffc5\012\uffc5\001\002\000\006\004\uffc6\012\uffc6\001" +
    "\002\000\004\004\034\001\002\000\004\032\ufff0\001\002" +
    "\000\004\004\037\001\002\000\004\032\051\001\002\000" +
    "\004\022\040\001\002\000\004\004\041\001\002\000\004" +
    "\005\042\001\002\000\004\004\043\001\002\000\010\015" +
    "\047\031\044\033\045\001\002\000\004\004\uffda\001\002" +
    "\000\004\004\uffdb\001\002\000\004\004\050\001\002\000" +
    "\004\004\uffdc\001\002\000\004\032\uffef\001\002\000\004" +
    "\004\053\001\002\000\004\032\062\001\002\000\004\023" +
    "\054\001\002\000\004\004\055\001\002\000\004\005\056" +
    "\001\002\000\004\004\057\001\002\000\004\025\060\001" +
    "\002\000\004\004\061\001\002\000\004\032\uffee\001\002" +
    "\000\004\004\064\001\002\000\004\032\073\001\002\000" +
    "\004\024\065\001\002\000\004\004\066\001\002\000\004" +
    "\005\067\001\002\000\004\004\070\001\002\000\004\015" +
    "\071\001\002\000\004\004\072\001\002\000\004\032\ufff2" +
    "\001\002\000\004\004\075\001\002\000\004\032\104\001" +
    "\002\000\004\006\076\001\002\000\004\004\077\001\002" +
    "\000\004\005\100\001\002\000\004\004\101\001\002\000" +
    "\004\016\102\001\002\000\004\004\103\001\002\000\006" +
    "\027\ufff1\032\ufff1\001\002\000\004\004\105\001\002\000" +
    "\004\060\107\001\002\000\004\027\ufff4\001\002\000\004" +
    "\004\110\001\002\000\004\005\111\001\002\000\004\013" +
    "\112\001\002\000\010\014\uffec\026\114\032\uffec\001\002" +
    "\000\006\014\251\032\250\001\002\000\004\004\124\001" +
    "\002\000\006\027\uffe7\032\uffe7\001\002\000\006\027\uffe6" +
    "\032\uffe6\001\002\000\006\027\uffe5\032\uffe5\001\002\000" +
    "\006\027\uffe8\032\uffe8\001\002\000\006\027\uffe4\032\uffe4" +
    "\001\002\000\006\027\246\032\245\001\002\000\006\027" +
    "\uffe1\032\uffe1\001\002\000\030\020\137\030\144\035\145" +
    "\036\136\037\141\040\135\041\142\042\134\043\133\047" +
    "\143\050\140\001\002\000\006\027\uffdf\032\uffdf\001\002" +
    "\000\006\027\uffe3\032\uffe3\001\002\000\006\027\uffe2\032" +
    "\uffe2\001\002\000\006\027\uffe0\032\uffe0\001\002\000\006" +
    "\027\uffdd\032\uffdd\001\002\000\006\027\uffde\032\uffde\001" +
    "\002\000\004\004\240\001\002\000\004\004\230\001\002" +
    "\000\004\004\223\001\002\000\004\004\216\001\002\000" +
    "\004\004\211\001\002\000\004\004\204\001\002\000\004" +
    "\004\177\001\002\000\004\004\172\001\002\000\004\004" +
    "\165\001\002\000\004\004\160\001\002\000\004\004\146" +
    "\001\002\000\004\005\147\001\002\000\004\004\150\001" +
    "\002\000\014\051\154\052\152\053\155\054\151\055\153" +
    "\001\002\000\004\004\uffd4\001\002\000\004\004\uffd6\001" +
    "\002\000\004\004\uffd3\001\002\000\004\004\uffd7\001\002" +
    "\000\004\004\uffd5\001\002\000\004\004\157\001\002\000" +
    "\006\027\uffd2\032\uffd2\001\002\000\004\005\161\001\002" +
    "\000\004\004\162\001\002\000\010\015\047\031\044\033" +
    "\045\001\002\000\004\004\164\001\002\000\006\027\uffd8" +
    "\032\uffd8\001\002\000\004\005\166\001\002\000\004\004" +
    "\167\001\002\000\004\031\170\001\002\000\004\004\171" +
    "\001\002\000\006\027\uffc9\032\uffc9\001\002\000\004\005" +
    "\173\001\002\000\004\004\174\001\002\000\004\011\175" +
    "\001\002\000\004\004\176\001\002\000\006\027\uffce\032" +
    "\uffce\001\002\000\004\005\200\001\002\000\004\004\201" +
    "\001\002\000\014\007\031\015\032\016\030\031\027\033" +
    "\026\001\002\000\004\004\203\001\002\000\006\027\uffd0" +
    "\032\uffd0\001\002\000\004\005\205\001\002\000\004\004" +
    "\206\001\002\000\004\034\207\001\002\000\004\004\210" +
    "\001\002\000\006\027\uffc8\032\uffc8\001\002\000\004\005" +
    "\212\001\002\000\004\004\213\001\002\000\004\033\214" +
    "\001\002\000\004\004\215\001\002\000\006\027\uffd9\032" +
    "\uffd9\001\002\000\004\005\217\001\002\000\004\004\220" +
    "\001\002\000\004\031\221\001\002\000\004\004\222\001" +
    "\002\000\006\027\uffd1\032\uffd1\001\002\000\004\005\224" +
    "\001\002\000\004\004\225\001\002\000\004\010\226\001" +
    "\002\000\004\004\227\001\002\000\006\027\uffcf\032\uffcf" +
    "\001\002\000\004\005\231\001\002\000\004\004\232\001" +
    "\002\000\014\007\031\015\032\016\030\031\027\033\026" +
    "\001\002\000\006\004\236\012\235\001\002\000\006\004" +
    "\uffcb\012\uffcb\001\002\000\014\007\031\015\032\016\030" +
    "\031\027\033\026\001\002\000\006\027\uffcd\032\uffcd\001" +
    "\002\000\006\004\uffcc\012\uffcc\001\002\000\004\005\241" +
    "\001\002\000\004\004\242\001\002\000\004\031\243\001" +
    "\002\000\004\004\244\001\002\000\006\027\uffca\032\uffca" +
    "\001\002\000\004\004\124\001\002\000\006\014\uffea\032" +
    "\uffea\001\002\000\006\027\uffe9\032\uffe9\001\002\000\004" +
    "\026\252\001\002\000\004\027\uffed\001\002\000\004\004" +
    "\124\001\002\000\006\027\254\032\245\001\002\000\006" +
    "\014\uffeb\032\uffeb\001\002\000\004\004\256\001\002\000" +
    "\004\005\257\001\002\000\004\004\260\001\002\000\004" +
    "\033\261\001\002\000\004\004\262\001\002\000\004\032" +
    "\ufff3\001\002\000\006\014\ufffc\032\ufffc\001\002\000\004" +
    "\026\266\001\002\000\004\002\000\001\002\000\004\004" +
    "\015\001\002\000\004\027\270\001\002\000\006\014\ufffd" +
    "\032\ufffd\001\002\000\004\026\272\001\002\000\004\004" +
    "\300\001\002\000\006\014\275\032\274\001\002\000\004" +
    "\026\276\001\002\000\004\002\uffff\001\002\000\004\004" +
    "\300\001\002\000\004\032\311\001\002\000\004\044\303" +
    "\001\002\000\004\027\302\001\002\000\006\014\ufffb\032" +
    "\ufffb\001\002\000\004\004\304\001\002\000\004\005\305" +
    "\001\002\000\004\004\306\001\002\000\004\015\307\001" +
    "\002\000\004\004\310\001\002\000\004\032\ufff6\001\002" +
    "\000\004\004\313\001\002\000\004\032\322\001\002\000" +
    "\004\045\314\001\002\000\004\004\315\001\002\000\004" +
    "\005\316\001\002\000\004\004\317\001\002\000\010\015" +
    "\047\031\044\033\045\001\002\000\004\004\321\001\002" +
    "\000\004\032\ufff5\001\002\000\004\004\075\001\002\000" +
    "\006\027\ufff8\032\324\001\002\000\004\004\326\001\002" +
    "\000\004\027\ufff9\001\002\000\004\046\327\001\002\000" +
    "\004\004\330\001\002\000\004\005\331\001\002\000\004" +
    "\004\332\001\002\000\004\016\333\001\002\000\004\004" +
    "\334\001\002\000\004\027\ufff7\001\002\000\004\027\336" +
    "\001\002\000\006\014\ufffa\032\ufffa\001\002\000\006\014" +
    "\uffc2\026\341\001\002\000\004\014\u0129\001\002\000\004" +
    "\004\343\001\002\000\004\014\uffc1\001\002\000\004\017" +
    "\351\001\002\000\004\027\345\001\002\000\006\014\uffbf" +
    "\032\346\001\002\000\004\026\341\001\002\000\004\014" +
    "\uffc0\001\002\000\004\014\uffbe\001\002\000\004\004\352" +
    "\001\002\000\004\005\353\001\002\000\004\004\354\001" +
    "\002\000\004\033\355\001\002\000\004\004\356\001\002" +
    "\000\004\032\357\001\002\000\004\004\360\001\002\000" +
    "\004\022\361\001\002\000\004\004\362\001\002\000\004" +
    "\005\363\001\002\000\004\004\364\001\002\000\004\015" +
    "\365\001\002\000\004\004\366\001\002\000\004\032\367" +
    "\001\002\000\004\004\370\001\002\000\004\064\371\001" +
    "\002\000\004\004\372\001\002\000\004\005\373\001\002" +
    "\000\004\013\374\001\002\000\004\026\376\001\002\000" +
    "\004\014\u0128\001\002\000\004\004\u0100\001\002\000\004" +
    "\027\u0124\001\002\000\004\061\u0101\001\002\000\004\004" +
    "\u0102\001\002\000\004\005\u0103\001\002\000\004\013\u0104" +
    "\001\002\000\004\026\u0105\001\002\000\004\004\u0109\001" +
    "\002\000\004\014\u0107\001\002\000\004\027\uffb9\001\002" +
    "\000\004\027\u0120\001\002\000\004\020\u010a\001\002\000" +
    "\004\004\u010b\001\002\000\004\005\u010c\001\002\000\004" +
    "\004\u010d\001\002\000\004\033\u010e\001\002\000\004\004" +
    "\u010f\001\002\000\004\032\u0110\001\002\000\004\004\u0111" +
    "\001\002\000\004\030\u0112\001\002\000\004\004\u0113\001" +
    "\002\000\004\005\u0114\001\002\000\004\004\u0115\001\002" +
    "\000\004\015\u0116\001\002\000\004\004\u0117\001\002\000" +
    "\004\032\u0118\001\002\000\004\004\u0119\001\002\000\004" +
    "\063\u011a\001\002\000\004\004\u011b\001\002\000\004\005" +
    "\u011c\001\002\000\004\004\u011d\001\002\000\014\007\031" +
    "\015\032\016\030\031\027\033\026\001\002\000\004\004" +
    "\u011f\001\002\000\004\027\uffb5\001\002\000\006\014\uffb7" +
    "\032\u0121\001\002\000\004\026\u0105\001\002\000\004\014" +
    "\uffb8\001\002\000\004\014\uffb6\001\002\000\006\014\uffbb" +
    "\032\u0125\001\002\000\004\026\376\001\002\000\004\014" +
    "\uffbc\001\002\000\004\014\uffba\001\002\000\004\027\uffbd" +
    "\001\002\000\004\002\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0127\000\004\002\006\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\003\011\001\001\000\002\001\001\000" +
    "\006\005\013\006\015\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\017\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\032\032\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\035\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\052\045\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\051\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\062\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\073\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\105\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\016\112\001\001\000\002\001\001\000\034\015\117\017" +
    "\114\020\115\021\116\022\120\023\125\024\126\025\122" +
    "\026\127\027\124\030\131\031\130\037\121\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\053\155\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\052\162\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\032\201\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\032\233\033\232\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\032\236\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\015\246\017\114\020\115\021\116\022\120\023\125" +
    "\024\126\025\122\026\127\027\124\030\131\031\130\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\015\117\017\114\020\115\021" +
    "\116\022\120\023\125\024\126\025\122\026\127\027\124" +
    "\030\131\031\130\037\252\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\005\266\006\015\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\004\272\001\001\000\006\034\334" +
    "\035\276\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\034\300\035\276\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\036\311\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\052\317\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\322\001\001\000\004\040\324\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\041\341\051\337\001\001\000" +
    "\002\001\001\000\004\043\343\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\042\346\001" +
    "\001\000\004\041\347\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\044\374\001\001\000\002\001\001\000\004\046" +
    "\376\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\047" +
    "\u0105\001\001\000\004\054\u0107\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\032" +
    "\u011d\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\050\u0121\001\001\000\004\047\u0122\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\045\u0125\001\001\000\004" +
    "\044\u0126\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parserALM$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parserALM$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parserALM$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol sym;
    
    public ArrayList<Usuario> listado_usuarios = new ArrayList<>();
    public ArrayList<Formulario> listado_formularios = new ArrayList<>();
    public ArrayList<Formulario> listado_datos = new ArrayList<>();
    public ArrayList<Componente> listado_componentes = new ArrayList<>();

    public Usuario usuario_temporal = new Usuario();
    public Formulario form_temporal = new Formulario();
    public Formulario form_dato = new Formulario();
    public Registro reg_dato = new Registro();
    public Componente comp_temporal = new Componente();

    public Symbol getS(){
        return this.sym;
    }

    public void report_fatal_error(String message, Object info) {
        System.out.println("reportfatal "+message+info);
    }
    public void report_fatal_error(Symbol cur) {
        System.out.println("unrecovered_syntax_error");
    }

    public void syntax_error(Symbol cur_token) {
        System.out.println(symbl_name_from_id(expected_token_ids().get(0)));
        System.out.println("syntaxerr: " + symbl_name_from_id(cur_token.sym) +" Linea: "+cur_token.right+" Columna: "+cur_token.left+" Valor:"+cur_token.value);
    }

    protected int error_sync_size() {
        return 1;
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parserALM$actions {
  private final parserALM parser;

  /** Constructor */
  CUP$parserALM$actions(parserALM parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parserALM$do_action_part00000000(
    int                        CUP$parserALM$act_num,
    java_cup.runtime.lr_parser CUP$parserALM$parser,
    java.util.Stack            CUP$parserALM$stack,
    int                        CUP$parserALM$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parserALM$result;

      /* select the action based on the action number */
      switch (CUP$parserALM$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)).value;
		RESULT = start_val;
              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parserALM$parser.done_parsing();
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= INICIOFORM PARENTESISA bloque_forms PARENTESISC 
            {
              Object RESULT =null;

              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-3)), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= INICIOUSUARIOS PARENTESISA bloque_usuarios PARENTESISC 
            {
              Object RESULT =null;

              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-3)), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicio ::= INICIODATOS PARENTESISA bloque_dat PARENTESISC 
            {
              Object RESULT =null;

              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-3)), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // bloque_forms ::= bloque_forms COMA LLAVEA parametros_form LLAVEC 
            {
              Object RESULT =null;
		listado_formularios.add(form_temporal); form_temporal = new Formulario();
              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("bloque_forms",1, ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-4)), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // bloque_forms ::= LLAVEA parametros_form LLAVEC 
            {
              Object RESULT =null;
		listado_formularios.add(form_temporal); form_temporal = new Formulario();
              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("bloque_forms",1, ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-2)), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // bloque_usuarios ::= bloque_usuarios COMA LLAVEA parametros_usuarios LLAVEC 
            {
              Object RESULT =null;
		listado_usuarios.add(usuario_temporal); usuario_temporal = new Usuario();
              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("bloque_usuarios",2, ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-4)), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // bloque_usuarios ::= LLAVEA parametros_usuarios LLAVEC 
            {
              Object RESULT =null;
		listado_usuarios.add(usuario_temporal); usuario_temporal = new Usuario();
              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("bloque_usuarios",2, ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-2)), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // parametros_usuarios ::= parametro_usuario COMA parametro_password COMA parametro_fecha_creacion opcional_usuario 
            {
              Object RESULT =null;

              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("parametros_usuarios",26, ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-5)), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // opcional_usuario ::= 
            {
              Object RESULT =null;

              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("opcional_usuario",30, ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // opcional_usuario ::= COMA COMILLAS FECHAMP COMILLAS DOSP COMILLAS FECHA COMILLAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)).value;
		usuario_temporal.setFecha_mod(e1.toString());
              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("opcional_usuario",30, ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-7)), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // parametro_usuario ::= COMILLAS USUARIOP COMILLAS DOSP COMILLAS USUARIO COMILLAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)).value;
		usuario_temporal.setUsuario(e1.toString());
              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("parametro_usuario",27, ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-6)), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // parametro_password ::= COMILLAS CONTRAP COMILLAS DOSP COMILLAS tipo_junto COMILLAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)).value;
		usuario_temporal.setPassword(e1.toString());
              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("parametro_password",28, ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-6)), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // parametros_form ::= parametro_id COMA parametro_titulo COMA parametro_nombre COMA parametro_tema COMA parametro_user_creacion COMA parametro_fecha_creacion COMA grupo_componentes 
            {
              Object RESULT =null;

              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("parametros_form",3, ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-12)), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // parametro_id ::= COMILLAS IDF COMILLAS DOSP COMILLAS ID COMILLAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)).value;
		form_temporal.setId(e1.toString());
              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("parametro_id",4, ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-6)), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // parametro_user_creacion ::= COMILLAS USUARIOCP COMILLAS DOSP COMILLAS USUARIO COMILLAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)).value;
		form_temporal.setUsuario(e1.toString());
              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("parametro_user_creacion",8, ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-6)), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // parametro_fecha_creacion ::= COMILLAS FECHACP COMILLAS DOSP COMILLAS FECHA COMILLAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)).value;
		usuario_temporal.setFecha(e1.toString()); form_temporal.setFecha(e1.toString());
              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("parametro_fecha_creacion",9, ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-6)), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // parametro_titulo ::= COMILLAS TITULOP COMILLAS DOSP COMILLAS tipo_ingreso COMILLAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)).value;
		form_temporal.setTitulo(e1.toString());
              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("parametro_titulo",5, ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-6)), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // parametro_nombre ::= COMILLAS NOMBREP COMILLAS DOSP COMILLAS tipo_junto COMILLAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)).value;
		form_temporal.setNombre(e1.toString());
              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("parametro_nombre",6, ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-6)), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // parametro_tema ::= COMILLAS TEMAP COMILLAS DOSP COMILLAS TEMA COMILLAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)).value;
		form_temporal.setTema(e1.toString());
              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("parametro_tema",7, ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-6)), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // grupo_componentes ::= COMILLAS COMPS COMILLAS DOSP PARENTESISA bloque_componentes PARENTESISC 
            {
              Object RESULT =null;
		form_temporal.setComponentes(listado_componentes); listado_componentes = new ArrayList<>();
              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("grupo_componentes",10, ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-6)), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // bloque_componentes ::= 
            {
              Object RESULT =null;

              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("bloque_componentes",12, ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // bloque_componentes ::= bloque_componentes COMA LLAVEA bloque_param_compo LLAVEC 
            {
              Object RESULT =null;
		listado_componentes.add(comp_temporal); comp_temporal = new Componente();
              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("bloque_componentes",12, ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-4)), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // bloque_componentes ::= LLAVEA bloque_param_compo LLAVEC 
            {
              Object RESULT =null;
		listado_componentes.add(comp_temporal); comp_temporal = new Componente();
              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("bloque_componentes",12, ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-2)), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // bloque_param_compo ::= bloque_param_compo COMA parametros_componentes 
            {
              Object RESULT =null;

              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("bloque_param_compo",29, ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-2)), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // bloque_param_compo ::= parametros_componentes 
            {
              Object RESULT =null;

              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("bloque_param_compo",29, ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // parametros_componentes ::= parametro_id_componente 
            {
              Object RESULT =null;

              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("parametros_componentes",11, ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // parametros_componentes ::= parametro_nombre_campo 
            {
              Object RESULT =null;

              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("parametros_componentes",11, ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // parametros_componentes ::= parametro_clase 
            {
              Object RESULT =null;

              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("parametros_componentes",11, ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // parametros_componentes ::= parametro_indice 
            {
              Object RESULT =null;

              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("parametros_componentes",11, ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // parametros_componentes ::= parametro_texto 
            {
              Object RESULT =null;

              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("parametros_componentes",11, ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // parametros_componentes ::= parametro_alineacion 
            {
              Object RESULT =null;

              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("parametros_componentes",11, ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // parametros_componentes ::= parametro_opciones 
            {
              Object RESULT =null;

              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("parametros_componentes",11, ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // parametros_componentes ::= parametro_requerido 
            {
              Object RESULT =null;

              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("parametros_componentes",11, ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // parametros_componentes ::= parametro_filas 
            {
              Object RESULT =null;

              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("parametros_componentes",11, ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // parametros_componentes ::= parametro_columnas 
            {
              Object RESULT =null;

              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("parametros_componentes",11, ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // parametros_componentes ::= parametro_url 
            {
              Object RESULT =null;

              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("parametros_componentes",11, ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // tipo_junto ::= USUARIO 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserALM$stack.peek()).value;
		RESULT = e1.toString();
              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("tipo_junto",40, ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // tipo_junto ::= ID 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserALM$stack.peek()).value;
		RESULT = e1.toString();
              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("tipo_junto",40, ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // tipo_junto ::= NUMERO 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserALM$stack.peek()).value;
		RESULT = e1.toString();
              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("tipo_junto",40, ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // parametro_id_componente ::= COMILLAS IDC COMILLAS DOSP COMILLAS ID COMILLAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)).value;
		comp_temporal.setId(e1.toString());
              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("parametro_id_componente",13, ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-6)), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // parametro_nombre_campo ::= COMILLAS NOMBREC COMILLAS DOSP COMILLAS tipo_junto COMILLAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)).value;
		comp_temporal.setNombre_campo(e1.toString());
              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("parametro_nombre_campo",14, ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-6)), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // tipos_de_clases ::= CLASENORMAL 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserALM$stack.peek()).value;
		RESULT = e1.toString();
              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("tipos_de_clases",41, ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // tipos_de_clases ::= CLASEAREA 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserALM$stack.peek()).value;
		RESULT = e1.toString();
              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("tipos_de_clases",41, ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // tipos_de_clases ::= CLASEOPCIONES 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserALM$stack.peek()).value;
		RESULT = e1.toString();
              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("tipos_de_clases",41, ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // tipos_de_clases ::= CLASEIMAGEN 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserALM$stack.peek()).value;
		RESULT = e1.toString();
              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("tipos_de_clases",41, ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // tipos_de_clases ::= CLASEBOTON 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserALM$stack.peek()).value;
		RESULT = e1.toString();
              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("tipos_de_clases",41, ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // parametro_clase ::= COMILLAS CLASE COMILLAS DOSP COMILLAS tipos_de_clases COMILLAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)).value;
		comp_temporal.setClase(e1.toString());
              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("parametro_clase",15, ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-6)), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // parametro_indice ::= COMILLAS INDICEC COMILLAS DOSP COMILLAS NUMERO COMILLAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)).value;
		comp_temporal.setIndice(Integer.parseInt(e1.toString()));
              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("parametro_indice",16, ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-6)), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // parametro_texto ::= COMILLAS TEXTOVC COMILLAS DOSP COMILLAS tipo_ingreso COMILLAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)).value;
		comp_temporal.setTexto_visible(e1.toString());
              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("parametro_texto",17, ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-6)), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // parametro_alineacion ::= COMILLAS ALINEAC COMILLAS DOSP COMILLAS ALINEA COMILLAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)).value;
		comp_temporal.setAlineacion(e1.toString());
              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("parametro_alineacion",18, ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-6)), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // parametro_requerido ::= COMILLAS REQUERIDO COMILLAS DOSP COMILLAS BOOL COMILLAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)).value;
		comp_temporal.setRequerido(e1.toString());
              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("parametro_requerido",20, ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-6)), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // parametro_opciones ::= COMILLAS OPCIONES COMILLAS DOSP COMILLAS bloque_opciones COMILLAS 
            {
              Object RESULT =null;

              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("parametro_opciones",19, ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-6)), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // bloque_opciones ::= bloque_opciones OR tipo_ingreso 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserALM$stack.peek()).value;
		comp_temporal.getOpciones().add(e1.toString());
              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("bloque_opciones",25, ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-2)), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // bloque_opciones ::= tipo_ingreso 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserALM$stack.peek()).value;
		comp_temporal.getOpciones().add(e1.toString());
              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("bloque_opciones",25, ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // parametro_filas ::= COMILLAS FILAS COMILLAS DOSP COMILLAS NUMERO COMILLAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)).value;
		comp_temporal.setFilas((int)e1);
              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("parametro_filas",21, ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-6)), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // parametro_columnas ::= COMILLAS COLUMNAS COMILLAS DOSP COMILLAS NUMERO COMILLAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)).value;
		comp_temporal.setColumnas((int)e1);
              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("parametro_columnas",22, ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-6)), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // parametro_url ::= COMILLAS URLC COMILLAS DOSP COMILLAS URL COMILLAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)).value;
		comp_temporal.setUrl(e1.toString());
              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("parametro_url",23, ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-6)), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // tipo_ingreso ::= ID 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserALM$stack.peek()).value;
		RESULT = e1.toString();
              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("tipo_ingreso",24, ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // tipo_ingreso ::= USUARIO 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserALM$stack.peek()).value;
		RESULT = e1.toString();
              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("tipo_ingreso",24, ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // tipo_ingreso ::= TITULO 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserALM$stack.peek()).value;
		RESULT = e1.toString();
              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("tipo_ingreso",24, ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // tipo_ingreso ::= FECHA 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserALM$stack.peek()).value;
		RESULT = e1.toString();
              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("tipo_ingreso",24, ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // tipo_ingreso ::= NUMERO 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserALM$stack.peek()).value;
		RESULT = e1.toString();
              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("tipo_ingreso",24, ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // bloque_dat ::= 
            {
              Object RESULT =null;

              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("bloque_dat",39, ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // bloque_dat ::= bloque_datos 
            {
              Object RESULT =null;

              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("bloque_dat",39, ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // bloque_datos ::= LLAVEA lista_forms LLAVEC bloque_datosP 
            {
              Object RESULT =null;

              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("bloque_datos",31, ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-3)), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // bloque_datosP ::= 
            {
              Object RESULT =null;

              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("bloque_datosP",32, ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // bloque_datosP ::= COMA bloque_datos 
            {
              Object RESULT =null;

              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("bloque_datosP",32, ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // lista_forms ::= COMILLAS IDF COMILLAS DOSP COMILLAS ID COMILLAS COMA COMILLAS NOMBREP COMILLAS DOSP COMILLAS USUARIO COMILLAS COMA COMILLAS REGISTROS COMILLAS DOSP PARENTESISA bloque_registros PARENTESISC 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-17)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-17)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserALM$stack.elementAt(CUP$parserALM$top-17)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-9)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-9)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parserALM$stack.elementAt(CUP$parserALM$top-9)).value;
		 form_dato.setId(e1.toString()); form_dato.setNombre(e2.toString()); listado_datos.add(form_dato); form_dato = new Formulario();
              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("lista_forms",33, ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-22)), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // bloque_registros ::= LLAVEA registro LLAVEC bloque_registrosP 
            {
              Object RESULT =null;

              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("bloque_registros",34, ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-3)), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // bloque_registrosP ::= 
            {
              Object RESULT =null;

              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("bloque_registrosP",35, ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // bloque_registrosP ::= COMA bloque_registros 
            {
              Object RESULT =null;

              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("bloque_registrosP",35, ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // registro ::= COMILLAS NOREGISTRO COMILLAS DOSP PARENTESISA bloque_valores PARENTESISC 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-5)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserALM$stack.elementAt(CUP$parserALM$top-5)).value;
		 reg_dato.setNoregistro(e1.toString()); form_dato.getRegistros().add(reg_dato); reg_dato = new Registro(); 
              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("registro",36, ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-6)), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // bloque_valores ::= LLAVEA ingresado LLAVEC bloque_valoresP 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-2)).right;
		Ingreso e1 = (Ingreso)((java_cup.runtime.Symbol) CUP$parserALM$stack.elementAt(CUP$parserALM$top-2)).value;
		 reg_dato.getValores().add(e1);
              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("bloque_valores",37, ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-3)), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // bloque_valoresP ::= 
            {
              Object RESULT =null;

              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("bloque_valoresP",38, ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // bloque_valoresP ::= COMA bloque_valores 
            {
              Object RESULT =null;

              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("bloque_valoresP",38, ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ingresado ::= COMILLAS IDC COMILLAS DOSP COMILLAS ID COMILLAS COMA COMILLAS NOMBREC COMILLAS DOSP COMILLAS USUARIO COMILLAS COMA COMILLAS VALOR COMILLAS DOSP COMILLAS tipo_ingreso COMILLAS 
            {
              Ingreso RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-17)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-17)).right;
		Object id1 = (Object)((java_cup.runtime.Symbol) CUP$parserALM$stack.elementAt(CUP$parserALM$top-17)).value;
		int nombre1left = ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-9)).left;
		int nombre1right = ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-9)).right;
		Object nombre1 = (Object)((java_cup.runtime.Symbol) CUP$parserALM$stack.elementAt(CUP$parserALM$top-9)).value;
		int in1left = ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)).left;
		int in1right = ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)).right;
		Object in1 = (Object)((java_cup.runtime.Symbol) CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)).value;
		 Ingreso nuevo = new Ingreso(); nuevo.setIdc(id1.toString()); nuevo.setNombrec(nombre1.toString()); nuevo.setDato(in1.toString()); RESULT = nuevo; 
              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("ingresado",42, ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-22)), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parserALM$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parserALM$do_action(
    int                        CUP$parserALM$act_num,
    java_cup.runtime.lr_parser CUP$parserALM$parser,
    java.util.Stack            CUP$parserALM$stack,
    int                        CUP$parserALM$top)
    throws java.lang.Exception
    {
              return CUP$parserALM$do_action_part00000000(
                               CUP$parserALM$act_num,
                               CUP$parserALM$parser,
                               CUP$parserALM$stack,
                               CUP$parserALM$top);
    }
}

}
