
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.Symbol;
import POJOS.*;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parserALM extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return symALM.class;
}

  /** Default constructor. */
  @Deprecated
  public parserALM() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parserALM(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parserALM(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\107\000\002\002\004\000\002\002\006\000\002\002" +
    "\006\000\002\003\007\000\002\003\005\000\002\004\007" +
    "\000\002\004\005\000\002\041\010\000\002\045\002\000" +
    "\002\045\012\000\002\042\011\000\002\043\011\000\002" +
    "\005\021\000\002\006\011\000\002\012\011\000\002\013" +
    "\011\000\002\007\011\000\002\010\011\000\002\011\011" +
    "\000\002\014\011\000\002\017\002\000\002\017\007\000" +
    "\002\017\005\000\002\044\005\000\002\044\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\047\003\000\002\047\003\000\002" +
    "\047\003\000\002\020\011\000\002\021\011\000\002\050" +
    "\003\000\002\050\003\000\002\050\003\000\002\050\003" +
    "\000\002\050\003\000\002\022\011\000\002\023\011\000" +
    "\002\024\011\000\002\025\011\000\002\027\011\000\002" +
    "\026\011\000\002\037\005\000\002\037\003\000\002\030" +
    "\011\000\002\031\011\000\002\032\011\000\002\015\011" +
    "\000\002\033\002\000\002\033\007\000\002\033\005\000" +
    "\002\034\023\000\002\040\004\000\002\046\002\000\002" +
    "\046\004\000\002\035\011\000\002\036\003\000\002\036" +
    "\003\000\002\036\003\000\002\036\003\000\002\036\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0107\000\006\056\005\057\004\001\002\000\004\013" +
    "\344\001\002\000\004\013\010\001\002\000\004\002\007" +
    "\001\002\000\004\002\001\001\002\000\004\026\011\001" +
    "\002\000\004\004\017\001\002\000\006\014\014\032\013" +
    "\001\002\000\004\026\015\001\002\000\004\002\000\001" +
    "\002\000\004\004\017\001\002\000\004\027\341\001\002" +
    "\000\004\017\333\001\002\000\004\032\021\001\002\000" +
    "\004\004\023\001\002\000\004\032\037\001\002\000\004" +
    "\021\024\001\002\000\004\004\025\001\002\000\004\005" +
    "\026\001\002\000\004\004\027\001\002\000\014\007\033" +
    "\015\034\016\032\031\031\033\030\001\002\000\006\004" +
    "\uffbf\012\uffbf\001\002\000\006\004\uffbb\012\uffbb\001\002" +
    "\000\006\004\uffbc\012\uffbc\001\002\000\006\004\uffbd\012" +
    "\uffbd\001\002\000\006\004\uffbe\012\uffbe\001\002\000\004" +
    "\004\036\001\002\000\004\032\ufff1\001\002\000\004\004" +
    "\041\001\002\000\004\032\053\001\002\000\004\022\042" +
    "\001\002\000\004\004\043\001\002\000\004\005\044\001" +
    "\002\000\004\004\045\001\002\000\010\015\051\031\047" +
    "\033\046\001\002\000\004\004\uffdc\001\002\000\004\004" +
    "\uffdb\001\002\000\004\004\052\001\002\000\004\004\uffdd" +
    "\001\002\000\004\032\ufff0\001\002\000\004\004\055\001" +
    "\002\000\004\032\064\001\002\000\004\023\056\001\002" +
    "\000\004\004\057\001\002\000\004\005\060\001\002\000" +
    "\004\004\061\001\002\000\004\025\062\001\002\000\004" +
    "\004\063\001\002\000\004\032\uffef\001\002\000\004\004" +
    "\066\001\002\000\004\032\075\001\002\000\004\024\067" +
    "\001\002\000\004\004\070\001\002\000\004\005\071\001" +
    "\002\000\004\004\072\001\002\000\004\015\073\001\002" +
    "\000\004\004\074\001\002\000\004\032\ufff3\001\002\000" +
    "\004\004\077\001\002\000\004\032\106\001\002\000\004" +
    "\006\100\001\002\000\004\004\101\001\002\000\004\005" +
    "\102\001\002\000\004\004\103\001\002\000\004\016\104" +
    "\001\002\000\004\004\105\001\002\000\006\027\ufff2\032" +
    "\ufff2\001\002\000\004\004\110\001\002\000\004\032\257" +
    "\001\002\000\004\060\111\001\002\000\004\004\112\001" +
    "\002\000\004\005\113\001\002\000\004\013\114\001\002" +
    "\000\010\014\uffed\026\116\032\uffed\001\002\000\006\014" +
    "\253\032\252\001\002\000\004\004\126\001\002\000\006" +
    "\027\uffe8\032\uffe8\001\002\000\006\027\uffe6\032\uffe6\001" +
    "\002\000\006\027\uffe7\032\uffe7\001\002\000\006\027\uffe9" +
    "\032\uffe9\001\002\000\006\027\250\032\247\001\002\000" +
    "\006\027\uffe5\032\uffe5\001\002\000\006\027\uffe2\032\uffe2" +
    "\001\002\000\030\020\141\030\146\035\147\036\140\037" +
    "\144\040\136\041\143\042\137\043\135\047\145\050\142" +
    "\001\002\000\006\027\uffe4\032\uffe4\001\002\000\006\027" +
    "\uffe0\032\uffe0\001\002\000\006\027\uffe1\032\uffe1\001\002" +
    "\000\006\027\uffe3\032\uffe3\001\002\000\006\027\uffdf\032" +
    "\uffdf\001\002\000\006\027\uffde\032\uffde\001\002\000\004" +
    "\004\242\001\002\000\004\004\235\001\002\000\004\004" +
    "\225\001\002\000\004\004\220\001\002\000\004\004\213" +
    "\001\002\000\004\004\206\001\002\000\004\004\201\001" +
    "\002\000\004\004\174\001\002\000\004\004\167\001\002" +
    "\000\004\004\162\001\002\000\004\004\150\001\002\000" +
    "\004\005\151\001\002\000\004\004\152\001\002\000\014" +
    "\051\156\052\154\053\157\054\153\055\155\001\002\000" +
    "\004\004\uffd5\001\002\000\004\004\uffd7\001\002\000\004" +
    "\004\uffd4\001\002\000\004\004\uffd8\001\002\000\004\004" +
    "\uffd6\001\002\000\004\004\161\001\002\000\006\027\uffd3" +
    "\032\uffd3\001\002\000\004\005\163\001\002\000\004\004" +
    "\164\001\002\000\010\015\051\031\047\033\046\001\002" +
    "\000\004\004\166\001\002\000\006\027\uffd9\032\uffd9\001" +
    "\002\000\004\005\170\001\002\000\004\004\171\001\002" +
    "\000\004\031\172\001\002\000\004\004\173\001\002\000" +
    "\006\027\uffca\032\uffca\001\002\000\004\005\175\001\002" +
    "\000\004\004\176\001\002\000\014\007\033\015\034\016" +
    "\032\031\031\033\030\001\002\000\004\004\200\001\002" +
    "\000\006\027\uffd1\032\uffd1\001\002\000\004\005\202\001" +
    "\002\000\004\004\203\001\002\000\004\011\204\001\002" +
    "\000\004\004\205\001\002\000\006\027\uffcf\032\uffcf\001" +
    "\002\000\004\005\207\001\002\000\004\004\210\001\002" +
    "\000\004\034\211\001\002\000\004\004\212\001\002\000" +
    "\006\027\uffc9\032\uffc9\001\002\000\004\005\214\001\002" +
    "\000\004\004\215\001\002\000\004\033\216\001\002\000" +
    "\004\004\217\001\002\000\006\027\uffda\032\uffda\001\002" +
    "\000\004\005\221\001\002\000\004\004\222\001\002\000" +
    "\004\031\223\001\002\000\004\004\224\001\002\000\006" +
    "\027\uffd2\032\uffd2\001\002\000\004\005\226\001\002\000" +
    "\004\004\227\001\002\000\014\007\033\015\034\016\032" +
    "\031\031\033\030\001\002\000\006\004\233\012\232\001" +
    "\002\000\006\004\uffcc\012\uffcc\001\002\000\014\007\033" +
    "\015\034\016\032\031\031\033\030\001\002\000\006\027" +
    "\uffce\032\uffce\001\002\000\006\004\uffcd\012\uffcd\001\002" +
    "\000\004\005\236\001\002\000\004\004\237\001\002\000" +
    "\004\010\240\001\002\000\004\004\241\001\002\000\006" +
    "\027\uffd0\032\uffd0\001\002\000\004\005\243\001\002\000" +
    "\004\004\244\001\002\000\004\031\245\001\002\000\004" +
    "\004\246\001\002\000\006\027\uffcb\032\uffcb\001\002\000" +
    "\004\004\126\001\002\000\006\014\uffeb\032\uffeb\001\002" +
    "\000\006\027\uffea\032\uffea\001\002\000\004\026\254\001" +
    "\002\000\004\032\uffee\001\002\000\004\004\126\001\002" +
    "\000\006\027\256\032\247\001\002\000\006\014\uffec\032" +
    "\uffec\001\002\000\004\004\261\001\002\000\004\027\ufff5" +
    "\001\002\000\004\061\262\001\002\000\004\004\263\001" +
    "\002\000\004\005\264\001\002\000\004\013\265\001\002" +
    "\000\010\014\uffc7\026\266\032\uffc7\001\002\000\004\004" +
    "\274\001\002\000\006\014\271\032\270\001\002\000\004" +
    "\026\272\001\002\000\004\027\uffc8\001\002\000\004\004" +
    "\274\001\002\000\004\027\330\001\002\000\004\030\275" +
    "\001\002\000\004\004\276\001\002\000\004\005\277\001" +
    "\002\000\004\004\300\001\002\000\010\015\051\031\047" +
    "\033\046\001\002\000\004\004\302\001\002\000\004\032" +
    "\303\001\002\000\004\004\304\001\002\000\004\020\305" +
    "\001\002\000\004\004\306\001\002\000\004\005\307\001" +
    "\002\000\004\004\310\001\002\000\004\033\311\001\002" +
    "\000\004\004\312\001\002\000\004\032\313\001\002\000" +
    "\004\004\316\001\002\000\006\027\uffc2\032\325\001\002" +
    "\000\004\027\uffc4\001\002\000\004\062\317\001\002\000" +
    "\004\004\320\001\002\000\004\005\321\001\002\000\004" +
    "\004\322\001\002\000\014\007\033\015\034\016\032\031" +
    "\031\033\030\001\002\000\004\004\324\001\002\000\006" +
    "\027\uffc0\032\uffc0\001\002\000\004\004\316\001\002\000" +
    "\004\027\uffc3\001\002\000\004\027\uffc1\001\002\000\006" +
    "\014\uffc6\032\uffc6\001\002\000\004\027\332\001\002\000" +
    "\006\014\uffc5\032\uffc5\001\002\000\004\004\334\001\002" +
    "\000\004\005\335\001\002\000\004\004\336\001\002\000" +
    "\004\033\337\001\002\000\004\004\340\001\002\000\004" +
    "\032\ufff4\001\002\000\006\014\ufffe\032\ufffe\001\002\000" +
    "\004\027\343\001\002\000\006\014\ufffd\032\ufffd\001\002" +
    "\000\004\026\345\001\002\000\004\004\353\001\002\000" +
    "\006\014\350\032\347\001\002\000\004\026\351\001\002" +
    "\000\004\002\uffff\001\002\000\004\004\353\001\002\000" +
    "\004\032\364\001\002\000\004\044\356\001\002\000\004" +
    "\027\355\001\002\000\006\014\ufffc\032\ufffc\001\002\000" +
    "\004\004\357\001\002\000\004\005\360\001\002\000\004" +
    "\004\361\001\002\000\004\015\362\001\002\000\004\004" +
    "\363\001\002\000\004\032\ufff7\001\002\000\004\004\366" +
    "\001\002\000\004\032\375\001\002\000\004\045\367\001" +
    "\002\000\004\004\370\001\002\000\004\005\371\001\002" +
    "\000\004\004\372\001\002\000\010\015\051\031\047\033" +
    "\046\001\002\000\004\004\374\001\002\000\004\032\ufff6" +
    "\001\002\000\004\004\077\001\002\000\006\027\ufff9\032" +
    "\377\001\002\000\004\004\u0101\001\002\000\004\027\ufffa" +
    "\001\002\000\004\046\u0102\001\002\000\004\004\u0103\001" +
    "\002\000\004\005\u0104\001\002\000\004\004\u0105\001\002" +
    "\000\004\016\u0106\001\002\000\004\004\u0107\001\002\000" +
    "\004\027\ufff8\001\002\000\004\027\u0109\001\002\000\006" +
    "\014\ufffb\032\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0107\000\004\002\005\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\011\001\001\000\006\005\341\006\017\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\005\015\006\017\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\021\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\036\034\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\037\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\047\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\053\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\064\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\075\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\014" +
    "\106\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\017" +
    "\114\001\001\000\002\001\001\000\034\016\121\020\116" +
    "\021\120\022\117\023\123\024\126\025\131\026\124\027" +
    "\130\030\127\031\132\032\133\044\122\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\050\157\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\047\164\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\036\176\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\036\230\037\227\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\036\233" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\016\250\020\116\021\120\022\117\023\123\024\126\025" +
    "\131\026\124\027\130\030\127\031\132\032\133\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\016\121\020\116\021\120\022\117" +
    "\023\123\024\126\025\131\026\124\027\130\030\127\031" +
    "\132\032\133\044\254\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\257\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\033\266\001\001\000\004\034\330\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\034\272\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\047\300\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\035\313\040\314" +
    "\001\001\000\004\046\325\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\036\322\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\035\313\040\326\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\345\001\001\000\006\041\u0107\042" +
    "\351\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\041\353\042\351\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\043\364\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\047\372\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\375\001\001\000\004\045\377\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parserALM$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parserALM$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parserALM$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol sym;
    
    public ArrayList<Usuario> listado_usuarios = new ArrayList<>();
    public ArrayList<Formulario> listado_formularios = new ArrayList<>();
    public ArrayList<Componente> listado_componentes = new ArrayList<>();
    public ArrayList<String> reg = new ArrayList<>();

    public Usuario usuario_temporal = new Usuario();
    public Formulario form_temporal = new Formulario();
    public Componente comp_temporal = new Componente();
    public Registro reg_temporal = new Registro();

    public Symbol getS(){
        return this.sym;
    }

    public void report_fatal_error(String message, Object info) {
        System.out.println("reportfatal "+message+info);
    }
    public void report_fatal_error(Symbol cur) {
        System.out.println("unrecovered_syntax_error");
    }

    public void syntax_error(Symbol cur_token) {
        System.out.println(symbl_name_from_id(expected_token_ids().get(0)));
        System.out.println("syntaxerr: " + symbl_name_from_id(cur_token.sym) +" Linea: "+cur_token.right+" Columna: "+cur_token.left+" Valor:"+cur_token.value);
    }

    protected int error_sync_size() {
        return 1;
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parserALM$actions {
  private final parserALM parser;

  /** Constructor */
  CUP$parserALM$actions(parserALM parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parserALM$do_action_part00000000(
    int                        CUP$parserALM$act_num,
    java_cup.runtime.lr_parser CUP$parserALM$parser,
    java.util.Stack            CUP$parserALM$stack,
    int                        CUP$parserALM$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parserALM$result;

      /* select the action based on the action number */
      switch (CUP$parserALM$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)).value;
		RESULT = start_val;
              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parserALM$parser.done_parsing();
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= INICIOFORM PARENTESISA bloque_forms PARENTESISC 
            {
              Object RESULT =null;

              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-3)), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= INICIOUSUARIOS PARENTESISA bloque_usuarios PARENTESISC 
            {
              Object RESULT =null;

              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-3)), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // bloque_forms ::= bloque_forms COMA LLAVEA parametros_form LLAVEC 
            {
              Object RESULT =null;
		listado_formularios.add(form_temporal); form_temporal = new Formulario();
              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("bloque_forms",1, ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-4)), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // bloque_forms ::= LLAVEA parametros_form LLAVEC 
            {
              Object RESULT =null;
		listado_formularios.add(form_temporal); form_temporal = new Formulario();
              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("bloque_forms",1, ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-2)), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // bloque_usuarios ::= bloque_usuarios COMA LLAVEA parametros_usuarios LLAVEC 
            {
              Object RESULT =null;
		listado_usuarios.add(usuario_temporal); usuario_temporal = new Usuario();
              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("bloque_usuarios",2, ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-4)), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // bloque_usuarios ::= LLAVEA parametros_usuarios LLAVEC 
            {
              Object RESULT =null;
		listado_usuarios.add(usuario_temporal); usuario_temporal = new Usuario();
              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("bloque_usuarios",2, ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-2)), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // parametros_usuarios ::= parametro_usuario COMA parametro_password COMA parametro_fecha_creacion opcional_usuario 
            {
              Object RESULT =null;

              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("parametros_usuarios",31, ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-5)), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // opcional_usuario ::= 
            {
              Object RESULT =null;

              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("opcional_usuario",35, ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // opcional_usuario ::= COMA COMILLAS FECHAMP COMILLAS DOSP COMILLAS FECHA COMILLAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)).value;
		usuario_temporal.setFecha_mod(e1.toString());
              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("opcional_usuario",35, ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-7)), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // parametro_usuario ::= COMILLAS USUARIOP COMILLAS DOSP COMILLAS USUARIO COMILLAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)).value;
		usuario_temporal.setUsuario(e1.toString());
              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("parametro_usuario",32, ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-6)), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // parametro_password ::= COMILLAS CONTRAP COMILLAS DOSP COMILLAS tipo_junto COMILLAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)).value;
		usuario_temporal.setPassword(e1.toString());
              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("parametro_password",33, ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-6)), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // parametros_form ::= parametro_id COMA parametro_titulo COMA parametro_nombre COMA parametro_tema COMA parametro_user_creacion COMA parametro_fecha_creacion COMA grupo_componentes COMA grupo_datos 
            {
              Object RESULT =null;

              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("parametros_form",3, ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-14)), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // parametro_id ::= COMILLAS IDF COMILLAS DOSP COMILLAS ID COMILLAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)).value;
		form_temporal.setId(e1.toString());
              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("parametro_id",4, ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-6)), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // parametro_user_creacion ::= COMILLAS USUARIOCP COMILLAS DOSP COMILLAS USUARIO COMILLAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)).value;
		form_temporal.setUsuario(e1.toString());
              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("parametro_user_creacion",8, ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-6)), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // parametro_fecha_creacion ::= COMILLAS FECHACP COMILLAS DOSP COMILLAS FECHA COMILLAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)).value;
		usuario_temporal.setFecha(e1.toString()); form_temporal.setFecha(e1.toString());
              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("parametro_fecha_creacion",9, ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-6)), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // parametro_titulo ::= COMILLAS TITULOP COMILLAS DOSP COMILLAS tipo_ingreso COMILLAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)).value;
		form_temporal.setTitulo(e1.toString());
              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("parametro_titulo",5, ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-6)), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // parametro_nombre ::= COMILLAS NOMBREP COMILLAS DOSP COMILLAS tipo_junto COMILLAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)).value;
		form_temporal.setNombre(e1.toString());
              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("parametro_nombre",6, ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-6)), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // parametro_tema ::= COMILLAS TEMAP COMILLAS DOSP COMILLAS TEMA COMILLAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)).value;
		form_temporal.setTema(e1.toString());
              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("parametro_tema",7, ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-6)), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // grupo_componentes ::= COMILLAS COMPS COMILLAS DOSP PARENTESISA bloque_componentes PARENTESISC 
            {
              Object RESULT =null;
		form_temporal.setComponentes(listado_componentes); listado_componentes = new ArrayList<>();
              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("grupo_componentes",10, ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-6)), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // bloque_componentes ::= 
            {
              Object RESULT =null;

              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("bloque_componentes",13, ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // bloque_componentes ::= bloque_componentes COMA LLAVEA bloque_param_compo LLAVEC 
            {
              Object RESULT =null;
		listado_componentes.add(comp_temporal); comp_temporal = new Componente();
              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("bloque_componentes",13, ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-4)), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // bloque_componentes ::= LLAVEA bloque_param_compo LLAVEC 
            {
              Object RESULT =null;
		listado_componentes.add(comp_temporal); comp_temporal = new Componente();
              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("bloque_componentes",13, ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-2)), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // bloque_param_compo ::= bloque_param_compo COMA parametros_componentes 
            {
              Object RESULT =null;

              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("bloque_param_compo",34, ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-2)), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // bloque_param_compo ::= parametros_componentes 
            {
              Object RESULT =null;

              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("bloque_param_compo",34, ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // parametros_componentes ::= parametro_id_componente 
            {
              Object RESULT =null;

              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("parametros_componentes",12, ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // parametros_componentes ::= parametro_nombre_campo 
            {
              Object RESULT =null;

              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("parametros_componentes",12, ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // parametros_componentes ::= parametro_clase 
            {
              Object RESULT =null;

              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("parametros_componentes",12, ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // parametros_componentes ::= parametro_indice 
            {
              Object RESULT =null;

              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("parametros_componentes",12, ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // parametros_componentes ::= parametro_texto 
            {
              Object RESULT =null;

              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("parametros_componentes",12, ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // parametros_componentes ::= parametro_alineacion 
            {
              Object RESULT =null;

              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("parametros_componentes",12, ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // parametros_componentes ::= parametro_opciones 
            {
              Object RESULT =null;

              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("parametros_componentes",12, ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // parametros_componentes ::= parametro_requerido 
            {
              Object RESULT =null;

              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("parametros_componentes",12, ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // parametros_componentes ::= parametro_filas 
            {
              Object RESULT =null;

              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("parametros_componentes",12, ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // parametros_componentes ::= parametro_columnas 
            {
              Object RESULT =null;

              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("parametros_componentes",12, ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // parametros_componentes ::= parametro_url 
            {
              Object RESULT =null;

              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("parametros_componentes",12, ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // tipo_junto ::= USUARIO 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserALM$stack.peek()).value;
		RESULT = e1.toString();
              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("tipo_junto",37, ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // tipo_junto ::= ID 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserALM$stack.peek()).value;
		RESULT = e1.toString();
              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("tipo_junto",37, ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // tipo_junto ::= NUMERO 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserALM$stack.peek()).value;
		RESULT = e1.toString();
              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("tipo_junto",37, ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // parametro_id_componente ::= COMILLAS IDC COMILLAS DOSP COMILLAS ID COMILLAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)).value;
		comp_temporal.setId(e1.toString());
              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("parametro_id_componente",14, ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-6)), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // parametro_nombre_campo ::= COMILLAS NOMBREC COMILLAS DOSP COMILLAS tipo_junto COMILLAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)).value;
		comp_temporal.setNombre_campo(e1.toString());
              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("parametro_nombre_campo",15, ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-6)), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // tipos_de_clases ::= CLASENORMAL 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserALM$stack.peek()).value;
		RESULT = e1.toString();
              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("tipos_de_clases",38, ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // tipos_de_clases ::= CLASEAREA 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserALM$stack.peek()).value;
		RESULT = e1.toString();
              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("tipos_de_clases",38, ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // tipos_de_clases ::= CLASEOPCIONES 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserALM$stack.peek()).value;
		RESULT = e1.toString();
              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("tipos_de_clases",38, ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // tipos_de_clases ::= CLASEIMAGEN 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserALM$stack.peek()).value;
		RESULT = e1.toString();
              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("tipos_de_clases",38, ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // tipos_de_clases ::= CLASEBOTON 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserALM$stack.peek()).value;
		RESULT = e1.toString();
              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("tipos_de_clases",38, ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // parametro_clase ::= COMILLAS CLASE COMILLAS DOSP COMILLAS tipos_de_clases COMILLAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)).value;
		comp_temporal.setClase(e1.toString());
              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("parametro_clase",16, ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-6)), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // parametro_indice ::= COMILLAS INDICEC COMILLAS DOSP COMILLAS NUMERO COMILLAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)).value;
		comp_temporal.setIndice(Integer.parseInt(e1.toString()));
              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("parametro_indice",17, ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-6)), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // parametro_texto ::= COMILLAS TEXTOVC COMILLAS DOSP COMILLAS tipo_ingreso COMILLAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)).value;
		comp_temporal.setTexto_visible(e1.toString());
              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("parametro_texto",18, ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-6)), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // parametro_alineacion ::= COMILLAS ALINEAC COMILLAS DOSP COMILLAS ALINEA COMILLAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)).value;
		comp_temporal.setAlineacion(e1.toString());
              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("parametro_alineacion",19, ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-6)), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // parametro_requerido ::= COMILLAS REQUERIDO COMILLAS DOSP COMILLAS BOOL COMILLAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)).value;
		comp_temporal.setRequerido(e1.toString());
              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("parametro_requerido",21, ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-6)), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // parametro_opciones ::= COMILLAS OPCIONES COMILLAS DOSP COMILLAS bloque_opciones COMILLAS 
            {
              Object RESULT =null;

              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("parametro_opciones",20, ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-6)), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // bloque_opciones ::= bloque_opciones OR tipo_ingreso 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserALM$stack.peek()).value;
		comp_temporal.getOpciones().add(e1.toString());
              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("bloque_opciones",29, ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-2)), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // bloque_opciones ::= tipo_ingreso 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserALM$stack.peek()).value;
		comp_temporal.getOpciones().add(e1.toString());
              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("bloque_opciones",29, ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // parametro_filas ::= COMILLAS FILAS COMILLAS DOSP COMILLAS NUMERO COMILLAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)).value;
		comp_temporal.setFilas((int)e1);
              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("parametro_filas",22, ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-6)), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // parametro_columnas ::= COMILLAS COLUMNAS COMILLAS DOSP COMILLAS NUMERO COMILLAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)).value;
		comp_temporal.setColumnas((int)e1);
              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("parametro_columnas",23, ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-6)), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // parametro_url ::= COMILLAS URLC COMILLAS DOSP COMILLAS URL COMILLAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)).value;
		comp_temporal.setUrl(e1.toString());
              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("parametro_url",24, ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-6)), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // grupo_datos ::= COMILLAS DATOS COMILLAS DOSP PARENTESISA bloque_datos PARENTESISC 
            {
              Object RESULT =null;

              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("grupo_datos",11, ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-6)), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // bloque_datos ::= 
            {
              Object RESULT =null;

              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("bloque_datos",25, ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // bloque_datos ::= bloque_datos COMA LLAVEA parametros_datos LLAVEC 
            {
              Object RESULT =null;
		form_temporal.getRegistros().add(reg_temporal); reg_temporal = new Registro();
              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("bloque_datos",25, ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-4)), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // bloque_datos ::= LLAVEA parametros_datos LLAVEC 
            {
              Object RESULT =null;
		form_temporal.getRegistros().add(reg_temporal); reg_temporal = new Registro();
              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("bloque_datos",25, ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-2)), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // parametros_datos ::= COMILLAS NOMBREC COMILLAS DOSP COMILLAS tipo_junto COMILLAS COMA COMILLAS IDC COMILLAS DOSP COMILLAS ID COMILLAS COMA bloque_registros 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-11)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-11)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parserALM$stack.elementAt(CUP$parserALM$top-11)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-3)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parserALM$stack.elementAt(CUP$parserALM$top-3)).value;
		reg_temporal.setId(e2.toString()); reg_temporal.setNombre(e1.toString()); reg_temporal.setRegistros(reg); reg = new ArrayList<>();
              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("parametros_datos",26, ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-16)), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // bloque_registros ::= parametro_registro bloque_registrosPrima 
            {
              Object RESULT =null;

              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("bloque_registros",30, ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // bloque_registrosPrima ::= 
            {
              Object RESULT =null;

              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("bloque_registrosPrima",36, ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // bloque_registrosPrima ::= COMA bloque_registros 
            {
              Object RESULT =null;

              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("bloque_registrosPrima",36, ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // parametro_registro ::= COMILLAS NOREGISTRO COMILLAS DOSP COMILLAS tipo_ingreso COMILLAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)).value;
		 reg.add(e1.toString());
              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("parametro_registro",27, ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-6)), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // tipo_ingreso ::= ID 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserALM$stack.peek()).value;
		RESULT = e1.toString();
              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("tipo_ingreso",28, ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // tipo_ingreso ::= USUARIO 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserALM$stack.peek()).value;
		RESULT = e1.toString();
              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("tipo_ingreso",28, ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // tipo_ingreso ::= TITULO 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserALM$stack.peek()).value;
		RESULT = e1.toString();
              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("tipo_ingreso",28, ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // tipo_ingreso ::= FECHA 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserALM$stack.peek()).value;
		RESULT = e1.toString();
              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("tipo_ingreso",28, ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // tipo_ingreso ::= NUMERO 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserALM$stack.peek()).value;
		RESULT = e1.toString();
              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("tipo_ingreso",28, ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parserALM$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parserALM$do_action(
    int                        CUP$parserALM$act_num,
    java_cup.runtime.lr_parser CUP$parserALM$parser,
    java.util.Stack            CUP$parserALM$stack,
    int                        CUP$parserALM$top)
    throws java.lang.Exception
    {
              return CUP$parserALM$do_action_part00000000(
                               CUP$parserALM$act_num,
                               CUP$parserALM$parser,
                               CUP$parserALM$stack,
                               CUP$parserALM$top);
    }
}

}
