
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parserDB extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym2.class;
}

  /** Default constructor. */
  @Deprecated
  public parserDB() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parserDB(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parserDB(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\033\000\002\002\004\000\002\002\027\000\002\003" +
    "\005\000\002\003\003\000\002\004\021\000\002\005\003" +
    "\000\002\005\003\000\002\006\002\000\002\006\003\000" +
    "\002\007\005\000\002\007\003\000\002\010\002\000\002" +
    "\010\006\000\002\011\005\000\002\011\003\000\002\012" +
    "\005\000\002\012\005\000\002\013\003\000\002\013\003" +
    "\000\002\013\005\000\002\014\002\000\002\014\003\000" +
    "\002\015\004\000\002\015\004\000\002\015\004\000\002" +
    "\015\004\000\002\015\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\115\000\004\005\004\001\002\000\004\073\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\006\010\001\002\000\004\004\011\001\002\000" +
    "\004\071\012\001\002\000\004\004\013\001\002\000\004" +
    "\010\014\001\002\000\004\056\015\001\002\000\004\004" +
    "\016\001\002\000\004\110\017\001\002\000\004\004\020" +
    "\001\002\000\004\006\021\001\002\000\004\060\022\001" +
    "\002\000\004\056\023\001\002\000\004\004\026\001\002" +
    "\000\006\057\ufffe\075\ufffe\001\002\000\006\057\111\075" +
    "\110\001\002\000\004\031\027\001\002\000\004\004\030" +
    "\001\002\000\004\006\031\001\002\000\004\004\032\001" +
    "\002\000\004\032\033\001\002\000\004\037\034\001\002" +
    "\000\004\040\035\001\002\000\004\033\036\001\002\000" +
    "\006\043\041\076\037\001\002\000\022\010\ufffc\011\ufffc" +
    "\035\ufffc\036\ufffc\054\ufffc\060\ufffc\061\ufffc\075\ufffc\001" +
    "\002\000\004\060\042\001\002\000\022\010\ufffb\011\ufffb" +
    "\035\ufffb\036\ufffb\054\ufffb\060\ufffb\061\ufffb\075\ufffb\001" +
    "\002\000\010\043\041\061\ufffa\076\037\001\002\000\006" +
    "\061\ufff7\075\ufff7\001\002\000\004\061\050\001\002\000" +
    "\006\061\ufff9\075\046\001\002\000\006\043\041\076\037" +
    "\001\002\000\006\061\ufff8\075\ufff8\001\002\000\006\004" +
    "\ufff6\034\051\001\002\000\004\060\054\001\002\000\004" +
    "\004\053\001\002\000\006\057\ufffd\075\ufffd\001\002\000" +
    "\012\041\060\043\uffed\070\055\076\uffed\001\002\000\006" +
    "\043\uffec\076\uffec\001\002\000\010\042\ufff3\055\ufff3\061" +
    "\ufff3\001\002\000\006\043\041\076\037\001\002\000\012" +
    "\041\060\043\uffed\070\055\076\uffed\001\002\000\006\055" +
    "\062\061\063\001\002\000\012\041\060\043\uffed\070\055" +
    "\076\uffed\001\002\000\004\004\ufff5\001\002\000\010\042" +
    "\ufff4\055\ufff4\061\ufff4\001\002\000\006\042\066\055\062" +
    "\001\002\000\010\042\ufff1\055\ufff1\061\ufff1\001\002\000" +
    "\014\010\073\011\074\035\075\036\070\054\071\001\002" +
    "\000\004\072\107\001\002\000\004\072\106\001\002\000" +
    "\010\042\ufff2\055\ufff2\061\ufff2\001\002\000\004\072\105" +
    "\001\002\000\004\072\104\001\002\000\010\020\101\027" +
    "\077\072\076\001\002\000\010\042\ufff0\055\ufff0\061\ufff0" +
    "\001\002\000\010\042\uffef\055\uffef\061\uffef\001\002\000" +
    "\010\042\uffe7\055\uffe7\061\uffe7\001\002\000\004\044\102" +
    "\001\002\000\004\020\103\001\002\000\010\042\uffee\055" +
    "\uffee\061\uffee\001\002\000\010\042\uffe8\055\uffe8\061\uffe8" +
    "\001\002\000\010\042\uffe9\055\uffe9\061\uffe9\001\002\000" +
    "\010\042\uffea\055\uffea\061\uffea\001\002\000\010\042\uffeb" +
    "\055\uffeb\061\uffeb\001\002\000\004\004\026\001\002\000" +
    "\004\061\112\001\002\000\004\057\113\001\002\000\004" +
    "\011\114\001\002\000\004\074\115\001\002\000\004\007" +
    "\116\001\002\000\004\002\000\001\002\000\006\057\uffff" +
    "\075\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\115\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\003\024\004\023\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\037\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\005\042\006\043\007\044\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\046\001\001\000\002\001\001\000\004\010" +
    "\051\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\011\060\012\055\014\056\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\066\001\001" +
    "\000\010\011\064\012\055\014\056\001\001\000\002\001" +
    "\001\000\006\012\063\014\056\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\015\071\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\077\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\004\116\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parserDB$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parserDB$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parserDB$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol sym;
    
    public Symbol getS(){
        return this.sym;
    }

    public void report_fatal_error(String message, Object info) {
        System.out.println("reportfatal "+message+info);
    }
    public void report_fatal_error(Symbol cur) {
        System.out.println("unrecovered_syntax_error");
    }

    public void syntax_error(Symbol cur_token) {
        System.out.println(symbl_name_from_id(expected_token_ids().get(0)));
        System.out.println("syntaxerr: " + symbl_name_from_id(cur_token.sym) +" Linea: "+cur_token.right+" Columna: "+cur_token.left+" Valor:"+cur_token.value);
    }

    protected int error_sync_size() {
        return 1;
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parserDB$actions {
  private final parserDB parser;

  /** Constructor */
  CUP$parserDB$actions(parserDB parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parserDB$do_action_part00000000(
    int                        CUP$parserDB$act_num,
    java_cup.runtime.lr_parser CUP$parserDB$parser,
    java.util.Stack            CUP$parserDB$stack,
    int                        CUP$parserDB$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parserDB$result;

      /* select the action based on the action number */
      switch (CUP$parserDB$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parserDB$stack.elementAt(CUP$parserDB$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parserDB$stack.elementAt(CUP$parserDB$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parserDB$stack.elementAt(CUP$parserDB$top-1)).value;
		RESULT = start_val;
              CUP$parserDB$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parserDB$stack.elementAt(CUP$parserDB$top-1)), ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parserDB$parser.done_parsing();
          return CUP$parserDB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= INICIOE INICIOS DOSP COMILLAS CONSULTADATOS COMILLAS MAYORQ LLAVEA COMILLAS CONSULTAS COMILLAS DOSP CORCHETEA LLAVEA bloque_consultas LLAVEC CORCHETEC LLAVEC MENORQ FINS FINE 
            {
              Object RESULT =null;
		System.out.println("encontrada solicitud");
              CUP$parserDB$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parserDB$stack.elementAt(CUP$parserDB$top-20)), ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()), RESULT);
            }
          return CUP$parserDB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // bloque_consultas ::= bloque_consultas COMA descripcion_consulta 
            {
              Object RESULT =null;

              CUP$parserDB$result = parser.getSymbolFactory().newSymbol("bloque_consultas",1, ((java_cup.runtime.Symbol)CUP$parserDB$stack.elementAt(CUP$parserDB$top-2)), ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()), RESULT);
            }
          return CUP$parserDB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // bloque_consultas ::= descripcion_consulta 
            {
              Object RESULT =null;

              CUP$parserDB$result = parser.getSymbolFactory().newSymbol("bloque_consultas",1, ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()), RESULT);
            }
          return CUP$parserDB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // descripcion_consulta ::= COMILLAS NOCONSULTA COMILLAS DOSP COMILLAS SELECT TO FORM DE campo CORCHETEA nombre_campos CORCHETEC continuacion COMILLAS 
            {
              Object RESULT =null;

              CUP$parserDB$result = parser.getSymbolFactory().newSymbol("descripcion_consulta",2, ((java_cup.runtime.Symbol)CUP$parserDB$stack.elementAt(CUP$parserDB$top-14)), ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()), RESULT);
            }
          return CUP$parserDB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // campo ::= ID 
            {
              Object RESULT =null;

              CUP$parserDB$result = parser.getSymbolFactory().newSymbol("campo",3, ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()), RESULT);
            }
          return CUP$parserDB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // campo ::= USUARIO 
            {
              Object RESULT =null;

              CUP$parserDB$result = parser.getSymbolFactory().newSymbol("campo",3, ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()), RESULT);
            }
          return CUP$parserDB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // nombre_campos ::= 
            {
              Object RESULT =null;

              CUP$parserDB$result = parser.getSymbolFactory().newSymbol("nombre_campos",4, ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()), RESULT);
            }
          return CUP$parserDB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // nombre_campos ::= campos 
            {
              Object RESULT =null;

              CUP$parserDB$result = parser.getSymbolFactory().newSymbol("nombre_campos",4, ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()), RESULT);
            }
          return CUP$parserDB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // campos ::= campos COMA campo 
            {
              Object RESULT =null;

              CUP$parserDB$result = parser.getSymbolFactory().newSymbol("campos",5, ((java_cup.runtime.Symbol)CUP$parserDB$stack.elementAt(CUP$parserDB$top-2)), ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()), RESULT);
            }
          return CUP$parserDB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // campos ::= campo 
            {
              Object RESULT =null;

              CUP$parserDB$result = parser.getSymbolFactory().newSymbol("campos",5, ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()), RESULT);
            }
          return CUP$parserDB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // continuacion ::= 
            {
              Object RESULT =null;

              CUP$parserDB$result = parser.getSymbolFactory().newSymbol("continuacion",6, ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()), RESULT);
            }
          return CUP$parserDB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // continuacion ::= WHERE CORCHETEA condiciones CORCHETEC 
            {
              Object RESULT =null;

              CUP$parserDB$result = parser.getSymbolFactory().newSymbol("continuacion",6, ((java_cup.runtime.Symbol)CUP$parserDB$stack.elementAt(CUP$parserDB$top-3)), ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()), RESULT);
            }
          return CUP$parserDB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // condiciones ::= condiciones OPERADORLOGICO condicion 
            {
              Object RESULT =null;

              CUP$parserDB$result = parser.getSymbolFactory().newSymbol("condiciones",7, ((java_cup.runtime.Symbol)CUP$parserDB$stack.elementAt(CUP$parserDB$top-2)), ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()), RESULT);
            }
          return CUP$parserDB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // condiciones ::= condicion 
            {
              Object RESULT =null;

              CUP$parserDB$result = parser.getSymbolFactory().newSymbol("condiciones",7, ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()), RESULT);
            }
          return CUP$parserDB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // condicion ::= not campo compara 
            {
              Object RESULT =null;

              CUP$parserDB$result = parser.getSymbolFactory().newSymbol("condicion",8, ((java_cup.runtime.Symbol)CUP$parserDB$stack.elementAt(CUP$parserDB$top-2)), ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()), RESULT);
            }
          return CUP$parserDB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // condicion ::= PARENTESISA condiciones PARENTESISC 
            {
              Object RESULT =null;

              CUP$parserDB$result = parser.getSymbolFactory().newSymbol("condicion",8, ((java_cup.runtime.Symbol)CUP$parserDB$stack.elementAt(CUP$parserDB$top-2)), ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()), RESULT);
            }
          return CUP$parserDB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // tipo_dato ::= NUMERO 
            {
              Object RESULT =null;

              CUP$parserDB$result = parser.getSymbolFactory().newSymbol("tipo_dato",9, ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()), RESULT);
            }
          return CUP$parserDB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // tipo_dato ::= TITULO 
            {
              Object RESULT =null;

              CUP$parserDB$result = parser.getSymbolFactory().newSymbol("tipo_dato",9, ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()), RESULT);
            }
          return CUP$parserDB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // tipo_dato ::= APOSTROFE FECHA APOSTROFE 
            {
              Object RESULT =null;

              CUP$parserDB$result = parser.getSymbolFactory().newSymbol("tipo_dato",9, ((java_cup.runtime.Symbol)CUP$parserDB$stack.elementAt(CUP$parserDB$top-2)), ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()), RESULT);
            }
          return CUP$parserDB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // not ::= 
            {
              Object RESULT =null;

              CUP$parserDB$result = parser.getSymbolFactory().newSymbol("not",10, ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()), RESULT);
            }
          return CUP$parserDB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // not ::= OPERADORNOT 
            {
              Object RESULT =null;

              CUP$parserDB$result = parser.getSymbolFactory().newSymbol("not",10, ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()), RESULT);
            }
          return CUP$parserDB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // compara ::= MAYORIGUAL NUMERO 
            {
              Object RESULT =null;

              CUP$parserDB$result = parser.getSymbolFactory().newSymbol("compara",11, ((java_cup.runtime.Symbol)CUP$parserDB$stack.elementAt(CUP$parserDB$top-1)), ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()), RESULT);
            }
          return CUP$parserDB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // compara ::= MENORIGUAL NUMERO 
            {
              Object RESULT =null;

              CUP$parserDB$result = parser.getSymbolFactory().newSymbol("compara",11, ((java_cup.runtime.Symbol)CUP$parserDB$stack.elementAt(CUP$parserDB$top-1)), ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()), RESULT);
            }
          return CUP$parserDB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // compara ::= MAYORQ NUMERO 
            {
              Object RESULT =null;

              CUP$parserDB$result = parser.getSymbolFactory().newSymbol("compara",11, ((java_cup.runtime.Symbol)CUP$parserDB$stack.elementAt(CUP$parserDB$top-1)), ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()), RESULT);
            }
          return CUP$parserDB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // compara ::= MENORQ NUMERO 
            {
              Object RESULT =null;

              CUP$parserDB$result = parser.getSymbolFactory().newSymbol("compara",11, ((java_cup.runtime.Symbol)CUP$parserDB$stack.elementAt(CUP$parserDB$top-1)), ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()), RESULT);
            }
          return CUP$parserDB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // compara ::= IGUAL tipo_dato 
            {
              Object RESULT =null;

              CUP$parserDB$result = parser.getSymbolFactory().newSymbol("compara",11, ((java_cup.runtime.Symbol)CUP$parserDB$stack.elementAt(CUP$parserDB$top-1)), ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()), RESULT);
            }
          return CUP$parserDB$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parserDB$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parserDB$do_action(
    int                        CUP$parserDB$act_num,
    java_cup.runtime.lr_parser CUP$parserDB$parser,
    java.util.Stack            CUP$parserDB$stack,
    int                        CUP$parserDB$top)
    throws java.lang.Exception
    {
              return CUP$parserDB$do_action_part00000000(
                               CUP$parserDB$act_num,
                               CUP$parserDB$parser,
                               CUP$parserDB$stack,
                               CUP$parserDB$top);
    }
}

}
